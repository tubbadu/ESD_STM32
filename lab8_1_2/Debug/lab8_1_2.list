
lab8_1_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003634  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003948  08003948  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003950  08003950  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  080039c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080039c0  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e59  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b6  00000000  00000000  00026ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  000284a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  00028c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012980  00000000  00000000  000292a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005475  00000000  00000000  0003bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066561  00000000  00000000  00041095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a75f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000281c  00000000  00000000  000a764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037bc 	.word	0x080037bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080037bc 	.word	0x080037bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <LL_RCC_HSI_Enable+0x1c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <LL_RCC_HSI_Enable+0x1c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <LL_RCC_HSI_IsReady+0x20>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40023800 	.word	0x40023800

080009bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4904      	ldr	r1, [pc, #16]	; (80009e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009d2:	4313      	orrs	r3, r2
 80009d4:	600b      	str	r3, [r1, #0]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <LL_RCC_SetSysClkSource+0x24>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f023 0203 	bic.w	r2, r3, #3
 80009f8:	4904      	ldr	r1, [pc, #16]	; (8000a0c <LL_RCC_SetSysClkSource+0x24>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	608b      	str	r3, [r1, #8]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40023800 	.word	0x40023800

08000a10 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <LL_RCC_GetSysClkSource+0x18>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 030c 	and.w	r3, r3, #12
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40023800 	.word	0x40023800

08000a54 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000a64:	4904      	ldr	r1, [pc, #16]	; (8000a78 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40023800 	.word	0x40023800

08000a7c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	608b      	str	r3, [r1, #8]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <LL_RCC_SetTIMPrescaler+0x28>)
 8000aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ab6:	4905      	ldr	r1, [pc, #20]	; (8000acc <LL_RCC_SetTIMPrescaler+0x28>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40023800 	.word	0x40023800

08000ad0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <LL_RCC_PLL_Enable+0x1c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <LL_RCC_PLL_Enable+0x1c>)
 8000ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <LL_RCC_PLL_IsReady+0x24>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	68f9      	ldr	r1, [r7, #12]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4311      	orrs	r1, r2
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	0192      	lsls	r2, r2, #6
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b48:	4904      	ldr	r1, [pc, #16]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	ffbf8000 	.word	0xffbf8000

08000b64 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800

08000b94 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4013      	ands	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3302      	adds	r3, #2
 8000c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	0c1b      	lsrs	r3, r3, #16
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	ea02 0103 	and.w	r1, r2, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	fab3 f383 	clz	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	fa03 f202 	lsl.w	r2, r3, r2
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40013800 	.word	0x40013800

08000c50 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_FLASH_SetLatency+0x24>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 0207 	bic.w	r2, r3, #7
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <LL_FLASH_SetLatency+0x24>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <LL_FLASH_GetLatency+0x18>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0307 	and.w	r3, r3, #7
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000ca4:	4904      	ldr	r1, [pc, #16]	; (8000cb8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40007000 	.word	0x40007000

08000cbc <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d01c      	beq.n	8000d26 <LL_TIM_OC_DisableFast+0x4a>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d017      	beq.n	8000d22 <LL_TIM_OC_DisableFast+0x46>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2b10      	cmp	r3, #16
 8000cf6:	d012      	beq.n	8000d1e <LL_TIM_OC_DisableFast+0x42>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b40      	cmp	r3, #64	; 0x40
 8000cfc:	d00d      	beq.n	8000d1a <LL_TIM_OC_DisableFast+0x3e>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d04:	d007      	beq.n	8000d16 <LL_TIM_OC_DisableFast+0x3a>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0c:	d101      	bne.n	8000d12 <LL_TIM_OC_DisableFast+0x36>
 8000d0e:	2305      	movs	r3, #5
 8000d10:	e00a      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d12:	2306      	movs	r3, #6
 8000d14:	e008      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d16:	2304      	movs	r3, #4
 8000d18:	e006      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e004      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LL_TIM_OC_DisableFast+0x84>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	440b      	add	r3, r1
 8000d38:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4908      	ldr	r1, [pc, #32]	; (8000d64 <LL_TIM_OC_DisableFast+0x88>)
 8000d42:	5ccb      	ldrb	r3, [r1, r3]
 8000d44:	4619      	mov	r1, r3
 8000d46:	2304      	movs	r3, #4
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	601a      	str	r2, [r3, #0]

}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	080037d4 	.word	0x080037d4
 8000d64:	080037dc 	.word	0x080037dc

08000d68 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7a:	f023 0307 	bic.w	r3, r3, #7
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	605a      	str	r2, [r3, #4]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	615a      	str	r2, [r3, #20]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	613b      	str	r3, [r7, #16]
  return result;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	fab3 f383 	clz	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	61bb      	str	r3, [r7, #24]
  return result;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fab3 f383 	clz	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	431a      	orrs	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	601a      	str	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b089      	sub	sp, #36	; 0x24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	613b      	str	r3, [r7, #16]
  return result;
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	61bb      	str	r3, [r7, #24]
  return result;
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	fab3 f383 	clz	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	60da      	str	r2, [r3, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3724      	adds	r7, #36	; 0x24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	041a      	lsls	r2, r3, #16
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b598      	push	{r3, r4, r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f08:	f7ff fe5c 	bl	8000bc4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f10:	f7ff fe40 	bl	8000b94 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f14:	2007      	movs	r0, #7
 8000f16:	f7ff fd0b 	bl	8000930 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f87d 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 f96f 	bl	8001200 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f22:	f000 f91d 	bl	8001160 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f26:	f000 f8c1 	bl	80010ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_WriteReg(TIM3, CCR1, V12p5);                              // threshold 1
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <main+0x108>)
 8000f2c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  LL_TIM_WriteReg(TIM3, CCR2, V2p5);                             // threshold 2
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <main+0x108>)
 8000f34:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
  LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2);   // delete OC flag channel 1
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <main+0x108>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	4a32      	ldr	r2, [pc, #200]	; (8001008 <main+0x108>)
 8000f40:	f023 0302 	bic.w	r3, r3, #2
 8000f44:	6113      	str	r3, [r2, #16]
  LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x4);   // delete OC flag channel 2
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <main+0x108>)
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <main+0x108>)
 8000f4c:	f023 0304 	bic.w	r3, r3, #4
 8000f50:	6113      	str	r3, [r2, #16]
  LL_TIM_WriteReg(TIM3, CR1, LL_TIM_ReadReg(TIM3, CR1) | 0x1);  // counter enable channel 1
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <main+0x108>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <main+0x108>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6013      	str	r3, [r2, #0]
  LL_TIM_WriteReg(TIM3, CR2, LL_TIM_ReadReg(TIM3, CR2) | 0x1);  // counter enable channel 2
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <main+0x108>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4a29      	ldr	r2, [pc, #164]	; (8001008 <main+0x108>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <main+0x108>)
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01e      	beq.n	8000fb4 <main+0xb4>
		LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2); // turn off flag channel 1
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <main+0x108>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a23      	ldr	r2, [pc, #140]	; (8001008 <main+0x108>)
 8000f7c:	f023 0302 	bic.w	r3, r3, #2
 8000f80:	6113      	str	r3, [r2, #16]
		LL_TIM_WriteReg(TIM3, CCR1, LL_TIM_ReadReg(TIM3, CCR1) + V12p5); // set next threshold
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <main+0x108>)
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fabc 	bl	8000504 <__aeabi_ui2d>
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <main+0x10c>)
 8000f92:	f7ff f97b 	bl	800028c <__adddf3>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4c1b      	ldr	r4, [pc, #108]	; (8001008 <main+0x108>)
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_d2uiz>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	6363      	str	r3, [r4, #52]	; 0x34
		LL_GPIO_WriteReg(GPIOA, ODR, LL_GPIO_ReadReg(GPIOA, ODR) ^ (1 << 10)); // toggle pin
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <main+0x110>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <main+0x110>)
 8000fae:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000fb2:	6153      	str	r3, [r2, #20]
	  }
	  if (LL_TIM_ReadReg(TIM3, SR) & 0x4){
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <main+0x108>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0d4      	beq.n	8000f6a <main+0x6a>
		LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x4); // turn off flag channel 2
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <main+0x108>)
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <main+0x108>)
 8000fc6:	f023 0304 	bic.w	r3, r3, #4
 8000fca:	6113      	str	r3, [r2, #16]
		LL_TIM_WriteReg(TIM3, CCR2, LL_TIM_ReadReg(TIM3, CCR2) + V2p5); // set next threshold
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <main+0x108>)
 8000fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa97 	bl	8000504 <__aeabi_ui2d>
 8000fd6:	a30a      	add	r3, pc, #40	; (adr r3, 8001000 <main+0x100>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff f956 	bl	800028c <__adddf3>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4c08      	ldr	r4, [pc, #32]	; (8001008 <main+0x108>)
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fb05 	bl	80005f8 <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	63a3      	str	r3, [r4, #56]	; 0x38
		LL_GPIO_WriteReg(GPIOB, ODR, LL_GPIO_ReadReg(GPIOB, ODR) ^ (1 << 10)); // toggle pin
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <main+0x114>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <main+0x114>)
 8000ff8:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000ffc:	6153      	str	r3, [r2, #20]
	  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){
 8000ffe:	e7b4      	b.n	8000f6a <main+0x6a>
 8001000:	00000000 	.word	0x00000000
 8001004:	40d06800 	.word	0x40d06800
 8001008:	40000400 	.word	0x40000400
 800100c:	40aa4000 	.word	0x40aa4000
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff fe17 	bl	8000c50 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001022:	bf00      	nop
 8001024:	f7ff fe28 	bl	8000c78 <LL_FLASH_GetLatency>
 8001028:	4603      	mov	r3, r0
 800102a:	2b02      	cmp	r3, #2
 800102c:	d1fa      	bne.n	8001024 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800102e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001032:	f7ff fe2f 	bl	8000c94 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001036:	2010      	movs	r0, #16
 8001038:	f7ff fcc0 	bl	80009bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800103c:	f7ff fc9c 	bl	8000978 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001040:	bf00      	nop
 8001042:	f7ff fca9 	bl	8000998 <LL_RCC_HSI_IsReady>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d1fa      	bne.n	8001042 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 800104c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001050:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001054:	2110      	movs	r1, #16
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff fd5e 	bl	8000b18 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800105c:	f7ff fd38 	bl	8000ad0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001060:	bf00      	nop
 8001062:	f7ff fd45 	bl	8000af0 <LL_RCC_PLL_IsReady>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d1fa      	bne.n	8001062 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff fcdd 	bl	8000a2c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001072:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001076:	f7ff fced 	bl	8000a54 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fcfe 	bl	8000a7c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff fcb1 	bl	80009e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001086:	bf00      	nop
 8001088:	f7ff fcc2 	bl	8000a10 <LL_RCC_GetSysClkSource>
 800108c:	4603      	mov	r3, r0
 800108e:	2b08      	cmp	r3, #8
 8001090:	d1fa      	bne.n	8001088 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <SystemClock_Config+0x90>)
 8001094:	f001 fb40 	bl	8002718 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <SystemClock_Config+0x90>)
 800109a:	f001 fb4b 	bl	8002734 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fd00 	bl	8000aa4 <LL_RCC_SetTIMPrescaler>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	0501bd00 	.word	0x0501bd00

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fb6d 	bl	80027a8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f7ff fd60 	bl	8000b94 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 65535;
 80010dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	481b      	ldr	r0, [pc, #108]	; (800115c <MX_TIM3_Init+0xb0>)
 80010ee:	f000 fe83 	bl	8001df8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <MX_TIM3_Init+0xb0>)
 80010f4:	f7ff fde2 	bl	8000cbc <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80010f8:	2100      	movs	r1, #0
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <MX_TIM3_Init+0xb0>)
 80010fc:	f7ff fe34 	bl	8000d68 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8001100:	2310      	movs	r3, #16
 8001102:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 8001104:	2301      	movs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 5000;
 800110c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001110:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	461a      	mov	r2, r3
 800111a:	2101      	movs	r1, #1
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_TIM3_Init+0xb0>)
 800111e:	f000 fee5 	bl	8001eec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001122:	2101      	movs	r1, #1
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_TIM3_Init+0xb0>)
 8001126:	f7ff fdd9 	bl	8000cdc <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.CompareValue = 25000;
 800112a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800112e:	613b      	str	r3, [r7, #16]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	461a      	mov	r2, r3
 8001134:	2110      	movs	r1, #16
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <MX_TIM3_Init+0xb0>)
 8001138:	f000 fed8 	bl	8001eec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 800113c:	2110      	movs	r1, #16
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <MX_TIM3_Init+0xb0>)
 8001140:	f7ff fdcc 	bl	8000cdc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM3_Init+0xb0>)
 8001148:	f7ff fe23 	bl	8000d92 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <MX_TIM3_Init+0xb0>)
 800114e:	f7ff fe33 	bl	8000db8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	; 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40000400 	.word	0x40000400

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	; 0x38
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800118a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800118e:	f7ff fd01 	bl	8000b94 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fce6 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001198:	230c      	movs	r3, #12
 800119a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <MX_USART2_UART_Init+0x98>)
 80011b6:	f000 fbff 	bl	80019b8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011be:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011cc:	230c      	movs	r3, #12
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_USART2_UART_Init+0x9c>)
 80011e0:	f001 fa1c 	bl	800261c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USART2_UART_Init+0x9c>)
 80011e6:	f7ff fe07 	bl	8000df8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_USART2_UART_Init+0x9c>)
 80011ec:	f7ff fdf4 	bl	8000dd8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	; 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001220:	2004      	movs	r0, #4
 8001222:	f7ff fc9f 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001226:	2080      	movs	r0, #128	; 0x80
 8001228:	f7ff fc9c 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fc99 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001232:	2002      	movs	r0, #2
 8001234:	f7ff fc96 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|LL_GPIO_PIN_10);
 8001238:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800123c:	4824      	ldr	r0, [pc, #144]	; (80012d0 <MX_GPIO_Init+0xd0>)
 800123e:	f7ff fe4f 	bl	8000ee0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8001242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001246:	4823      	ldr	r0, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xd4>)
 8001248:	f7ff fe4a 	bl	8000ee0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800124c:	4922      	ldr	r1, [pc, #136]	; (80012d8 <MX_GPIO_Init+0xd8>)
 800124e:	2002      	movs	r0, #2
 8001250:	f7ff fcd0 	bl	8000bf4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800125a:	2301      	movs	r3, #1
 800125c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800125e:	2300      	movs	r3, #0
 8001260:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001262:	2302      	movs	r3, #2
 8001264:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fa1e 	bl	80016ac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4819      	ldr	r0, [pc, #100]	; (80012dc <MX_GPIO_Init+0xdc>)
 8001278:	f7ff fe03 	bl	8000e82 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <MX_GPIO_Init+0xdc>)
 8001284:	f7ff fdce 	bl	8000e24 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|LL_GPIO_PIN_10;
 8001288:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800128c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800128e:	2301      	movs	r3, #1
 8001290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	480b      	ldr	r0, [pc, #44]	; (80012d0 <MX_GPIO_Init+0xd0>)
 80012a4:	f000 fb88 	bl	80019b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80012a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ae:	2301      	movs	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_GPIO_Init+0xd4>)
 80012c4:	f000 fb78 	bl	80019b8 <LL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	00f00003 	.word	0x00f00003
 80012dc:	40020800 	.word	0x40020800

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	int x = (rand()%10 + 50)*5;
 800132e:	f001 fa43 	bl	80027b8 <rand>
 8001332:	4601      	mov	r1, r0
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <SysTick_Handler+0x4c>)
 8001336:	fb83 2301 	smull	r2, r3, r3, r1
 800133a:	109a      	asrs	r2, r3, #2
 800133c:	17cb      	asrs	r3, r1, #31
 800133e:	1ad2      	subs	r2, r2, r3
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	1aca      	subs	r2, r1, r3
 800134a:	3232      	adds	r2, #50	; 0x32
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	603b      	str	r3, [r7, #0]
	for(int i=0;i<x;i++);
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	e002      	b.n	8001360 <SysTick_Handler+0x38>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf8      	blt.n	800135a <SysTick_Handler+0x32>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	66666667 	.word	0x66666667

08001378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	return 1;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_kill>:

int _kill(int pid, int sig)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001392:	f001 f9df 	bl	8002754 <__errno>
 8001396:	4603      	mov	r3, r0
 8001398:	2216      	movs	r2, #22
 800139a:	601a      	str	r2, [r3, #0]
	return -1;
 800139c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_exit>:

void _exit (int status)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ffe7 	bl	8001388 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013ba:	e7fe      	b.n	80013ba <_exit+0x12>

080013bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e00a      	b.n	80013e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ce:	f3af 8000 	nop.w
 80013d2:	4601      	mov	r1, r0
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbf0      	blt.n	80013ce <_read+0x12>
	}

return len;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e009      	b.n	800141c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf1      	blt.n	8001408 <_write+0x12>
	}
	return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_close>:

int _close(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
	return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001456:	605a      	str	r2, [r3, #4]
	return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_isatty>:

int _isatty(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
	return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f001 f944 	bl	8002754 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20018000 	.word	0x20018000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	20000084 	.word	0x20000084
 8001500:	200000a0 	.word	0x200000a0

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800152e:	490e      	ldr	r1, [pc, #56]	; (8001568 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001544:	4c0b      	ldr	r4, [pc, #44]	; (8001574 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001552:	f7ff ffd7 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f001 f903 	bl	8002760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff fcd1 	bl	8000f00 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800156c:	08003958 	.word	0x08003958
  ldr r2, =_sbss
 8001570:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001574:	200000a0 	.word	0x200000a0

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>
	...

0800157c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <LL_EXTI_EnableIT_0_31+0x20>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4904      	ldr	r1, [pc, #16]	; (800159c <LL_EXTI_EnableIT_0_31+0x20>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40013c00 	.word	0x40013c00

080015a0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <LL_EXTI_DisableIT_0_31+0x24>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	4904      	ldr	r1, [pc, #16]	; (80015c4 <LL_EXTI_DisableIT_0_31+0x24>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]

}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40013c00 	.word	0x40013c00

080015ec <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LL_EXTI_DisableEvent_0_31+0x24>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4904      	ldr	r1, [pc, #16]	; (8001610 <LL_EXTI_DisableEvent_0_31+0x24>)
 80015fe:	4013      	ands	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40013c00 	.word	0x40013c00

08001614 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]

}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40013c00 	.word	0x40013c00

08001638 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	43db      	mvns	r3, r3
 8001648:	4904      	ldr	r1, [pc, #16]	; (800165c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800164a:	4013      	ands	r3, r2
 800164c:	608b      	str	r3, [r1, #8]

}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40013c00 	.word	0x40013c00

08001660 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40013c00 	.word	0x40013c00

08001684 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	43db      	mvns	r3, r3
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001696:	4013      	ands	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40013c00 	.word	0x40013c00

080016ac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	791b      	ldrb	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d065      	beq.n	800178c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d06c      	beq.n	80017a2 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	795b      	ldrb	r3, [r3, #5]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d01c      	beq.n	800170a <LL_EXTI_Init+0x5e>
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	dc25      	bgt.n	8001720 <LL_EXTI_Init+0x74>
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <LL_EXTI_Init+0x32>
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d00b      	beq.n	80016f4 <LL_EXTI_Init+0x48>
 80016dc:	e020      	b.n	8001720 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff82 	bl	80015ec <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff45 	bl	800157c <LL_EXTI_EnableIT_0_31>
          break;
 80016f2:	e018      	b.n	8001726 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff51 	bl	80015a0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff60 	bl	80015c8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001708:	e00d      	b.n	8001726 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff34 	bl	800157c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff55 	bl	80015c8 <LL_EXTI_EnableEvent_0_31>
          break;
 800171e:	e002      	b.n	8001726 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
          break;
 8001724:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	799b      	ldrb	r3, [r3, #6]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d039      	beq.n	80017a2 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	799b      	ldrb	r3, [r3, #6]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d01c      	beq.n	8001770 <LL_EXTI_Init+0xc4>
 8001736:	2b03      	cmp	r3, #3
 8001738:	dc25      	bgt.n	8001786 <LL_EXTI_Init+0xda>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d002      	beq.n	8001744 <LL_EXTI_Init+0x98>
 800173e:	2b02      	cmp	r3, #2
 8001740:	d00b      	beq.n	800175a <LL_EXTI_Init+0xae>
 8001742:	e020      	b.n	8001786 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff9b 	bl	8001684 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff5e 	bl	8001614 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001758:	e024      	b.n	80017a4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff6a 	bl	8001638 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff79 	bl	8001660 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800176e:	e019      	b.n	80017a4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff4d 	bl	8001614 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff6e 	bl	8001660 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001784:	e00e      	b.n	80017a4 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
            break;
 800178a:	e00b      	b.n	80017a4 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff05 	bl	80015a0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff26 	bl	80015ec <LL_EXTI_DisableEvent_0_31>
 80017a0:	e000      	b.n	80017a4 <LL_EXTI_Init+0xf8>
      }
 80017a2:	bf00      	nop
  }
  return status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <LL_GPIO_SetPinMode>:
{
 80017ae:	b480      	push	{r7}
 80017b0:	b089      	sub	sp, #36	; 0x24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	613b      	str	r3, [r7, #16]
  return result;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2103      	movs	r1, #3
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	61bb      	str	r3, [r7, #24]
  return result;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	431a      	orrs	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	bf00      	nop
 8001802:	3724      	adds	r7, #36	; 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_GPIO_SetPinOutputType>:
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	431a      	orrs	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_GPIO_SetPinSpeed>:
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	613b      	str	r3, [r7, #16]
  return result;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2103      	movs	r1, #3
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	61bb      	str	r3, [r7, #24]
  return result;
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	609a      	str	r2, [r3, #8]
}
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_GPIO_SetPinPull>:
{
 800189a:	b480      	push	{r7}
 800189c:	b089      	sub	sp, #36	; 0x24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	613b      	str	r3, [r7, #16]
  return result;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fab3 f383 	clz	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2103      	movs	r1, #3
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	401a      	ands	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	61bb      	str	r3, [r7, #24]
  return result;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	431a      	orrs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	60da      	str	r2, [r3, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3724      	adds	r7, #36	; 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_GPIO_SetAFPin_0_7>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	613b      	str	r3, [r7, #16]
  return result;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	210f      	movs	r1, #15
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	61bb      	str	r3, [r7, #24]
  return result;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	431a      	orrs	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	621a      	str	r2, [r3, #32]
}
 800194a:	bf00      	nop
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_GPIO_SetAFPin_8_15>:
{
 8001956:	b480      	push	{r7}
 8001958:	b089      	sub	sp, #36	; 0x24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	613b      	str	r3, [r7, #16]
  return result;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	210f      	movs	r1, #15
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	401a      	ands	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	61bb      	str	r3, [r7, #24]
  return result;
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	431a      	orrs	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019ac:	bf00      	nop
 80019ae:	3724      	adds	r7, #36	; 0x24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	613b      	str	r3, [r7, #16]
  return result;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80019e2:	e050      	b.n	8001a86 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d042      	beq.n	8001a80 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d003      	beq.n	8001a0a <LL_GPIO_Init+0x52>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d10d      	bne.n	8001a26 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	69b9      	ldr	r1, [r7, #24]
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff12 	bl	800183c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	69b9      	ldr	r1, [r7, #24]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fef3 	bl	800180c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	69b9      	ldr	r1, [r7, #24]
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff33 	bl	800189a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d11a      	bne.n	8001a72 <LL_GPIO_Init+0xba>
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	60bb      	str	r3, [r7, #8]
  return result;
 8001a48:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d807      	bhi.n	8001a64 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff4b 	bl	80018f8 <LL_GPIO_SetAFPin_0_7>
 8001a62:	e006      	b.n	8001a72 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff72 	bl	8001956 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	69b9      	ldr	r1, [r7, #24]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fe97 	bl	80017ae <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	3301      	adds	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1a7      	bne.n	80019e4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <LL_RCC_GetSysClkSource>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <LL_RCC_GetSysClkSource+0x18>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <LL_RCC_GetAHBPrescaler>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <LL_RCC_GetAHBPrescaler+0x18>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <LL_RCC_GetAPB1Prescaler>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <LL_RCC_GetAPB2Prescaler>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <LL_RCC_PLL_GetMainSource+0x18>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <LL_RCC_PLL_GetN+0x18>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40023800 	.word	0x40023800

08001b48 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <LL_RCC_PLL_GetP+0x18>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <LL_RCC_PLL_GetDivider+0x18>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b88:	f000 f820 	bl	8001bcc <RCC_GetSystemClockFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f840 	bl	8001c1c <RCC_GetHCLKClockFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f84e 	bl	8001c48 <RCC_GetPCLK1ClockFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f85a 	bl	8001c70 <RCC_GetPCLK2ClockFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001bd6:	f7ff ff63 	bl	8001aa0 <LL_RCC_GetSysClkSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d00c      	beq.n	8001bfa <RCC_GetSystemClockFreq+0x2e>
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d80f      	bhi.n	8001c04 <RCC_GetSystemClockFreq+0x38>
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <RCC_GetSystemClockFreq+0x22>
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d003      	beq.n	8001bf4 <RCC_GetSystemClockFreq+0x28>
 8001bec:	e00a      	b.n	8001c04 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <RCC_GetSystemClockFreq+0x48>)
 8001bf0:	607b      	str	r3, [r7, #4]
      break;
 8001bf2:	e00a      	b.n	8001c0a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <RCC_GetSystemClockFreq+0x4c>)
 8001bf6:	607b      	str	r3, [r7, #4]
      break;
 8001bf8:	e007      	b.n	8001c0a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001bfa:	2008      	movs	r0, #8
 8001bfc:	f000 f84c 	bl	8001c98 <RCC_PLL_GetFreqDomain_SYS>
 8001c00:	6078      	str	r0, [r7, #4]
      break;
 8001c02:	e002      	b.n	8001c0a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <RCC_GetSystemClockFreq+0x48>)
 8001c06:	607b      	str	r3, [r7, #4]
      break;
 8001c08:	bf00      	nop
  }

  return frequency;
 8001c0a:	687b      	ldr	r3, [r7, #4]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	007a1200 	.word	0x007a1200

08001c1c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c24:	f7ff ff4a 	bl	8001abc <LL_RCC_GetAHBPrescaler>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <RCC_GetHCLKClockFreq+0x28>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	40d3      	lsrs	r3, r2
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	080037e4 	.word	0x080037e4

08001c48 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c50:	f7ff ff42 	bl	8001ad8 <LL_RCC_GetAPB1Prescaler>
 8001c54:	4603      	mov	r3, r0
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <RCC_GetPCLK1ClockFreq+0x24>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	40d3      	lsrs	r3, r2
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	080037f4 	.word	0x080037f4

08001c70 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001c78:	f7ff ff3c 	bl	8001af4 <LL_RCC_GetAPB2Prescaler>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	0b5b      	lsrs	r3, r3, #13
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <RCC_GetPCLK2ClockFreq+0x24>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	40d3      	lsrs	r3, r2
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	080037f4 	.word	0x080037f4

08001c98 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001cac:	f7ff ff30 	bl	8001b10 <LL_RCC_PLL_GetMainSource>
 8001cb0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cbe:	d003      	beq.n	8001cc8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001cc0:	e005      	b.n	8001cce <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001cc4:	617b      	str	r3, [r7, #20]
      break;
 8001cc6:	e005      	b.n	8001cd4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001cca:	617b      	str	r3, [r7, #20]
      break;
 8001ccc:	e002      	b.n	8001cd4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d113      	bne.n	8001d02 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001cda:	f7ff ff43 	bl	8001b64 <LL_RCC_PLL_GetDivider>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fbb3 f4f2 	udiv	r4, r3, r2
 8001ce6:	f7ff ff21 	bl	8001b2c <LL_RCC_PLL_GetN>
 8001cea:	4603      	mov	r3, r0
 8001cec:	fb03 f404 	mul.w	r4, r3, r4
 8001cf0:	f7ff ff2a 	bl	8001b48 <LL_RCC_PLL_GetP>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d00:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001d02:	693b      	ldr	r3, [r7, #16]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <LL_TIM_SetPrescaler>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_TIM_SetAutoReload>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_TIM_SetRepetitionCounter>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_TIM_OC_SetCompareCH1>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_TIM_OC_SetCompareCH2>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_TIM_OC_SetCompareCH3>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_TIM_OC_SetCompareCH4>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	615a      	str	r2, [r3, #20]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a31      	ldr	r2, [pc, #196]	; (8001ed0 <LL_TIM_Init+0xd8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00f      	beq.n	8001e30 <LL_TIM_Init+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d00b      	beq.n	8001e30 <LL_TIM_Init+0x38>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ed4 <LL_TIM_Init+0xdc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <LL_TIM_Init+0x38>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <LL_TIM_Init+0xe0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <LL_TIM_Init+0x38>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <LL_TIM_Init+0xe4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d106      	bne.n	8001e3e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <LL_TIM_Init+0xd8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01b      	beq.n	8001e7e <LL_TIM_Init+0x86>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d017      	beq.n	8001e7e <LL_TIM_Init+0x86>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <LL_TIM_Init+0xdc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <LL_TIM_Init+0x86>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <LL_TIM_Init+0xe0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00f      	beq.n	8001e7e <LL_TIM_Init+0x86>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <LL_TIM_Init+0xe4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00b      	beq.n	8001e7e <LL_TIM_Init+0x86>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <LL_TIM_Init+0xe8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <LL_TIM_Init+0x86>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <LL_TIM_Init+0xec>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d003      	beq.n	8001e7e <LL_TIM_Init+0x86>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <LL_TIM_Init+0xf0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d106      	bne.n	8001e8c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff49 	bl	8001d30 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff35 	bl	8001d14 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <LL_TIM_Init+0xd8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d105      	bne.n	8001ebe <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff47 	bl	8001d4c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff8a 	bl	8001dd8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40000800 	.word	0x40000800
 8001edc:	40000c00 	.word	0x40000c00
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40014400 	.word	0x40014400
 8001ee8:	40014800 	.word	0x40014800

08001eec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	d027      	beq.n	8001f54 <LL_TIM_OC_Init+0x68>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	d82a      	bhi.n	8001f62 <LL_TIM_OC_Init+0x76>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f12:	d018      	beq.n	8001f46 <LL_TIM_OC_Init+0x5a>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1a:	d822      	bhi.n	8001f62 <LL_TIM_OC_Init+0x76>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d003      	beq.n	8001f2a <LL_TIM_OC_Init+0x3e>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d007      	beq.n	8001f38 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001f28:	e01b      	b.n	8001f62 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f81f 	bl	8001f70 <OC1Config>
 8001f32:	4603      	mov	r3, r0
 8001f34:	75fb      	strb	r3, [r7, #23]
      break;
 8001f36:	e015      	b.n	8001f64 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f87e 	bl	800203c <OC2Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]
      break;
 8001f44:	e00e      	b.n	8001f64 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f8e1 	bl	8002110 <OC3Config>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	75fb      	strb	r3, [r7, #23]
      break;
 8001f52:	e007      	b.n	8001f64 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f944 	bl	80021e4 <OC4Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8001f60:	e000      	b.n	8001f64 <LL_TIM_OC_Init+0x78>
      break;
 8001f62:	bf00      	nop
  }

  return result;
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	f023 0201 	bic.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f023 0202 	bic.w	r2, r3, #2
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f023 0201 	bic.w	r2, r3, #1
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <OC1Config+0xc8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d11e      	bne.n	8002010 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f023 0208 	bic.w	r2, r3, #8
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f023 0204 	bic.w	r2, r3, #4
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fea0 	bl	8001d68 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40010000 	.word	0x40010000

0800203c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	f023 0210 	bic.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f023 0220 	bic.w	r2, r3, #32
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f023 0210 	bic.w	r2, r3, #16
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a1b      	ldr	r2, [pc, #108]	; (800210c <OC2Config+0xd0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d11f      	bne.n	80020e4 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	019b      	lsls	r3, r3, #6
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	019b      	lsls	r3, r3, #6
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fe44 	bl	8001d84 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40010000 	.word	0x40010000

08002110 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <OC3Config+0xd0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d11f      	bne.n	80021b6 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	029b      	lsls	r3, r3, #10
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	015b      	lsls	r3, r3, #5
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fde9 	bl	8001da0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000

080021e4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	031b      	lsls	r3, r3, #12
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	031b      	lsls	r3, r3, #12
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <OC4Config+0xa0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d107      	bne.n	800225c <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	019b      	lsls	r3, r3, #6
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fda4 	bl	8001dbc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010000 	.word	0x40010000

08002288 <LL_USART_IsEnabled>:
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_USART_SetStopBitsLength>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_USART_SetHWFlowCtrl>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	615a      	str	r2, [r3, #20]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_USART_SetBaudRate>:
{
 80022fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002300:	b09f      	sub	sp, #124	; 0x7c
 8002302:	af00      	add	r7, sp, #0
 8002304:	6778      	str	r0, [r7, #116]	; 0x74
 8002306:	6739      	str	r1, [r7, #112]	; 0x70
 8002308:	66fa      	str	r2, [r7, #108]	; 0x6c
 800230a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800230c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002312:	f040 80bc 	bne.w	800248e <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002318:	461c      	mov	r4, r3
 800231a:	f04f 0500 	mov.w	r5, #0
 800231e:	4622      	mov	r2, r4
 8002320:	462b      	mov	r3, r5
 8002322:	eb12 0a02 	adds.w	sl, r2, r2
 8002326:	eb43 0b03 	adc.w	fp, r3, r3
 800232a:	4652      	mov	r2, sl
 800232c:	465b      	mov	r3, fp
 800232e:	1912      	adds	r2, r2, r4
 8002330:	eb45 0303 	adc.w	r3, r5, r3
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	00d9      	lsls	r1, r3, #3
 800233e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002342:	00d0      	lsls	r0, r2, #3
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	1911      	adds	r1, r2, r4
 800234a:	6639      	str	r1, [r7, #96]	; 0x60
 800234c:	416b      	adcs	r3, r5
 800234e:	667b      	str	r3, [r7, #100]	; 0x64
 8002350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002352:	461a      	mov	r2, r3
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	1891      	adds	r1, r2, r2
 800235a:	6339      	str	r1, [r7, #48]	; 0x30
 800235c:	415b      	adcs	r3, r3
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
 8002360:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002364:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002368:	f7fe f966 	bl	8000638 <__aeabi_uldivmod>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4ba9      	ldr	r3, [pc, #676]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 8002372:	fba3 2302 	umull	r2, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	b29b      	uxth	r3, r3
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	b29e      	uxth	r6, r3
 800237e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002380:	461c      	mov	r4, r3
 8002382:	f04f 0500 	mov.w	r5, #0
 8002386:	4622      	mov	r2, r4
 8002388:	462b      	mov	r3, r5
 800238a:	1891      	adds	r1, r2, r2
 800238c:	62b9      	str	r1, [r7, #40]	; 0x28
 800238e:	415b      	adcs	r3, r3
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002396:	1912      	adds	r2, r2, r4
 8002398:	eb45 0303 	adc.w	r3, r5, r3
 800239c:	f04f 0000 	mov.w	r0, #0
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	00d9      	lsls	r1, r3, #3
 80023a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023aa:	00d0      	lsls	r0, r2, #3
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	1911      	adds	r1, r2, r4
 80023b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80023b4:	416b      	adcs	r3, r5
 80023b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ba:	461a      	mov	r2, r3
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	1891      	adds	r1, r2, r2
 80023c2:	6239      	str	r1, [r7, #32]
 80023c4:	415b      	adcs	r3, r3
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
 80023c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023cc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80023d0:	f7fe f932 	bl	8000638 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 80023da:	fba3 1302 	umull	r1, r3, r3, r2
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2164      	movs	r1, #100	; 0x64
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	3332      	adds	r3, #50	; 0x32
 80023ec:	4a8a      	ldr	r2, [pc, #552]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4433      	add	r3, r6
 8002402:	b29e      	uxth	r6, r3
 8002404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002406:	4618      	mov	r0, r3
 8002408:	f04f 0100 	mov.w	r1, #0
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	1894      	adds	r4, r2, r2
 8002412:	61bc      	str	r4, [r7, #24]
 8002414:	415b      	adcs	r3, r3
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800241c:	1812      	adds	r2, r2, r0
 800241e:	eb41 0303 	adc.w	r3, r1, r3
 8002422:	f04f 0400 	mov.w	r4, #0
 8002426:	f04f 0500 	mov.w	r5, #0
 800242a:	00dd      	lsls	r5, r3, #3
 800242c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002430:	00d4      	lsls	r4, r2, #3
 8002432:	4622      	mov	r2, r4
 8002434:	462b      	mov	r3, r5
 8002436:	1814      	adds	r4, r2, r0
 8002438:	653c      	str	r4, [r7, #80]	; 0x50
 800243a:	414b      	adcs	r3, r1
 800243c:	657b      	str	r3, [r7, #84]	; 0x54
 800243e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002440:	461a      	mov	r2, r3
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	1891      	adds	r1, r2, r2
 8002448:	6139      	str	r1, [r7, #16]
 800244a:	415b      	adcs	r3, r3
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002452:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002456:	f7fe f8ef 	bl	8000638 <__aeabi_uldivmod>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 8002460:	fba3 1302 	umull	r1, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	2164      	movs	r1, #100	; 0x64
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	3332      	adds	r3, #50	; 0x32
 8002472:	4a69      	ldr	r2, [pc, #420]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b29b      	uxth	r3, r3
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	b29b      	uxth	r3, r3
 8002482:	4433      	add	r3, r6
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	609a      	str	r2, [r3, #8]
}
 800248c:	e0be      	b.n	800260c <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800248e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002490:	461c      	mov	r4, r3
 8002492:	f04f 0500 	mov.w	r5, #0
 8002496:	4622      	mov	r2, r4
 8002498:	462b      	mov	r3, r5
 800249a:	eb12 0802 	adds.w	r8, r2, r2
 800249e:	eb43 0903 	adc.w	r9, r3, r3
 80024a2:	4642      	mov	r2, r8
 80024a4:	464b      	mov	r3, r9
 80024a6:	1912      	adds	r2, r2, r4
 80024a8:	eb45 0303 	adc.w	r3, r5, r3
 80024ac:	f04f 0000 	mov.w	r0, #0
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	00d9      	lsls	r1, r3, #3
 80024b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ba:	00d0      	lsls	r0, r2, #3
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	1911      	adds	r1, r2, r4
 80024c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80024c4:	416b      	adcs	r3, r5
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ca:	4618      	mov	r0, r3
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	008b      	lsls	r3, r1, #2
 80024da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024de:	0082      	lsls	r2, r0, #2
 80024e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80024e4:	f7fe f8a8 	bl	8000638 <__aeabi_uldivmod>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 80024ee:	fba3 2302 	umull	r2, r3, r3, r2
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	b29e      	uxth	r6, r3
 80024fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fc:	4618      	mov	r0, r3
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	1894      	adds	r4, r2, r2
 8002508:	60bc      	str	r4, [r7, #8]
 800250a:	415b      	adcs	r3, r3
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002512:	1812      	adds	r2, r2, r0
 8002514:	eb41 0303 	adc.w	r3, r1, r3
 8002518:	f04f 0400 	mov.w	r4, #0
 800251c:	f04f 0500 	mov.w	r5, #0
 8002520:	00dd      	lsls	r5, r3, #3
 8002522:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002526:	00d4      	lsls	r4, r2, #3
 8002528:	4622      	mov	r2, r4
 800252a:	462b      	mov	r3, r5
 800252c:	1814      	adds	r4, r2, r0
 800252e:	643c      	str	r4, [r7, #64]	; 0x40
 8002530:	414b      	adcs	r3, r1
 8002532:	647b      	str	r3, [r7, #68]	; 0x44
 8002534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002536:	4618      	mov	r0, r3
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	008b      	lsls	r3, r1, #2
 8002546:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800254a:	0082      	lsls	r2, r0, #2
 800254c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002550:	f7fe f872 	bl	8000638 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 800255a:	fba3 1302 	umull	r1, r3, r3, r2
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2164      	movs	r1, #100	; 0x64
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	3332      	adds	r3, #50	; 0x32
 800256c:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	b29b      	uxth	r3, r3
 8002576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257a:	b29b      	uxth	r3, r3
 800257c:	4433      	add	r3, r6
 800257e:	b29e      	uxth	r6, r3
 8002580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002582:	4618      	mov	r0, r3
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	1894      	adds	r4, r2, r2
 800258e:	603c      	str	r4, [r7, #0]
 8002590:	415b      	adcs	r3, r3
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002598:	1812      	adds	r2, r2, r0
 800259a:	eb41 0303 	adc.w	r3, r1, r3
 800259e:	f04f 0400 	mov.w	r4, #0
 80025a2:	f04f 0500 	mov.w	r5, #0
 80025a6:	00dd      	lsls	r5, r3, #3
 80025a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025ac:	00d4      	lsls	r4, r2, #3
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	1814      	adds	r4, r2, r0
 80025b4:	63bc      	str	r4, [r7, #56]	; 0x38
 80025b6:	414b      	adcs	r3, r1
 80025b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025bc:	4618      	mov	r0, r3
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	008b      	lsls	r3, r1, #2
 80025cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025d0:	0082      	lsls	r2, r0, #2
 80025d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025d6:	f7fe f82f 	bl	8000638 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	2164      	movs	r1, #100	; 0x64
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	3332      	adds	r3, #50	; 0x32
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <LL_USART_SetBaudRate+0x31c>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	b29b      	uxth	r3, r3
 8002602:	4433      	add	r3, r6
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260a:	609a      	str	r2, [r3, #8]
}
 800260c:	bf00      	nop
 800260e:	377c      	adds	r7, #124	; 0x7c
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002616:	bf00      	nop
 8002618:	51eb851f 	.word	0x51eb851f

0800261c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fe2a 	bl	8002288 <LL_USART_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d149      	bne.n	80026ce <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002642:	f023 030c 	bic.w	r3, r3, #12
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	6851      	ldr	r1, [r2, #4]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	68d2      	ldr	r2, [r2, #12]
 800264e:	4311      	orrs	r1, r2
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6912      	ldr	r2, [r2, #16]
 8002654:	4311      	orrs	r1, r2
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	6992      	ldr	r2, [r2, #24]
 800265a:	430a      	orrs	r2, r1
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fe21 	bl	80022b0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fe2e 	bl	80022d6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fa7e 	bl	8001b80 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <LL_USART_Init+0xbc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e00c      	b.n	80026ac <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a11      	ldr	r2, [pc, #68]	; (80026dc <LL_USART_Init+0xc0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d102      	bne.n	80026a0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e005      	b.n	80026ac <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <LL_USART_Init+0xc4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80026ba:	2300      	movs	r3, #0
 80026bc:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fe17 	bl	80022fc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40011000 	.word	0x40011000
 80026dc:	40004400 	.word	0x40004400
 80026e0:	40011400 	.word	0x40011400

080026e4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4a07      	ldr	r2, [pc, #28]	; (8002714 <LL_InitTick+0x30>)
 80026f8:	3b01      	subs	r3, #1
 80026fa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <LL_InitTick+0x30>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <LL_InitTick+0x30>)
 8002704:	2205      	movs	r2, #5
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e010 	.word	0xe000e010

08002718 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ffdd 	bl	80026e4 <LL_InitTick>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <LL_SetSystemCoreClock+0x1c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000000 	.word	0x20000000

08002754 <__errno>:
 8002754:	4b01      	ldr	r3, [pc, #4]	; (800275c <__errno+0x8>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000004 	.word	0x20000004

08002760 <__libc_init_array>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	4d0d      	ldr	r5, [pc, #52]	; (8002798 <__libc_init_array+0x38>)
 8002764:	4c0d      	ldr	r4, [pc, #52]	; (800279c <__libc_init_array+0x3c>)
 8002766:	1b64      	subs	r4, r4, r5
 8002768:	10a4      	asrs	r4, r4, #2
 800276a:	2600      	movs	r6, #0
 800276c:	42a6      	cmp	r6, r4
 800276e:	d109      	bne.n	8002784 <__libc_init_array+0x24>
 8002770:	4d0b      	ldr	r5, [pc, #44]	; (80027a0 <__libc_init_array+0x40>)
 8002772:	4c0c      	ldr	r4, [pc, #48]	; (80027a4 <__libc_init_array+0x44>)
 8002774:	f001 f822 	bl	80037bc <_init>
 8002778:	1b64      	subs	r4, r4, r5
 800277a:	10a4      	asrs	r4, r4, #2
 800277c:	2600      	movs	r6, #0
 800277e:	42a6      	cmp	r6, r4
 8002780:	d105      	bne.n	800278e <__libc_init_array+0x2e>
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f855 3b04 	ldr.w	r3, [r5], #4
 8002788:	4798      	blx	r3
 800278a:	3601      	adds	r6, #1
 800278c:	e7ee      	b.n	800276c <__libc_init_array+0xc>
 800278e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002792:	4798      	blx	r3
 8002794:	3601      	adds	r6, #1
 8002796:	e7f2      	b.n	800277e <__libc_init_array+0x1e>
 8002798:	08003950 	.word	0x08003950
 800279c:	08003950 	.word	0x08003950
 80027a0:	08003950 	.word	0x08003950
 80027a4:	08003954 	.word	0x08003954

080027a8 <memset>:
 80027a8:	4402      	add	r2, r0
 80027aa:	4603      	mov	r3, r0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d100      	bne.n	80027b2 <memset+0xa>
 80027b0:	4770      	bx	lr
 80027b2:	f803 1b01 	strb.w	r1, [r3], #1
 80027b6:	e7f9      	b.n	80027ac <memset+0x4>

080027b8 <rand>:
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <rand+0x60>)
 80027ba:	b510      	push	{r4, lr}
 80027bc:	681c      	ldr	r4, [r3, #0]
 80027be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027c0:	b9b3      	cbnz	r3, 80027f0 <rand+0x38>
 80027c2:	2018      	movs	r0, #24
 80027c4:	f000 f868 	bl	8002898 <malloc>
 80027c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80027ca:	b928      	cbnz	r0, 80027d8 <rand+0x20>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <rand+0x64>)
 80027d0:	4813      	ldr	r0, [pc, #76]	; (8002820 <rand+0x68>)
 80027d2:	214e      	movs	r1, #78	; 0x4e
 80027d4:	f000 f830 	bl	8002838 <__assert_func>
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <rand+0x6c>)
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <rand+0x70>)
 80027dc:	e9c0 2300 	strd	r2, r3, [r0]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <rand+0x74>)
 80027e2:	6083      	str	r3, [r0, #8]
 80027e4:	230b      	movs	r3, #11
 80027e6:	8183      	strh	r3, [r0, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	2300      	movs	r3, #0
 80027ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80027f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80027f2:	480f      	ldr	r0, [pc, #60]	; (8002830 <rand+0x78>)
 80027f4:	690a      	ldr	r2, [r1, #16]
 80027f6:	694b      	ldr	r3, [r1, #20]
 80027f8:	4c0e      	ldr	r4, [pc, #56]	; (8002834 <rand+0x7c>)
 80027fa:	4350      	muls	r0, r2
 80027fc:	fb04 0003 	mla	r0, r4, r3, r0
 8002800:	fba2 3404 	umull	r3, r4, r2, r4
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	4404      	add	r4, r0
 8002808:	f144 0000 	adc.w	r0, r4, #0
 800280c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002810:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002814:	bd10      	pop	{r4, pc}
 8002816:	bf00      	nop
 8002818:	20000004 	.word	0x20000004
 800281c:	08003800 	.word	0x08003800
 8002820:	08003817 	.word	0x08003817
 8002824:	abcd330e 	.word	0xabcd330e
 8002828:	e66d1234 	.word	0xe66d1234
 800282c:	0005deec 	.word	0x0005deec
 8002830:	5851f42d 	.word	0x5851f42d
 8002834:	4c957f2d 	.word	0x4c957f2d

08002838 <__assert_func>:
 8002838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800283a:	4614      	mov	r4, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <__assert_func+0x2c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4605      	mov	r5, r0
 8002844:	68d8      	ldr	r0, [r3, #12]
 8002846:	b14c      	cbz	r4, 800285c <__assert_func+0x24>
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <__assert_func+0x30>)
 800284a:	9100      	str	r1, [sp, #0]
 800284c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002850:	4906      	ldr	r1, [pc, #24]	; (800286c <__assert_func+0x34>)
 8002852:	462b      	mov	r3, r5
 8002854:	f000 f80e 	bl	8002874 <fiprintf>
 8002858:	f000 fc8e 	bl	8003178 <abort>
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__assert_func+0x38>)
 800285e:	461c      	mov	r4, r3
 8002860:	e7f3      	b.n	800284a <__assert_func+0x12>
 8002862:	bf00      	nop
 8002864:	20000004 	.word	0x20000004
 8002868:	08003876 	.word	0x08003876
 800286c:	08003883 	.word	0x08003883
 8002870:	080038b1 	.word	0x080038b1

08002874 <fiprintf>:
 8002874:	b40e      	push	{r1, r2, r3}
 8002876:	b503      	push	{r0, r1, lr}
 8002878:	4601      	mov	r1, r0
 800287a:	ab03      	add	r3, sp, #12
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <fiprintf+0x20>)
 800287e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002882:	6800      	ldr	r0, [r0, #0]
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	f000 f8e3 	bl	8002a50 <_vfiprintf_r>
 800288a:	b002      	add	sp, #8
 800288c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002890:	b003      	add	sp, #12
 8002892:	4770      	bx	lr
 8002894:	20000004 	.word	0x20000004

08002898 <malloc>:
 8002898:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <malloc+0xc>)
 800289a:	4601      	mov	r1, r0
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	f000 b853 	b.w	8002948 <_malloc_r>
 80028a2:	bf00      	nop
 80028a4:	20000004 	.word	0x20000004

080028a8 <_free_r>:
 80028a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028aa:	2900      	cmp	r1, #0
 80028ac:	d048      	beq.n	8002940 <_free_r+0x98>
 80028ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028b2:	9001      	str	r0, [sp, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f1a1 0404 	sub.w	r4, r1, #4
 80028ba:	bfb8      	it	lt
 80028bc:	18e4      	addlt	r4, r4, r3
 80028be:	f000 fe81 	bl	80035c4 <__malloc_lock>
 80028c2:	4a20      	ldr	r2, [pc, #128]	; (8002944 <_free_r+0x9c>)
 80028c4:	9801      	ldr	r0, [sp, #4]
 80028c6:	6813      	ldr	r3, [r2, #0]
 80028c8:	4615      	mov	r5, r2
 80028ca:	b933      	cbnz	r3, 80028da <_free_r+0x32>
 80028cc:	6063      	str	r3, [r4, #4]
 80028ce:	6014      	str	r4, [r2, #0]
 80028d0:	b003      	add	sp, #12
 80028d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028d6:	f000 be7b 	b.w	80035d0 <__malloc_unlock>
 80028da:	42a3      	cmp	r3, r4
 80028dc:	d90b      	bls.n	80028f6 <_free_r+0x4e>
 80028de:	6821      	ldr	r1, [r4, #0]
 80028e0:	1862      	adds	r2, r4, r1
 80028e2:	4293      	cmp	r3, r2
 80028e4:	bf04      	itt	eq
 80028e6:	681a      	ldreq	r2, [r3, #0]
 80028e8:	685b      	ldreq	r3, [r3, #4]
 80028ea:	6063      	str	r3, [r4, #4]
 80028ec:	bf04      	itt	eq
 80028ee:	1852      	addeq	r2, r2, r1
 80028f0:	6022      	streq	r2, [r4, #0]
 80028f2:	602c      	str	r4, [r5, #0]
 80028f4:	e7ec      	b.n	80028d0 <_free_r+0x28>
 80028f6:	461a      	mov	r2, r3
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b10b      	cbz	r3, 8002900 <_free_r+0x58>
 80028fc:	42a3      	cmp	r3, r4
 80028fe:	d9fa      	bls.n	80028f6 <_free_r+0x4e>
 8002900:	6811      	ldr	r1, [r2, #0]
 8002902:	1855      	adds	r5, r2, r1
 8002904:	42a5      	cmp	r5, r4
 8002906:	d10b      	bne.n	8002920 <_free_r+0x78>
 8002908:	6824      	ldr	r4, [r4, #0]
 800290a:	4421      	add	r1, r4
 800290c:	1854      	adds	r4, r2, r1
 800290e:	42a3      	cmp	r3, r4
 8002910:	6011      	str	r1, [r2, #0]
 8002912:	d1dd      	bne.n	80028d0 <_free_r+0x28>
 8002914:	681c      	ldr	r4, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	6053      	str	r3, [r2, #4]
 800291a:	4421      	add	r1, r4
 800291c:	6011      	str	r1, [r2, #0]
 800291e:	e7d7      	b.n	80028d0 <_free_r+0x28>
 8002920:	d902      	bls.n	8002928 <_free_r+0x80>
 8002922:	230c      	movs	r3, #12
 8002924:	6003      	str	r3, [r0, #0]
 8002926:	e7d3      	b.n	80028d0 <_free_r+0x28>
 8002928:	6825      	ldr	r5, [r4, #0]
 800292a:	1961      	adds	r1, r4, r5
 800292c:	428b      	cmp	r3, r1
 800292e:	bf04      	itt	eq
 8002930:	6819      	ldreq	r1, [r3, #0]
 8002932:	685b      	ldreq	r3, [r3, #4]
 8002934:	6063      	str	r3, [r4, #4]
 8002936:	bf04      	itt	eq
 8002938:	1949      	addeq	r1, r1, r5
 800293a:	6021      	streq	r1, [r4, #0]
 800293c:	6054      	str	r4, [r2, #4]
 800293e:	e7c7      	b.n	80028d0 <_free_r+0x28>
 8002940:	b003      	add	sp, #12
 8002942:	bd30      	pop	{r4, r5, pc}
 8002944:	20000088 	.word	0x20000088

08002948 <_malloc_r>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	1ccd      	adds	r5, r1, #3
 800294c:	f025 0503 	bic.w	r5, r5, #3
 8002950:	3508      	adds	r5, #8
 8002952:	2d0c      	cmp	r5, #12
 8002954:	bf38      	it	cc
 8002956:	250c      	movcc	r5, #12
 8002958:	2d00      	cmp	r5, #0
 800295a:	4606      	mov	r6, r0
 800295c:	db01      	blt.n	8002962 <_malloc_r+0x1a>
 800295e:	42a9      	cmp	r1, r5
 8002960:	d903      	bls.n	800296a <_malloc_r+0x22>
 8002962:	230c      	movs	r3, #12
 8002964:	6033      	str	r3, [r6, #0]
 8002966:	2000      	movs	r0, #0
 8002968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296a:	f000 fe2b 	bl	80035c4 <__malloc_lock>
 800296e:	4921      	ldr	r1, [pc, #132]	; (80029f4 <_malloc_r+0xac>)
 8002970:	680a      	ldr	r2, [r1, #0]
 8002972:	4614      	mov	r4, r2
 8002974:	b99c      	cbnz	r4, 800299e <_malloc_r+0x56>
 8002976:	4f20      	ldr	r7, [pc, #128]	; (80029f8 <_malloc_r+0xb0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b923      	cbnz	r3, 8002986 <_malloc_r+0x3e>
 800297c:	4621      	mov	r1, r4
 800297e:	4630      	mov	r0, r6
 8002980:	f000 fb2a 	bl	8002fd8 <_sbrk_r>
 8002984:	6038      	str	r0, [r7, #0]
 8002986:	4629      	mov	r1, r5
 8002988:	4630      	mov	r0, r6
 800298a:	f000 fb25 	bl	8002fd8 <_sbrk_r>
 800298e:	1c43      	adds	r3, r0, #1
 8002990:	d123      	bne.n	80029da <_malloc_r+0x92>
 8002992:	230c      	movs	r3, #12
 8002994:	6033      	str	r3, [r6, #0]
 8002996:	4630      	mov	r0, r6
 8002998:	f000 fe1a 	bl	80035d0 <__malloc_unlock>
 800299c:	e7e3      	b.n	8002966 <_malloc_r+0x1e>
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	1b5b      	subs	r3, r3, r5
 80029a2:	d417      	bmi.n	80029d4 <_malloc_r+0x8c>
 80029a4:	2b0b      	cmp	r3, #11
 80029a6:	d903      	bls.n	80029b0 <_malloc_r+0x68>
 80029a8:	6023      	str	r3, [r4, #0]
 80029aa:	441c      	add	r4, r3
 80029ac:	6025      	str	r5, [r4, #0]
 80029ae:	e004      	b.n	80029ba <_malloc_r+0x72>
 80029b0:	6863      	ldr	r3, [r4, #4]
 80029b2:	42a2      	cmp	r2, r4
 80029b4:	bf0c      	ite	eq
 80029b6:	600b      	streq	r3, [r1, #0]
 80029b8:	6053      	strne	r3, [r2, #4]
 80029ba:	4630      	mov	r0, r6
 80029bc:	f000 fe08 	bl	80035d0 <__malloc_unlock>
 80029c0:	f104 000b 	add.w	r0, r4, #11
 80029c4:	1d23      	adds	r3, r4, #4
 80029c6:	f020 0007 	bic.w	r0, r0, #7
 80029ca:	1ac2      	subs	r2, r0, r3
 80029cc:	d0cc      	beq.n	8002968 <_malloc_r+0x20>
 80029ce:	1a1b      	subs	r3, r3, r0
 80029d0:	50a3      	str	r3, [r4, r2]
 80029d2:	e7c9      	b.n	8002968 <_malloc_r+0x20>
 80029d4:	4622      	mov	r2, r4
 80029d6:	6864      	ldr	r4, [r4, #4]
 80029d8:	e7cc      	b.n	8002974 <_malloc_r+0x2c>
 80029da:	1cc4      	adds	r4, r0, #3
 80029dc:	f024 0403 	bic.w	r4, r4, #3
 80029e0:	42a0      	cmp	r0, r4
 80029e2:	d0e3      	beq.n	80029ac <_malloc_r+0x64>
 80029e4:	1a21      	subs	r1, r4, r0
 80029e6:	4630      	mov	r0, r6
 80029e8:	f000 faf6 	bl	8002fd8 <_sbrk_r>
 80029ec:	3001      	adds	r0, #1
 80029ee:	d1dd      	bne.n	80029ac <_malloc_r+0x64>
 80029f0:	e7cf      	b.n	8002992 <_malloc_r+0x4a>
 80029f2:	bf00      	nop
 80029f4:	20000088 	.word	0x20000088
 80029f8:	2000008c 	.word	0x2000008c

080029fc <__sfputc_r>:
 80029fc:	6893      	ldr	r3, [r2, #8]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	b410      	push	{r4}
 8002a04:	6093      	str	r3, [r2, #8]
 8002a06:	da08      	bge.n	8002a1a <__sfputc_r+0x1e>
 8002a08:	6994      	ldr	r4, [r2, #24]
 8002a0a:	42a3      	cmp	r3, r4
 8002a0c:	db01      	blt.n	8002a12 <__sfputc_r+0x16>
 8002a0e:	290a      	cmp	r1, #10
 8002a10:	d103      	bne.n	8002a1a <__sfputc_r+0x1e>
 8002a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a16:	f000 baef 	b.w	8002ff8 <__swbuf_r>
 8002a1a:	6813      	ldr	r3, [r2, #0]
 8002a1c:	1c58      	adds	r0, r3, #1
 8002a1e:	6010      	str	r0, [r2, #0]
 8002a20:	7019      	strb	r1, [r3, #0]
 8002a22:	4608      	mov	r0, r1
 8002a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <__sfputs_r>:
 8002a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2c:	4606      	mov	r6, r0
 8002a2e:	460f      	mov	r7, r1
 8002a30:	4614      	mov	r4, r2
 8002a32:	18d5      	adds	r5, r2, r3
 8002a34:	42ac      	cmp	r4, r5
 8002a36:	d101      	bne.n	8002a3c <__sfputs_r+0x12>
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e007      	b.n	8002a4c <__sfputs_r+0x22>
 8002a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a40:	463a      	mov	r2, r7
 8002a42:	4630      	mov	r0, r6
 8002a44:	f7ff ffda 	bl	80029fc <__sfputc_r>
 8002a48:	1c43      	adds	r3, r0, #1
 8002a4a:	d1f3      	bne.n	8002a34 <__sfputs_r+0xa>
 8002a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a50 <_vfiprintf_r>:
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	460d      	mov	r5, r1
 8002a56:	b09d      	sub	sp, #116	; 0x74
 8002a58:	4614      	mov	r4, r2
 8002a5a:	4698      	mov	r8, r3
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	b118      	cbz	r0, 8002a68 <_vfiprintf_r+0x18>
 8002a60:	6983      	ldr	r3, [r0, #24]
 8002a62:	b90b      	cbnz	r3, 8002a68 <_vfiprintf_r+0x18>
 8002a64:	f000 fcaa 	bl	80033bc <__sinit>
 8002a68:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <_vfiprintf_r+0x240>)
 8002a6a:	429d      	cmp	r5, r3
 8002a6c:	d11b      	bne.n	8002aa6 <_vfiprintf_r+0x56>
 8002a6e:	6875      	ldr	r5, [r6, #4]
 8002a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a72:	07d9      	lsls	r1, r3, #31
 8002a74:	d405      	bmi.n	8002a82 <_vfiprintf_r+0x32>
 8002a76:	89ab      	ldrh	r3, [r5, #12]
 8002a78:	059a      	lsls	r2, r3, #22
 8002a7a:	d402      	bmi.n	8002a82 <_vfiprintf_r+0x32>
 8002a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a7e:	f000 fd3b 	bl	80034f8 <__retarget_lock_acquire_recursive>
 8002a82:	89ab      	ldrh	r3, [r5, #12]
 8002a84:	071b      	lsls	r3, r3, #28
 8002a86:	d501      	bpl.n	8002a8c <_vfiprintf_r+0x3c>
 8002a88:	692b      	ldr	r3, [r5, #16]
 8002a8a:	b9eb      	cbnz	r3, 8002ac8 <_vfiprintf_r+0x78>
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f000 fb04 	bl	800309c <__swsetup_r>
 8002a94:	b1c0      	cbz	r0, 8002ac8 <_vfiprintf_r+0x78>
 8002a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a98:	07dc      	lsls	r4, r3, #31
 8002a9a:	d50e      	bpl.n	8002aba <_vfiprintf_r+0x6a>
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa0:	b01d      	add	sp, #116	; 0x74
 8002aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa6:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <_vfiprintf_r+0x244>)
 8002aa8:	429d      	cmp	r5, r3
 8002aaa:	d101      	bne.n	8002ab0 <_vfiprintf_r+0x60>
 8002aac:	68b5      	ldr	r5, [r6, #8]
 8002aae:	e7df      	b.n	8002a70 <_vfiprintf_r+0x20>
 8002ab0:	4b79      	ldr	r3, [pc, #484]	; (8002c98 <_vfiprintf_r+0x248>)
 8002ab2:	429d      	cmp	r5, r3
 8002ab4:	bf08      	it	eq
 8002ab6:	68f5      	ldreq	r5, [r6, #12]
 8002ab8:	e7da      	b.n	8002a70 <_vfiprintf_r+0x20>
 8002aba:	89ab      	ldrh	r3, [r5, #12]
 8002abc:	0598      	lsls	r0, r3, #22
 8002abe:	d4ed      	bmi.n	8002a9c <_vfiprintf_r+0x4c>
 8002ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ac2:	f000 fd1a 	bl	80034fa <__retarget_lock_release_recursive>
 8002ac6:	e7e9      	b.n	8002a9c <_vfiprintf_r+0x4c>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9309      	str	r3, [sp, #36]	; 0x24
 8002acc:	2320      	movs	r3, #32
 8002ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ad6:	2330      	movs	r3, #48	; 0x30
 8002ad8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002c9c <_vfiprintf_r+0x24c>
 8002adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ae0:	f04f 0901 	mov.w	r9, #1
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	469a      	mov	sl, r3
 8002ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aec:	b10a      	cbz	r2, 8002af2 <_vfiprintf_r+0xa2>
 8002aee:	2a25      	cmp	r2, #37	; 0x25
 8002af0:	d1f9      	bne.n	8002ae6 <_vfiprintf_r+0x96>
 8002af2:	ebba 0b04 	subs.w	fp, sl, r4
 8002af6:	d00b      	beq.n	8002b10 <_vfiprintf_r+0xc0>
 8002af8:	465b      	mov	r3, fp
 8002afa:	4622      	mov	r2, r4
 8002afc:	4629      	mov	r1, r5
 8002afe:	4630      	mov	r0, r6
 8002b00:	f7ff ff93 	bl	8002a2a <__sfputs_r>
 8002b04:	3001      	adds	r0, #1
 8002b06:	f000 80aa 	beq.w	8002c5e <_vfiprintf_r+0x20e>
 8002b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b0c:	445a      	add	r2, fp
 8002b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8002b10:	f89a 3000 	ldrb.w	r3, [sl]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a2 	beq.w	8002c5e <_vfiprintf_r+0x20e>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b24:	f10a 0a01 	add.w	sl, sl, #1
 8002b28:	9304      	str	r3, [sp, #16]
 8002b2a:	9307      	str	r3, [sp, #28]
 8002b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b30:	931a      	str	r3, [sp, #104]	; 0x68
 8002b32:	4654      	mov	r4, sl
 8002b34:	2205      	movs	r2, #5
 8002b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b3a:	4858      	ldr	r0, [pc, #352]	; (8002c9c <_vfiprintf_r+0x24c>)
 8002b3c:	f7fd fb50 	bl	80001e0 <memchr>
 8002b40:	9a04      	ldr	r2, [sp, #16]
 8002b42:	b9d8      	cbnz	r0, 8002b7c <_vfiprintf_r+0x12c>
 8002b44:	06d1      	lsls	r1, r2, #27
 8002b46:	bf44      	itt	mi
 8002b48:	2320      	movmi	r3, #32
 8002b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b4e:	0713      	lsls	r3, r2, #28
 8002b50:	bf44      	itt	mi
 8002b52:	232b      	movmi	r3, #43	; 0x2b
 8002b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b58:	f89a 3000 	ldrb.w	r3, [sl]
 8002b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b5e:	d015      	beq.n	8002b8c <_vfiprintf_r+0x13c>
 8002b60:	9a07      	ldr	r2, [sp, #28]
 8002b62:	4654      	mov	r4, sl
 8002b64:	2000      	movs	r0, #0
 8002b66:	f04f 0c0a 	mov.w	ip, #10
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b70:	3b30      	subs	r3, #48	; 0x30
 8002b72:	2b09      	cmp	r3, #9
 8002b74:	d94e      	bls.n	8002c14 <_vfiprintf_r+0x1c4>
 8002b76:	b1b0      	cbz	r0, 8002ba6 <_vfiprintf_r+0x156>
 8002b78:	9207      	str	r2, [sp, #28]
 8002b7a:	e014      	b.n	8002ba6 <_vfiprintf_r+0x156>
 8002b7c:	eba0 0308 	sub.w	r3, r0, r8
 8002b80:	fa09 f303 	lsl.w	r3, r9, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	9304      	str	r3, [sp, #16]
 8002b88:	46a2      	mov	sl, r4
 8002b8a:	e7d2      	b.n	8002b32 <_vfiprintf_r+0xe2>
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	1d19      	adds	r1, r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	9103      	str	r1, [sp, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bfbb      	ittet	lt
 8002b98:	425b      	neglt	r3, r3
 8002b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8002b9e:	9307      	strge	r3, [sp, #28]
 8002ba0:	9307      	strlt	r3, [sp, #28]
 8002ba2:	bfb8      	it	lt
 8002ba4:	9204      	strlt	r2, [sp, #16]
 8002ba6:	7823      	ldrb	r3, [r4, #0]
 8002ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8002baa:	d10c      	bne.n	8002bc6 <_vfiprintf_r+0x176>
 8002bac:	7863      	ldrb	r3, [r4, #1]
 8002bae:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb0:	d135      	bne.n	8002c1e <_vfiprintf_r+0x1ce>
 8002bb2:	9b03      	ldr	r3, [sp, #12]
 8002bb4:	1d1a      	adds	r2, r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	9203      	str	r2, [sp, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bfb8      	it	lt
 8002bbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bc2:	3402      	adds	r4, #2
 8002bc4:	9305      	str	r3, [sp, #20]
 8002bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002cac <_vfiprintf_r+0x25c>
 8002bca:	7821      	ldrb	r1, [r4, #0]
 8002bcc:	2203      	movs	r2, #3
 8002bce:	4650      	mov	r0, sl
 8002bd0:	f7fd fb06 	bl	80001e0 <memchr>
 8002bd4:	b140      	cbz	r0, 8002be8 <_vfiprintf_r+0x198>
 8002bd6:	2340      	movs	r3, #64	; 0x40
 8002bd8:	eba0 000a 	sub.w	r0, r0, sl
 8002bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8002be0:	9b04      	ldr	r3, [sp, #16]
 8002be2:	4303      	orrs	r3, r0
 8002be4:	3401      	adds	r4, #1
 8002be6:	9304      	str	r3, [sp, #16]
 8002be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bec:	482c      	ldr	r0, [pc, #176]	; (8002ca0 <_vfiprintf_r+0x250>)
 8002bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bf2:	2206      	movs	r2, #6
 8002bf4:	f7fd faf4 	bl	80001e0 <memchr>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d03f      	beq.n	8002c7c <_vfiprintf_r+0x22c>
 8002bfc:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <_vfiprintf_r+0x254>)
 8002bfe:	bb1b      	cbnz	r3, 8002c48 <_vfiprintf_r+0x1f8>
 8002c00:	9b03      	ldr	r3, [sp, #12]
 8002c02:	3307      	adds	r3, #7
 8002c04:	f023 0307 	bic.w	r3, r3, #7
 8002c08:	3308      	adds	r3, #8
 8002c0a:	9303      	str	r3, [sp, #12]
 8002c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c0e:	443b      	add	r3, r7
 8002c10:	9309      	str	r3, [sp, #36]	; 0x24
 8002c12:	e767      	b.n	8002ae4 <_vfiprintf_r+0x94>
 8002c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c18:	460c      	mov	r4, r1
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	e7a5      	b.n	8002b6a <_vfiprintf_r+0x11a>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	3401      	adds	r4, #1
 8002c22:	9305      	str	r3, [sp, #20]
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0c0a 	mov.w	ip, #10
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c30:	3a30      	subs	r2, #48	; 0x30
 8002c32:	2a09      	cmp	r2, #9
 8002c34:	d903      	bls.n	8002c3e <_vfiprintf_r+0x1ee>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0c5      	beq.n	8002bc6 <_vfiprintf_r+0x176>
 8002c3a:	9105      	str	r1, [sp, #20]
 8002c3c:	e7c3      	b.n	8002bc6 <_vfiprintf_r+0x176>
 8002c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c42:	4604      	mov	r4, r0
 8002c44:	2301      	movs	r3, #1
 8002c46:	e7f0      	b.n	8002c2a <_vfiprintf_r+0x1da>
 8002c48:	ab03      	add	r3, sp, #12
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	462a      	mov	r2, r5
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <_vfiprintf_r+0x258>)
 8002c50:	a904      	add	r1, sp, #16
 8002c52:	4630      	mov	r0, r6
 8002c54:	f3af 8000 	nop.w
 8002c58:	4607      	mov	r7, r0
 8002c5a:	1c78      	adds	r0, r7, #1
 8002c5c:	d1d6      	bne.n	8002c0c <_vfiprintf_r+0x1bc>
 8002c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c60:	07d9      	lsls	r1, r3, #31
 8002c62:	d405      	bmi.n	8002c70 <_vfiprintf_r+0x220>
 8002c64:	89ab      	ldrh	r3, [r5, #12]
 8002c66:	059a      	lsls	r2, r3, #22
 8002c68:	d402      	bmi.n	8002c70 <_vfiprintf_r+0x220>
 8002c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c6c:	f000 fc45 	bl	80034fa <__retarget_lock_release_recursive>
 8002c70:	89ab      	ldrh	r3, [r5, #12]
 8002c72:	065b      	lsls	r3, r3, #25
 8002c74:	f53f af12 	bmi.w	8002a9c <_vfiprintf_r+0x4c>
 8002c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c7a:	e711      	b.n	8002aa0 <_vfiprintf_r+0x50>
 8002c7c:	ab03      	add	r3, sp, #12
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	462a      	mov	r2, r5
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <_vfiprintf_r+0x258>)
 8002c84:	a904      	add	r1, sp, #16
 8002c86:	4630      	mov	r0, r6
 8002c88:	f000 f880 	bl	8002d8c <_printf_i>
 8002c8c:	e7e4      	b.n	8002c58 <_vfiprintf_r+0x208>
 8002c8e:	bf00      	nop
 8002c90:	08003908 	.word	0x08003908
 8002c94:	08003928 	.word	0x08003928
 8002c98:	080038e8 	.word	0x080038e8
 8002c9c:	080038b2 	.word	0x080038b2
 8002ca0:	080038bc 	.word	0x080038bc
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	08002a2b 	.word	0x08002a2b
 8002cac:	080038b8 	.word	0x080038b8

08002cb0 <_printf_common>:
 8002cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb4:	4616      	mov	r6, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	688a      	ldr	r2, [r1, #8]
 8002cba:	690b      	ldr	r3, [r1, #16]
 8002cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bfb8      	it	lt
 8002cc4:	4613      	movlt	r3, r2
 8002cc6:	6033      	str	r3, [r6, #0]
 8002cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ccc:	4607      	mov	r7, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	b10a      	cbz	r2, 8002cd6 <_printf_common+0x26>
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	6033      	str	r3, [r6, #0]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	0699      	lsls	r1, r3, #26
 8002cda:	bf42      	ittt	mi
 8002cdc:	6833      	ldrmi	r3, [r6, #0]
 8002cde:	3302      	addmi	r3, #2
 8002ce0:	6033      	strmi	r3, [r6, #0]
 8002ce2:	6825      	ldr	r5, [r4, #0]
 8002ce4:	f015 0506 	ands.w	r5, r5, #6
 8002ce8:	d106      	bne.n	8002cf8 <_printf_common+0x48>
 8002cea:	f104 0a19 	add.w	sl, r4, #25
 8002cee:	68e3      	ldr	r3, [r4, #12]
 8002cf0:	6832      	ldr	r2, [r6, #0]
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	42ab      	cmp	r3, r5
 8002cf6:	dc26      	bgt.n	8002d46 <_printf_common+0x96>
 8002cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cfc:	1e13      	subs	r3, r2, #0
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	bf18      	it	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	0692      	lsls	r2, r2, #26
 8002d06:	d42b      	bmi.n	8002d60 <_printf_common+0xb0>
 8002d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	4638      	mov	r0, r7
 8002d10:	47c0      	blx	r8
 8002d12:	3001      	adds	r0, #1
 8002d14:	d01e      	beq.n	8002d54 <_printf_common+0xa4>
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	68e5      	ldr	r5, [r4, #12]
 8002d1a:	6832      	ldr	r2, [r6, #0]
 8002d1c:	f003 0306 	and.w	r3, r3, #6
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	bf08      	it	eq
 8002d24:	1aad      	subeq	r5, r5, r2
 8002d26:	68a3      	ldr	r3, [r4, #8]
 8002d28:	6922      	ldr	r2, [r4, #16]
 8002d2a:	bf0c      	ite	eq
 8002d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d30:	2500      	movne	r5, #0
 8002d32:	4293      	cmp	r3, r2
 8002d34:	bfc4      	itt	gt
 8002d36:	1a9b      	subgt	r3, r3, r2
 8002d38:	18ed      	addgt	r5, r5, r3
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	341a      	adds	r4, #26
 8002d3e:	42b5      	cmp	r5, r6
 8002d40:	d11a      	bne.n	8002d78 <_printf_common+0xc8>
 8002d42:	2000      	movs	r0, #0
 8002d44:	e008      	b.n	8002d58 <_printf_common+0xa8>
 8002d46:	2301      	movs	r3, #1
 8002d48:	4652      	mov	r2, sl
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	4638      	mov	r0, r7
 8002d4e:	47c0      	blx	r8
 8002d50:	3001      	adds	r0, #1
 8002d52:	d103      	bne.n	8002d5c <_printf_common+0xac>
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5c:	3501      	adds	r5, #1
 8002d5e:	e7c6      	b.n	8002cee <_printf_common+0x3e>
 8002d60:	18e1      	adds	r1, r4, r3
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	2030      	movs	r0, #48	; 0x30
 8002d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d6a:	4422      	add	r2, r4
 8002d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d74:	3302      	adds	r3, #2
 8002d76:	e7c7      	b.n	8002d08 <_printf_common+0x58>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	4638      	mov	r0, r7
 8002d80:	47c0      	blx	r8
 8002d82:	3001      	adds	r0, #1
 8002d84:	d0e6      	beq.n	8002d54 <_printf_common+0xa4>
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7d9      	b.n	8002d3e <_printf_common+0x8e>
	...

08002d8c <_printf_i>:
 8002d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d90:	460c      	mov	r4, r1
 8002d92:	4691      	mov	r9, r2
 8002d94:	7e27      	ldrb	r7, [r4, #24]
 8002d96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d98:	2f78      	cmp	r7, #120	; 0x78
 8002d9a:	4680      	mov	r8, r0
 8002d9c:	469a      	mov	sl, r3
 8002d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002da2:	d807      	bhi.n	8002db4 <_printf_i+0x28>
 8002da4:	2f62      	cmp	r7, #98	; 0x62
 8002da6:	d80a      	bhi.n	8002dbe <_printf_i+0x32>
 8002da8:	2f00      	cmp	r7, #0
 8002daa:	f000 80d8 	beq.w	8002f5e <_printf_i+0x1d2>
 8002dae:	2f58      	cmp	r7, #88	; 0x58
 8002db0:	f000 80a3 	beq.w	8002efa <_printf_i+0x16e>
 8002db4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dbc:	e03a      	b.n	8002e34 <_printf_i+0xa8>
 8002dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dc2:	2b15      	cmp	r3, #21
 8002dc4:	d8f6      	bhi.n	8002db4 <_printf_i+0x28>
 8002dc6:	a001      	add	r0, pc, #4	; (adr r0, 8002dcc <_printf_i+0x40>)
 8002dc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002dcc:	08002e25 	.word	0x08002e25
 8002dd0:	08002e39 	.word	0x08002e39
 8002dd4:	08002db5 	.word	0x08002db5
 8002dd8:	08002db5 	.word	0x08002db5
 8002ddc:	08002db5 	.word	0x08002db5
 8002de0:	08002db5 	.word	0x08002db5
 8002de4:	08002e39 	.word	0x08002e39
 8002de8:	08002db5 	.word	0x08002db5
 8002dec:	08002db5 	.word	0x08002db5
 8002df0:	08002db5 	.word	0x08002db5
 8002df4:	08002db5 	.word	0x08002db5
 8002df8:	08002f45 	.word	0x08002f45
 8002dfc:	08002e69 	.word	0x08002e69
 8002e00:	08002f27 	.word	0x08002f27
 8002e04:	08002db5 	.word	0x08002db5
 8002e08:	08002db5 	.word	0x08002db5
 8002e0c:	08002f67 	.word	0x08002f67
 8002e10:	08002db5 	.word	0x08002db5
 8002e14:	08002e69 	.word	0x08002e69
 8002e18:	08002db5 	.word	0x08002db5
 8002e1c:	08002db5 	.word	0x08002db5
 8002e20:	08002f2f 	.word	0x08002f2f
 8002e24:	680b      	ldr	r3, [r1, #0]
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	600a      	str	r2, [r1, #0]
 8002e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0a3      	b.n	8002f80 <_printf_i+0x1f4>
 8002e38:	6825      	ldr	r5, [r4, #0]
 8002e3a:	6808      	ldr	r0, [r1, #0]
 8002e3c:	062e      	lsls	r6, r5, #24
 8002e3e:	f100 0304 	add.w	r3, r0, #4
 8002e42:	d50a      	bpl.n	8002e5a <_printf_i+0xce>
 8002e44:	6805      	ldr	r5, [r0, #0]
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	da03      	bge.n	8002e54 <_printf_i+0xc8>
 8002e4c:	232d      	movs	r3, #45	; 0x2d
 8002e4e:	426d      	negs	r5, r5
 8002e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e54:	485e      	ldr	r0, [pc, #376]	; (8002fd0 <_printf_i+0x244>)
 8002e56:	230a      	movs	r3, #10
 8002e58:	e019      	b.n	8002e8e <_printf_i+0x102>
 8002e5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e5e:	6805      	ldr	r5, [r0, #0]
 8002e60:	600b      	str	r3, [r1, #0]
 8002e62:	bf18      	it	ne
 8002e64:	b22d      	sxthne	r5, r5
 8002e66:	e7ef      	b.n	8002e48 <_printf_i+0xbc>
 8002e68:	680b      	ldr	r3, [r1, #0]
 8002e6a:	6825      	ldr	r5, [r4, #0]
 8002e6c:	1d18      	adds	r0, r3, #4
 8002e6e:	6008      	str	r0, [r1, #0]
 8002e70:	0628      	lsls	r0, r5, #24
 8002e72:	d501      	bpl.n	8002e78 <_printf_i+0xec>
 8002e74:	681d      	ldr	r5, [r3, #0]
 8002e76:	e002      	b.n	8002e7e <_printf_i+0xf2>
 8002e78:	0669      	lsls	r1, r5, #25
 8002e7a:	d5fb      	bpl.n	8002e74 <_printf_i+0xe8>
 8002e7c:	881d      	ldrh	r5, [r3, #0]
 8002e7e:	4854      	ldr	r0, [pc, #336]	; (8002fd0 <_printf_i+0x244>)
 8002e80:	2f6f      	cmp	r7, #111	; 0x6f
 8002e82:	bf0c      	ite	eq
 8002e84:	2308      	moveq	r3, #8
 8002e86:	230a      	movne	r3, #10
 8002e88:	2100      	movs	r1, #0
 8002e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e8e:	6866      	ldr	r6, [r4, #4]
 8002e90:	60a6      	str	r6, [r4, #8]
 8002e92:	2e00      	cmp	r6, #0
 8002e94:	bfa2      	ittt	ge
 8002e96:	6821      	ldrge	r1, [r4, #0]
 8002e98:	f021 0104 	bicge.w	r1, r1, #4
 8002e9c:	6021      	strge	r1, [r4, #0]
 8002e9e:	b90d      	cbnz	r5, 8002ea4 <_printf_i+0x118>
 8002ea0:	2e00      	cmp	r6, #0
 8002ea2:	d04d      	beq.n	8002f40 <_printf_i+0x1b4>
 8002ea4:	4616      	mov	r6, r2
 8002ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8002eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8002eae:	5dc7      	ldrb	r7, [r0, r7]
 8002eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002eb4:	462f      	mov	r7, r5
 8002eb6:	42bb      	cmp	r3, r7
 8002eb8:	460d      	mov	r5, r1
 8002eba:	d9f4      	bls.n	8002ea6 <_printf_i+0x11a>
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d10b      	bne.n	8002ed8 <_printf_i+0x14c>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	07df      	lsls	r7, r3, #31
 8002ec4:	d508      	bpl.n	8002ed8 <_printf_i+0x14c>
 8002ec6:	6923      	ldr	r3, [r4, #16]
 8002ec8:	6861      	ldr	r1, [r4, #4]
 8002eca:	4299      	cmp	r1, r3
 8002ecc:	bfde      	ittt	le
 8002ece:	2330      	movle	r3, #48	; 0x30
 8002ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ed4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002ed8:	1b92      	subs	r2, r2, r6
 8002eda:	6122      	str	r2, [r4, #16]
 8002edc:	f8cd a000 	str.w	sl, [sp]
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	aa03      	add	r2, sp, #12
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	f7ff fee2 	bl	8002cb0 <_printf_common>
 8002eec:	3001      	adds	r0, #1
 8002eee:	d14c      	bne.n	8002f8a <_printf_i+0x1fe>
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef4:	b004      	add	sp, #16
 8002ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002efa:	4835      	ldr	r0, [pc, #212]	; (8002fd0 <_printf_i+0x244>)
 8002efc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	680e      	ldr	r6, [r1, #0]
 8002f04:	061f      	lsls	r7, r3, #24
 8002f06:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f0a:	600e      	str	r6, [r1, #0]
 8002f0c:	d514      	bpl.n	8002f38 <_printf_i+0x1ac>
 8002f0e:	07d9      	lsls	r1, r3, #31
 8002f10:	bf44      	itt	mi
 8002f12:	f043 0320 	orrmi.w	r3, r3, #32
 8002f16:	6023      	strmi	r3, [r4, #0]
 8002f18:	b91d      	cbnz	r5, 8002f22 <_printf_i+0x196>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	f023 0320 	bic.w	r3, r3, #32
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	2310      	movs	r3, #16
 8002f24:	e7b0      	b.n	8002e88 <_printf_i+0xfc>
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	f043 0320 	orr.w	r3, r3, #32
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	2378      	movs	r3, #120	; 0x78
 8002f30:	4828      	ldr	r0, [pc, #160]	; (8002fd4 <_printf_i+0x248>)
 8002f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f36:	e7e3      	b.n	8002f00 <_printf_i+0x174>
 8002f38:	065e      	lsls	r6, r3, #25
 8002f3a:	bf48      	it	mi
 8002f3c:	b2ad      	uxthmi	r5, r5
 8002f3e:	e7e6      	b.n	8002f0e <_printf_i+0x182>
 8002f40:	4616      	mov	r6, r2
 8002f42:	e7bb      	b.n	8002ebc <_printf_i+0x130>
 8002f44:	680b      	ldr	r3, [r1, #0]
 8002f46:	6826      	ldr	r6, [r4, #0]
 8002f48:	6960      	ldr	r0, [r4, #20]
 8002f4a:	1d1d      	adds	r5, r3, #4
 8002f4c:	600d      	str	r5, [r1, #0]
 8002f4e:	0635      	lsls	r5, r6, #24
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	d501      	bpl.n	8002f58 <_printf_i+0x1cc>
 8002f54:	6018      	str	r0, [r3, #0]
 8002f56:	e002      	b.n	8002f5e <_printf_i+0x1d2>
 8002f58:	0671      	lsls	r1, r6, #25
 8002f5a:	d5fb      	bpl.n	8002f54 <_printf_i+0x1c8>
 8002f5c:	8018      	strh	r0, [r3, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	6123      	str	r3, [r4, #16]
 8002f62:	4616      	mov	r6, r2
 8002f64:	e7ba      	b.n	8002edc <_printf_i+0x150>
 8002f66:	680b      	ldr	r3, [r1, #0]
 8002f68:	1d1a      	adds	r2, r3, #4
 8002f6a:	600a      	str	r2, [r1, #0]
 8002f6c:	681e      	ldr	r6, [r3, #0]
 8002f6e:	6862      	ldr	r2, [r4, #4]
 8002f70:	2100      	movs	r1, #0
 8002f72:	4630      	mov	r0, r6
 8002f74:	f7fd f934 	bl	80001e0 <memchr>
 8002f78:	b108      	cbz	r0, 8002f7e <_printf_i+0x1f2>
 8002f7a:	1b80      	subs	r0, r0, r6
 8002f7c:	6060      	str	r0, [r4, #4]
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	6123      	str	r3, [r4, #16]
 8002f82:	2300      	movs	r3, #0
 8002f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f88:	e7a8      	b.n	8002edc <_printf_i+0x150>
 8002f8a:	6923      	ldr	r3, [r4, #16]
 8002f8c:	4632      	mov	r2, r6
 8002f8e:	4649      	mov	r1, r9
 8002f90:	4640      	mov	r0, r8
 8002f92:	47d0      	blx	sl
 8002f94:	3001      	adds	r0, #1
 8002f96:	d0ab      	beq.n	8002ef0 <_printf_i+0x164>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	079b      	lsls	r3, r3, #30
 8002f9c:	d413      	bmi.n	8002fc6 <_printf_i+0x23a>
 8002f9e:	68e0      	ldr	r0, [r4, #12]
 8002fa0:	9b03      	ldr	r3, [sp, #12]
 8002fa2:	4298      	cmp	r0, r3
 8002fa4:	bfb8      	it	lt
 8002fa6:	4618      	movlt	r0, r3
 8002fa8:	e7a4      	b.n	8002ef4 <_printf_i+0x168>
 8002faa:	2301      	movs	r3, #1
 8002fac:	4632      	mov	r2, r6
 8002fae:	4649      	mov	r1, r9
 8002fb0:	4640      	mov	r0, r8
 8002fb2:	47d0      	blx	sl
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d09b      	beq.n	8002ef0 <_printf_i+0x164>
 8002fb8:	3501      	adds	r5, #1
 8002fba:	68e3      	ldr	r3, [r4, #12]
 8002fbc:	9903      	ldr	r1, [sp, #12]
 8002fbe:	1a5b      	subs	r3, r3, r1
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	dcf2      	bgt.n	8002faa <_printf_i+0x21e>
 8002fc4:	e7eb      	b.n	8002f9e <_printf_i+0x212>
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	f104 0619 	add.w	r6, r4, #25
 8002fcc:	e7f5      	b.n	8002fba <_printf_i+0x22e>
 8002fce:	bf00      	nop
 8002fd0:	080038c3 	.word	0x080038c3
 8002fd4:	080038d4 	.word	0x080038d4

08002fd8 <_sbrk_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4d06      	ldr	r5, [pc, #24]	; (8002ff4 <_sbrk_r+0x1c>)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	4604      	mov	r4, r0
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	602b      	str	r3, [r5, #0]
 8002fe4:	f7fe fa58 	bl	8001498 <_sbrk>
 8002fe8:	1c43      	adds	r3, r0, #1
 8002fea:	d102      	bne.n	8002ff2 <_sbrk_r+0x1a>
 8002fec:	682b      	ldr	r3, [r5, #0]
 8002fee:	b103      	cbz	r3, 8002ff2 <_sbrk_r+0x1a>
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
 8002ff4:	2000009c 	.word	0x2000009c

08002ff8 <__swbuf_r>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	460e      	mov	r6, r1
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	4605      	mov	r5, r0
 8003000:	b118      	cbz	r0, 800300a <__swbuf_r+0x12>
 8003002:	6983      	ldr	r3, [r0, #24]
 8003004:	b90b      	cbnz	r3, 800300a <__swbuf_r+0x12>
 8003006:	f000 f9d9 	bl	80033bc <__sinit>
 800300a:	4b21      	ldr	r3, [pc, #132]	; (8003090 <__swbuf_r+0x98>)
 800300c:	429c      	cmp	r4, r3
 800300e:	d12b      	bne.n	8003068 <__swbuf_r+0x70>
 8003010:	686c      	ldr	r4, [r5, #4]
 8003012:	69a3      	ldr	r3, [r4, #24]
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	071a      	lsls	r2, r3, #28
 800301a:	d52f      	bpl.n	800307c <__swbuf_r+0x84>
 800301c:	6923      	ldr	r3, [r4, #16]
 800301e:	b36b      	cbz	r3, 800307c <__swbuf_r+0x84>
 8003020:	6923      	ldr	r3, [r4, #16]
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	1ac0      	subs	r0, r0, r3
 8003026:	6963      	ldr	r3, [r4, #20]
 8003028:	b2f6      	uxtb	r6, r6
 800302a:	4283      	cmp	r3, r0
 800302c:	4637      	mov	r7, r6
 800302e:	dc04      	bgt.n	800303a <__swbuf_r+0x42>
 8003030:	4621      	mov	r1, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f92e 	bl	8003294 <_fflush_r>
 8003038:	bb30      	cbnz	r0, 8003088 <__swbuf_r+0x90>
 800303a:	68a3      	ldr	r3, [r4, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	60a3      	str	r3, [r4, #8]
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	701e      	strb	r6, [r3, #0]
 8003048:	6963      	ldr	r3, [r4, #20]
 800304a:	3001      	adds	r0, #1
 800304c:	4283      	cmp	r3, r0
 800304e:	d004      	beq.n	800305a <__swbuf_r+0x62>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	07db      	lsls	r3, r3, #31
 8003054:	d506      	bpl.n	8003064 <__swbuf_r+0x6c>
 8003056:	2e0a      	cmp	r6, #10
 8003058:	d104      	bne.n	8003064 <__swbuf_r+0x6c>
 800305a:	4621      	mov	r1, r4
 800305c:	4628      	mov	r0, r5
 800305e:	f000 f919 	bl	8003294 <_fflush_r>
 8003062:	b988      	cbnz	r0, 8003088 <__swbuf_r+0x90>
 8003064:	4638      	mov	r0, r7
 8003066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <__swbuf_r+0x9c>)
 800306a:	429c      	cmp	r4, r3
 800306c:	d101      	bne.n	8003072 <__swbuf_r+0x7a>
 800306e:	68ac      	ldr	r4, [r5, #8]
 8003070:	e7cf      	b.n	8003012 <__swbuf_r+0x1a>
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <__swbuf_r+0xa0>)
 8003074:	429c      	cmp	r4, r3
 8003076:	bf08      	it	eq
 8003078:	68ec      	ldreq	r4, [r5, #12]
 800307a:	e7ca      	b.n	8003012 <__swbuf_r+0x1a>
 800307c:	4621      	mov	r1, r4
 800307e:	4628      	mov	r0, r5
 8003080:	f000 f80c 	bl	800309c <__swsetup_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	d0cb      	beq.n	8003020 <__swbuf_r+0x28>
 8003088:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800308c:	e7ea      	b.n	8003064 <__swbuf_r+0x6c>
 800308e:	bf00      	nop
 8003090:	08003908 	.word	0x08003908
 8003094:	08003928 	.word	0x08003928
 8003098:	080038e8 	.word	0x080038e8

0800309c <__swsetup_r>:
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <__swsetup_r+0xcc>)
 800309e:	b570      	push	{r4, r5, r6, lr}
 80030a0:	681d      	ldr	r5, [r3, #0]
 80030a2:	4606      	mov	r6, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	b125      	cbz	r5, 80030b2 <__swsetup_r+0x16>
 80030a8:	69ab      	ldr	r3, [r5, #24]
 80030aa:	b913      	cbnz	r3, 80030b2 <__swsetup_r+0x16>
 80030ac:	4628      	mov	r0, r5
 80030ae:	f000 f985 	bl	80033bc <__sinit>
 80030b2:	4b2e      	ldr	r3, [pc, #184]	; (800316c <__swsetup_r+0xd0>)
 80030b4:	429c      	cmp	r4, r3
 80030b6:	d10f      	bne.n	80030d8 <__swsetup_r+0x3c>
 80030b8:	686c      	ldr	r4, [r5, #4]
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030c0:	0719      	lsls	r1, r3, #28
 80030c2:	d42c      	bmi.n	800311e <__swsetup_r+0x82>
 80030c4:	06dd      	lsls	r5, r3, #27
 80030c6:	d411      	bmi.n	80030ec <__swsetup_r+0x50>
 80030c8:	2309      	movs	r3, #9
 80030ca:	6033      	str	r3, [r6, #0]
 80030cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030d0:	81a3      	strh	r3, [r4, #12]
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d6:	e03e      	b.n	8003156 <__swsetup_r+0xba>
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <__swsetup_r+0xd4>)
 80030da:	429c      	cmp	r4, r3
 80030dc:	d101      	bne.n	80030e2 <__swsetup_r+0x46>
 80030de:	68ac      	ldr	r4, [r5, #8]
 80030e0:	e7eb      	b.n	80030ba <__swsetup_r+0x1e>
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <__swsetup_r+0xd8>)
 80030e4:	429c      	cmp	r4, r3
 80030e6:	bf08      	it	eq
 80030e8:	68ec      	ldreq	r4, [r5, #12]
 80030ea:	e7e6      	b.n	80030ba <__swsetup_r+0x1e>
 80030ec:	0758      	lsls	r0, r3, #29
 80030ee:	d512      	bpl.n	8003116 <__swsetup_r+0x7a>
 80030f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030f2:	b141      	cbz	r1, 8003106 <__swsetup_r+0x6a>
 80030f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030f8:	4299      	cmp	r1, r3
 80030fa:	d002      	beq.n	8003102 <__swsetup_r+0x66>
 80030fc:	4630      	mov	r0, r6
 80030fe:	f7ff fbd3 	bl	80028a8 <_free_r>
 8003102:	2300      	movs	r3, #0
 8003104:	6363      	str	r3, [r4, #52]	; 0x34
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	2300      	movs	r3, #0
 8003110:	6063      	str	r3, [r4, #4]
 8003112:	6923      	ldr	r3, [r4, #16]
 8003114:	6023      	str	r3, [r4, #0]
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	f043 0308 	orr.w	r3, r3, #8
 800311c:	81a3      	strh	r3, [r4, #12]
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	b94b      	cbnz	r3, 8003136 <__swsetup_r+0x9a>
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d003      	beq.n	8003136 <__swsetup_r+0x9a>
 800312e:	4621      	mov	r1, r4
 8003130:	4630      	mov	r0, r6
 8003132:	f000 fa07 	bl	8003544 <__smakebuf_r>
 8003136:	89a0      	ldrh	r0, [r4, #12]
 8003138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800313c:	f010 0301 	ands.w	r3, r0, #1
 8003140:	d00a      	beq.n	8003158 <__swsetup_r+0xbc>
 8003142:	2300      	movs	r3, #0
 8003144:	60a3      	str	r3, [r4, #8]
 8003146:	6963      	ldr	r3, [r4, #20]
 8003148:	425b      	negs	r3, r3
 800314a:	61a3      	str	r3, [r4, #24]
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	b943      	cbnz	r3, 8003162 <__swsetup_r+0xc6>
 8003150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003154:	d1ba      	bne.n	80030cc <__swsetup_r+0x30>
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	0781      	lsls	r1, r0, #30
 800315a:	bf58      	it	pl
 800315c:	6963      	ldrpl	r3, [r4, #20]
 800315e:	60a3      	str	r3, [r4, #8]
 8003160:	e7f4      	b.n	800314c <__swsetup_r+0xb0>
 8003162:	2000      	movs	r0, #0
 8003164:	e7f7      	b.n	8003156 <__swsetup_r+0xba>
 8003166:	bf00      	nop
 8003168:	20000004 	.word	0x20000004
 800316c:	08003908 	.word	0x08003908
 8003170:	08003928 	.word	0x08003928
 8003174:	080038e8 	.word	0x080038e8

08003178 <abort>:
 8003178:	b508      	push	{r3, lr}
 800317a:	2006      	movs	r0, #6
 800317c:	f000 fa56 	bl	800362c <raise>
 8003180:	2001      	movs	r0, #1
 8003182:	f7fe f911 	bl	80013a8 <_exit>
	...

08003188 <__sflush_r>:
 8003188:	898a      	ldrh	r2, [r1, #12]
 800318a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318e:	4605      	mov	r5, r0
 8003190:	0710      	lsls	r0, r2, #28
 8003192:	460c      	mov	r4, r1
 8003194:	d458      	bmi.n	8003248 <__sflush_r+0xc0>
 8003196:	684b      	ldr	r3, [r1, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	dc05      	bgt.n	80031a8 <__sflush_r+0x20>
 800319c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dc02      	bgt.n	80031a8 <__sflush_r+0x20>
 80031a2:	2000      	movs	r0, #0
 80031a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031aa:	2e00      	cmp	r6, #0
 80031ac:	d0f9      	beq.n	80031a2 <__sflush_r+0x1a>
 80031ae:	2300      	movs	r3, #0
 80031b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031b4:	682f      	ldr	r7, [r5, #0]
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	d032      	beq.n	8003220 <__sflush_r+0x98>
 80031ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	075a      	lsls	r2, r3, #29
 80031c0:	d505      	bpl.n	80031ce <__sflush_r+0x46>
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	1ac0      	subs	r0, r0, r3
 80031c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031c8:	b10b      	cbz	r3, 80031ce <__sflush_r+0x46>
 80031ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031cc:	1ac0      	subs	r0, r0, r3
 80031ce:	2300      	movs	r3, #0
 80031d0:	4602      	mov	r2, r0
 80031d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031d4:	6a21      	ldr	r1, [r4, #32]
 80031d6:	4628      	mov	r0, r5
 80031d8:	47b0      	blx	r6
 80031da:	1c43      	adds	r3, r0, #1
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	d106      	bne.n	80031ee <__sflush_r+0x66>
 80031e0:	6829      	ldr	r1, [r5, #0]
 80031e2:	291d      	cmp	r1, #29
 80031e4:	d82c      	bhi.n	8003240 <__sflush_r+0xb8>
 80031e6:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <__sflush_r+0x108>)
 80031e8:	40ca      	lsrs	r2, r1
 80031ea:	07d6      	lsls	r6, r2, #31
 80031ec:	d528      	bpl.n	8003240 <__sflush_r+0xb8>
 80031ee:	2200      	movs	r2, #0
 80031f0:	6062      	str	r2, [r4, #4]
 80031f2:	04d9      	lsls	r1, r3, #19
 80031f4:	6922      	ldr	r2, [r4, #16]
 80031f6:	6022      	str	r2, [r4, #0]
 80031f8:	d504      	bpl.n	8003204 <__sflush_r+0x7c>
 80031fa:	1c42      	adds	r2, r0, #1
 80031fc:	d101      	bne.n	8003202 <__sflush_r+0x7a>
 80031fe:	682b      	ldr	r3, [r5, #0]
 8003200:	b903      	cbnz	r3, 8003204 <__sflush_r+0x7c>
 8003202:	6560      	str	r0, [r4, #84]	; 0x54
 8003204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003206:	602f      	str	r7, [r5, #0]
 8003208:	2900      	cmp	r1, #0
 800320a:	d0ca      	beq.n	80031a2 <__sflush_r+0x1a>
 800320c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003210:	4299      	cmp	r1, r3
 8003212:	d002      	beq.n	800321a <__sflush_r+0x92>
 8003214:	4628      	mov	r0, r5
 8003216:	f7ff fb47 	bl	80028a8 <_free_r>
 800321a:	2000      	movs	r0, #0
 800321c:	6360      	str	r0, [r4, #52]	; 0x34
 800321e:	e7c1      	b.n	80031a4 <__sflush_r+0x1c>
 8003220:	6a21      	ldr	r1, [r4, #32]
 8003222:	2301      	movs	r3, #1
 8003224:	4628      	mov	r0, r5
 8003226:	47b0      	blx	r6
 8003228:	1c41      	adds	r1, r0, #1
 800322a:	d1c7      	bne.n	80031bc <__sflush_r+0x34>
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0c4      	beq.n	80031bc <__sflush_r+0x34>
 8003232:	2b1d      	cmp	r3, #29
 8003234:	d001      	beq.n	800323a <__sflush_r+0xb2>
 8003236:	2b16      	cmp	r3, #22
 8003238:	d101      	bne.n	800323e <__sflush_r+0xb6>
 800323a:	602f      	str	r7, [r5, #0]
 800323c:	e7b1      	b.n	80031a2 <__sflush_r+0x1a>
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	e7ad      	b.n	80031a4 <__sflush_r+0x1c>
 8003248:	690f      	ldr	r7, [r1, #16]
 800324a:	2f00      	cmp	r7, #0
 800324c:	d0a9      	beq.n	80031a2 <__sflush_r+0x1a>
 800324e:	0793      	lsls	r3, r2, #30
 8003250:	680e      	ldr	r6, [r1, #0]
 8003252:	bf08      	it	eq
 8003254:	694b      	ldreq	r3, [r1, #20]
 8003256:	600f      	str	r7, [r1, #0]
 8003258:	bf18      	it	ne
 800325a:	2300      	movne	r3, #0
 800325c:	eba6 0807 	sub.w	r8, r6, r7
 8003260:	608b      	str	r3, [r1, #8]
 8003262:	f1b8 0f00 	cmp.w	r8, #0
 8003266:	dd9c      	ble.n	80031a2 <__sflush_r+0x1a>
 8003268:	6a21      	ldr	r1, [r4, #32]
 800326a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800326c:	4643      	mov	r3, r8
 800326e:	463a      	mov	r2, r7
 8003270:	4628      	mov	r0, r5
 8003272:	47b0      	blx	r6
 8003274:	2800      	cmp	r0, #0
 8003276:	dc06      	bgt.n	8003286 <__sflush_r+0xfe>
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003284:	e78e      	b.n	80031a4 <__sflush_r+0x1c>
 8003286:	4407      	add	r7, r0
 8003288:	eba8 0800 	sub.w	r8, r8, r0
 800328c:	e7e9      	b.n	8003262 <__sflush_r+0xda>
 800328e:	bf00      	nop
 8003290:	20400001 	.word	0x20400001

08003294 <_fflush_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	690b      	ldr	r3, [r1, #16]
 8003298:	4605      	mov	r5, r0
 800329a:	460c      	mov	r4, r1
 800329c:	b913      	cbnz	r3, 80032a4 <_fflush_r+0x10>
 800329e:	2500      	movs	r5, #0
 80032a0:	4628      	mov	r0, r5
 80032a2:	bd38      	pop	{r3, r4, r5, pc}
 80032a4:	b118      	cbz	r0, 80032ae <_fflush_r+0x1a>
 80032a6:	6983      	ldr	r3, [r0, #24]
 80032a8:	b90b      	cbnz	r3, 80032ae <_fflush_r+0x1a>
 80032aa:	f000 f887 	bl	80033bc <__sinit>
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <_fflush_r+0x6c>)
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d11b      	bne.n	80032ec <_fflush_r+0x58>
 80032b4:	686c      	ldr	r4, [r5, #4]
 80032b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ef      	beq.n	800329e <_fflush_r+0xa>
 80032be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032c0:	07d0      	lsls	r0, r2, #31
 80032c2:	d404      	bmi.n	80032ce <_fflush_r+0x3a>
 80032c4:	0599      	lsls	r1, r3, #22
 80032c6:	d402      	bmi.n	80032ce <_fflush_r+0x3a>
 80032c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ca:	f000 f915 	bl	80034f8 <__retarget_lock_acquire_recursive>
 80032ce:	4628      	mov	r0, r5
 80032d0:	4621      	mov	r1, r4
 80032d2:	f7ff ff59 	bl	8003188 <__sflush_r>
 80032d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032d8:	07da      	lsls	r2, r3, #31
 80032da:	4605      	mov	r5, r0
 80032dc:	d4e0      	bmi.n	80032a0 <_fflush_r+0xc>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	059b      	lsls	r3, r3, #22
 80032e2:	d4dd      	bmi.n	80032a0 <_fflush_r+0xc>
 80032e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032e6:	f000 f908 	bl	80034fa <__retarget_lock_release_recursive>
 80032ea:	e7d9      	b.n	80032a0 <_fflush_r+0xc>
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <_fflush_r+0x70>)
 80032ee:	429c      	cmp	r4, r3
 80032f0:	d101      	bne.n	80032f6 <_fflush_r+0x62>
 80032f2:	68ac      	ldr	r4, [r5, #8]
 80032f4:	e7df      	b.n	80032b6 <_fflush_r+0x22>
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <_fflush_r+0x74>)
 80032f8:	429c      	cmp	r4, r3
 80032fa:	bf08      	it	eq
 80032fc:	68ec      	ldreq	r4, [r5, #12]
 80032fe:	e7da      	b.n	80032b6 <_fflush_r+0x22>
 8003300:	08003908 	.word	0x08003908
 8003304:	08003928 	.word	0x08003928
 8003308:	080038e8 	.word	0x080038e8

0800330c <std>:
 800330c:	2300      	movs	r3, #0
 800330e:	b510      	push	{r4, lr}
 8003310:	4604      	mov	r4, r0
 8003312:	e9c0 3300 	strd	r3, r3, [r0]
 8003316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800331a:	6083      	str	r3, [r0, #8]
 800331c:	8181      	strh	r1, [r0, #12]
 800331e:	6643      	str	r3, [r0, #100]	; 0x64
 8003320:	81c2      	strh	r2, [r0, #14]
 8003322:	6183      	str	r3, [r0, #24]
 8003324:	4619      	mov	r1, r3
 8003326:	2208      	movs	r2, #8
 8003328:	305c      	adds	r0, #92	; 0x5c
 800332a:	f7ff fa3d 	bl	80027a8 <memset>
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <std+0x38>)
 8003330:	6263      	str	r3, [r4, #36]	; 0x24
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <std+0x3c>)
 8003334:	62a3      	str	r3, [r4, #40]	; 0x28
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <std+0x40>)
 8003338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <std+0x44>)
 800333c:	6224      	str	r4, [r4, #32]
 800333e:	6323      	str	r3, [r4, #48]	; 0x30
 8003340:	bd10      	pop	{r4, pc}
 8003342:	bf00      	nop
 8003344:	08003665 	.word	0x08003665
 8003348:	08003687 	.word	0x08003687
 800334c:	080036bf 	.word	0x080036bf
 8003350:	080036e3 	.word	0x080036e3

08003354 <_cleanup_r>:
 8003354:	4901      	ldr	r1, [pc, #4]	; (800335c <_cleanup_r+0x8>)
 8003356:	f000 b8af 	b.w	80034b8 <_fwalk_reent>
 800335a:	bf00      	nop
 800335c:	08003295 	.word	0x08003295

08003360 <__sfmoreglue>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	1e4a      	subs	r2, r1, #1
 8003364:	2568      	movs	r5, #104	; 0x68
 8003366:	4355      	muls	r5, r2
 8003368:	460e      	mov	r6, r1
 800336a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800336e:	f7ff faeb 	bl	8002948 <_malloc_r>
 8003372:	4604      	mov	r4, r0
 8003374:	b140      	cbz	r0, 8003388 <__sfmoreglue+0x28>
 8003376:	2100      	movs	r1, #0
 8003378:	e9c0 1600 	strd	r1, r6, [r0]
 800337c:	300c      	adds	r0, #12
 800337e:	60a0      	str	r0, [r4, #8]
 8003380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003384:	f7ff fa10 	bl	80027a8 <memset>
 8003388:	4620      	mov	r0, r4
 800338a:	bd70      	pop	{r4, r5, r6, pc}

0800338c <__sfp_lock_acquire>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__sfp_lock_acquire+0x8>)
 800338e:	f000 b8b3 	b.w	80034f8 <__retarget_lock_acquire_recursive>
 8003392:	bf00      	nop
 8003394:	20000098 	.word	0x20000098

08003398 <__sfp_lock_release>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__sfp_lock_release+0x8>)
 800339a:	f000 b8ae 	b.w	80034fa <__retarget_lock_release_recursive>
 800339e:	bf00      	nop
 80033a0:	20000098 	.word	0x20000098

080033a4 <__sinit_lock_acquire>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__sinit_lock_acquire+0x8>)
 80033a6:	f000 b8a7 	b.w	80034f8 <__retarget_lock_acquire_recursive>
 80033aa:	bf00      	nop
 80033ac:	20000093 	.word	0x20000093

080033b0 <__sinit_lock_release>:
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <__sinit_lock_release+0x8>)
 80033b2:	f000 b8a2 	b.w	80034fa <__retarget_lock_release_recursive>
 80033b6:	bf00      	nop
 80033b8:	20000093 	.word	0x20000093

080033bc <__sinit>:
 80033bc:	b510      	push	{r4, lr}
 80033be:	4604      	mov	r4, r0
 80033c0:	f7ff fff0 	bl	80033a4 <__sinit_lock_acquire>
 80033c4:	69a3      	ldr	r3, [r4, #24]
 80033c6:	b11b      	cbz	r3, 80033d0 <__sinit+0x14>
 80033c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033cc:	f7ff bff0 	b.w	80033b0 <__sinit_lock_release>
 80033d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033d4:	6523      	str	r3, [r4, #80]	; 0x50
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <__sinit+0x68>)
 80033d8:	4a13      	ldr	r2, [pc, #76]	; (8003428 <__sinit+0x6c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80033de:	42a3      	cmp	r3, r4
 80033e0:	bf04      	itt	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	61a3      	streq	r3, [r4, #24]
 80033e6:	4620      	mov	r0, r4
 80033e8:	f000 f820 	bl	800342c <__sfp>
 80033ec:	6060      	str	r0, [r4, #4]
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 f81c 	bl	800342c <__sfp>
 80033f4:	60a0      	str	r0, [r4, #8]
 80033f6:	4620      	mov	r0, r4
 80033f8:	f000 f818 	bl	800342c <__sfp>
 80033fc:	2200      	movs	r2, #0
 80033fe:	60e0      	str	r0, [r4, #12]
 8003400:	2104      	movs	r1, #4
 8003402:	6860      	ldr	r0, [r4, #4]
 8003404:	f7ff ff82 	bl	800330c <std>
 8003408:	68a0      	ldr	r0, [r4, #8]
 800340a:	2201      	movs	r2, #1
 800340c:	2109      	movs	r1, #9
 800340e:	f7ff ff7d 	bl	800330c <std>
 8003412:	68e0      	ldr	r0, [r4, #12]
 8003414:	2202      	movs	r2, #2
 8003416:	2112      	movs	r1, #18
 8003418:	f7ff ff78 	bl	800330c <std>
 800341c:	2301      	movs	r3, #1
 800341e:	61a3      	str	r3, [r4, #24]
 8003420:	e7d2      	b.n	80033c8 <__sinit+0xc>
 8003422:	bf00      	nop
 8003424:	080037fc 	.word	0x080037fc
 8003428:	08003355 	.word	0x08003355

0800342c <__sfp>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	4607      	mov	r7, r0
 8003430:	f7ff ffac 	bl	800338c <__sfp_lock_acquire>
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <__sfp+0x84>)
 8003436:	681e      	ldr	r6, [r3, #0]
 8003438:	69b3      	ldr	r3, [r6, #24]
 800343a:	b913      	cbnz	r3, 8003442 <__sfp+0x16>
 800343c:	4630      	mov	r0, r6
 800343e:	f7ff ffbd 	bl	80033bc <__sinit>
 8003442:	3648      	adds	r6, #72	; 0x48
 8003444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003448:	3b01      	subs	r3, #1
 800344a:	d503      	bpl.n	8003454 <__sfp+0x28>
 800344c:	6833      	ldr	r3, [r6, #0]
 800344e:	b30b      	cbz	r3, 8003494 <__sfp+0x68>
 8003450:	6836      	ldr	r6, [r6, #0]
 8003452:	e7f7      	b.n	8003444 <__sfp+0x18>
 8003454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003458:	b9d5      	cbnz	r5, 8003490 <__sfp+0x64>
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <__sfp+0x88>)
 800345c:	60e3      	str	r3, [r4, #12]
 800345e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003462:	6665      	str	r5, [r4, #100]	; 0x64
 8003464:	f000 f847 	bl	80034f6 <__retarget_lock_init_recursive>
 8003468:	f7ff ff96 	bl	8003398 <__sfp_lock_release>
 800346c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003474:	6025      	str	r5, [r4, #0]
 8003476:	61a5      	str	r5, [r4, #24]
 8003478:	2208      	movs	r2, #8
 800347a:	4629      	mov	r1, r5
 800347c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003480:	f7ff f992 	bl	80027a8 <memset>
 8003484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800348c:	4620      	mov	r0, r4
 800348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003490:	3468      	adds	r4, #104	; 0x68
 8003492:	e7d9      	b.n	8003448 <__sfp+0x1c>
 8003494:	2104      	movs	r1, #4
 8003496:	4638      	mov	r0, r7
 8003498:	f7ff ff62 	bl	8003360 <__sfmoreglue>
 800349c:	4604      	mov	r4, r0
 800349e:	6030      	str	r0, [r6, #0]
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d1d5      	bne.n	8003450 <__sfp+0x24>
 80034a4:	f7ff ff78 	bl	8003398 <__sfp_lock_release>
 80034a8:	230c      	movs	r3, #12
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	e7ee      	b.n	800348c <__sfp+0x60>
 80034ae:	bf00      	nop
 80034b0:	080037fc 	.word	0x080037fc
 80034b4:	ffff0001 	.word	0xffff0001

080034b8 <_fwalk_reent>:
 80034b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034bc:	4606      	mov	r6, r0
 80034be:	4688      	mov	r8, r1
 80034c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034c4:	2700      	movs	r7, #0
 80034c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034ca:	f1b9 0901 	subs.w	r9, r9, #1
 80034ce:	d505      	bpl.n	80034dc <_fwalk_reent+0x24>
 80034d0:	6824      	ldr	r4, [r4, #0]
 80034d2:	2c00      	cmp	r4, #0
 80034d4:	d1f7      	bne.n	80034c6 <_fwalk_reent+0xe>
 80034d6:	4638      	mov	r0, r7
 80034d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034dc:	89ab      	ldrh	r3, [r5, #12]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d907      	bls.n	80034f2 <_fwalk_reent+0x3a>
 80034e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034e6:	3301      	adds	r3, #1
 80034e8:	d003      	beq.n	80034f2 <_fwalk_reent+0x3a>
 80034ea:	4629      	mov	r1, r5
 80034ec:	4630      	mov	r0, r6
 80034ee:	47c0      	blx	r8
 80034f0:	4307      	orrs	r7, r0
 80034f2:	3568      	adds	r5, #104	; 0x68
 80034f4:	e7e9      	b.n	80034ca <_fwalk_reent+0x12>

080034f6 <__retarget_lock_init_recursive>:
 80034f6:	4770      	bx	lr

080034f8 <__retarget_lock_acquire_recursive>:
 80034f8:	4770      	bx	lr

080034fa <__retarget_lock_release_recursive>:
 80034fa:	4770      	bx	lr

080034fc <__swhatbuf_r>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	460e      	mov	r6, r1
 8003500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003504:	2900      	cmp	r1, #0
 8003506:	b096      	sub	sp, #88	; 0x58
 8003508:	4614      	mov	r4, r2
 800350a:	461d      	mov	r5, r3
 800350c:	da07      	bge.n	800351e <__swhatbuf_r+0x22>
 800350e:	2300      	movs	r3, #0
 8003510:	602b      	str	r3, [r5, #0]
 8003512:	89b3      	ldrh	r3, [r6, #12]
 8003514:	061a      	lsls	r2, r3, #24
 8003516:	d410      	bmi.n	800353a <__swhatbuf_r+0x3e>
 8003518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351c:	e00e      	b.n	800353c <__swhatbuf_r+0x40>
 800351e:	466a      	mov	r2, sp
 8003520:	f000 f906 	bl	8003730 <_fstat_r>
 8003524:	2800      	cmp	r0, #0
 8003526:	dbf2      	blt.n	800350e <__swhatbuf_r+0x12>
 8003528:	9a01      	ldr	r2, [sp, #4]
 800352a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800352e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003532:	425a      	negs	r2, r3
 8003534:	415a      	adcs	r2, r3
 8003536:	602a      	str	r2, [r5, #0]
 8003538:	e7ee      	b.n	8003518 <__swhatbuf_r+0x1c>
 800353a:	2340      	movs	r3, #64	; 0x40
 800353c:	2000      	movs	r0, #0
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	b016      	add	sp, #88	; 0x58
 8003542:	bd70      	pop	{r4, r5, r6, pc}

08003544 <__smakebuf_r>:
 8003544:	898b      	ldrh	r3, [r1, #12]
 8003546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003548:	079d      	lsls	r5, r3, #30
 800354a:	4606      	mov	r6, r0
 800354c:	460c      	mov	r4, r1
 800354e:	d507      	bpl.n	8003560 <__smakebuf_r+0x1c>
 8003550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	2301      	movs	r3, #1
 800355a:	6163      	str	r3, [r4, #20]
 800355c:	b002      	add	sp, #8
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	ab01      	add	r3, sp, #4
 8003562:	466a      	mov	r2, sp
 8003564:	f7ff ffca 	bl	80034fc <__swhatbuf_r>
 8003568:	9900      	ldr	r1, [sp, #0]
 800356a:	4605      	mov	r5, r0
 800356c:	4630      	mov	r0, r6
 800356e:	f7ff f9eb 	bl	8002948 <_malloc_r>
 8003572:	b948      	cbnz	r0, 8003588 <__smakebuf_r+0x44>
 8003574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003578:	059a      	lsls	r2, r3, #22
 800357a:	d4ef      	bmi.n	800355c <__smakebuf_r+0x18>
 800357c:	f023 0303 	bic.w	r3, r3, #3
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	81a3      	strh	r3, [r4, #12]
 8003586:	e7e3      	b.n	8003550 <__smakebuf_r+0xc>
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <__smakebuf_r+0x7c>)
 800358a:	62b3      	str	r3, [r6, #40]	; 0x28
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	6020      	str	r0, [r4, #0]
 8003590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	9b00      	ldr	r3, [sp, #0]
 8003598:	6163      	str	r3, [r4, #20]
 800359a:	9b01      	ldr	r3, [sp, #4]
 800359c:	6120      	str	r0, [r4, #16]
 800359e:	b15b      	cbz	r3, 80035b8 <__smakebuf_r+0x74>
 80035a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035a4:	4630      	mov	r0, r6
 80035a6:	f000 f8d5 	bl	8003754 <_isatty_r>
 80035aa:	b128      	cbz	r0, 80035b8 <__smakebuf_r+0x74>
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	89a0      	ldrh	r0, [r4, #12]
 80035ba:	4305      	orrs	r5, r0
 80035bc:	81a5      	strh	r5, [r4, #12]
 80035be:	e7cd      	b.n	800355c <__smakebuf_r+0x18>
 80035c0:	08003355 	.word	0x08003355

080035c4 <__malloc_lock>:
 80035c4:	4801      	ldr	r0, [pc, #4]	; (80035cc <__malloc_lock+0x8>)
 80035c6:	f7ff bf97 	b.w	80034f8 <__retarget_lock_acquire_recursive>
 80035ca:	bf00      	nop
 80035cc:	20000094 	.word	0x20000094

080035d0 <__malloc_unlock>:
 80035d0:	4801      	ldr	r0, [pc, #4]	; (80035d8 <__malloc_unlock+0x8>)
 80035d2:	f7ff bf92 	b.w	80034fa <__retarget_lock_release_recursive>
 80035d6:	bf00      	nop
 80035d8:	20000094 	.word	0x20000094

080035dc <_raise_r>:
 80035dc:	291f      	cmp	r1, #31
 80035de:	b538      	push	{r3, r4, r5, lr}
 80035e0:	4604      	mov	r4, r0
 80035e2:	460d      	mov	r5, r1
 80035e4:	d904      	bls.n	80035f0 <_raise_r+0x14>
 80035e6:	2316      	movs	r3, #22
 80035e8:	6003      	str	r3, [r0, #0]
 80035ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80035f2:	b112      	cbz	r2, 80035fa <_raise_r+0x1e>
 80035f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80035f8:	b94b      	cbnz	r3, 800360e <_raise_r+0x32>
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 f830 	bl	8003660 <_getpid_r>
 8003600:	462a      	mov	r2, r5
 8003602:	4601      	mov	r1, r0
 8003604:	4620      	mov	r0, r4
 8003606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800360a:	f000 b817 	b.w	800363c <_kill_r>
 800360e:	2b01      	cmp	r3, #1
 8003610:	d00a      	beq.n	8003628 <_raise_r+0x4c>
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	d103      	bne.n	800361e <_raise_r+0x42>
 8003616:	2316      	movs	r3, #22
 8003618:	6003      	str	r3, [r0, #0]
 800361a:	2001      	movs	r0, #1
 800361c:	e7e7      	b.n	80035ee <_raise_r+0x12>
 800361e:	2400      	movs	r4, #0
 8003620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003624:	4628      	mov	r0, r5
 8003626:	4798      	blx	r3
 8003628:	2000      	movs	r0, #0
 800362a:	e7e0      	b.n	80035ee <_raise_r+0x12>

0800362c <raise>:
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <raise+0xc>)
 800362e:	4601      	mov	r1, r0
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	f7ff bfd3 	b.w	80035dc <_raise_r>
 8003636:	bf00      	nop
 8003638:	20000004 	.word	0x20000004

0800363c <_kill_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	4d07      	ldr	r5, [pc, #28]	; (800365c <_kill_r+0x20>)
 8003640:	2300      	movs	r3, #0
 8003642:	4604      	mov	r4, r0
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	602b      	str	r3, [r5, #0]
 800364a:	f7fd fe9d 	bl	8001388 <_kill>
 800364e:	1c43      	adds	r3, r0, #1
 8003650:	d102      	bne.n	8003658 <_kill_r+0x1c>
 8003652:	682b      	ldr	r3, [r5, #0]
 8003654:	b103      	cbz	r3, 8003658 <_kill_r+0x1c>
 8003656:	6023      	str	r3, [r4, #0]
 8003658:	bd38      	pop	{r3, r4, r5, pc}
 800365a:	bf00      	nop
 800365c:	2000009c 	.word	0x2000009c

08003660 <_getpid_r>:
 8003660:	f7fd be8a 	b.w	8001378 <_getpid>

08003664 <__sread>:
 8003664:	b510      	push	{r4, lr}
 8003666:	460c      	mov	r4, r1
 8003668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800366c:	f000 f894 	bl	8003798 <_read_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	bfab      	itete	ge
 8003674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003676:	89a3      	ldrhlt	r3, [r4, #12]
 8003678:	181b      	addge	r3, r3, r0
 800367a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800367e:	bfac      	ite	ge
 8003680:	6563      	strge	r3, [r4, #84]	; 0x54
 8003682:	81a3      	strhlt	r3, [r4, #12]
 8003684:	bd10      	pop	{r4, pc}

08003686 <__swrite>:
 8003686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368a:	461f      	mov	r7, r3
 800368c:	898b      	ldrh	r3, [r1, #12]
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	4605      	mov	r5, r0
 8003692:	460c      	mov	r4, r1
 8003694:	4616      	mov	r6, r2
 8003696:	d505      	bpl.n	80036a4 <__swrite+0x1e>
 8003698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369c:	2302      	movs	r3, #2
 800369e:	2200      	movs	r2, #0
 80036a0:	f000 f868 	bl	8003774 <_lseek_r>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	4632      	mov	r2, r6
 80036b2:	463b      	mov	r3, r7
 80036b4:	4628      	mov	r0, r5
 80036b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ba:	f000 b817 	b.w	80036ec <_write_r>

080036be <__sseek>:
 80036be:	b510      	push	{r4, lr}
 80036c0:	460c      	mov	r4, r1
 80036c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c6:	f000 f855 	bl	8003774 <_lseek_r>
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	bf15      	itete	ne
 80036d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80036d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036da:	81a3      	strheq	r3, [r4, #12]
 80036dc:	bf18      	it	ne
 80036de:	81a3      	strhne	r3, [r4, #12]
 80036e0:	bd10      	pop	{r4, pc}

080036e2 <__sclose>:
 80036e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e6:	f000 b813 	b.w	8003710 <_close_r>
	...

080036ec <_write_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d07      	ldr	r5, [pc, #28]	; (800370c <_write_r+0x20>)
 80036f0:	4604      	mov	r4, r0
 80036f2:	4608      	mov	r0, r1
 80036f4:	4611      	mov	r1, r2
 80036f6:	2200      	movs	r2, #0
 80036f8:	602a      	str	r2, [r5, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7fd fe7b 	bl	80013f6 <_write>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_write_r+0x1e>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	b103      	cbz	r3, 800370a <_write_r+0x1e>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	2000009c 	.word	0x2000009c

08003710 <_close_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d06      	ldr	r5, [pc, #24]	; (800372c <_close_r+0x1c>)
 8003714:	2300      	movs	r3, #0
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f7fd fe87 	bl	800142e <_close>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_close_r+0x1a>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_close_r+0x1a>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	2000009c 	.word	0x2000009c

08003730 <_fstat_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4d07      	ldr	r5, [pc, #28]	; (8003750 <_fstat_r+0x20>)
 8003734:	2300      	movs	r3, #0
 8003736:	4604      	mov	r4, r0
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	602b      	str	r3, [r5, #0]
 800373e:	f7fd fe82 	bl	8001446 <_fstat>
 8003742:	1c43      	adds	r3, r0, #1
 8003744:	d102      	bne.n	800374c <_fstat_r+0x1c>
 8003746:	682b      	ldr	r3, [r5, #0]
 8003748:	b103      	cbz	r3, 800374c <_fstat_r+0x1c>
 800374a:	6023      	str	r3, [r4, #0]
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	bf00      	nop
 8003750:	2000009c 	.word	0x2000009c

08003754 <_isatty_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d06      	ldr	r5, [pc, #24]	; (8003770 <_isatty_r+0x1c>)
 8003758:	2300      	movs	r3, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fd fe81 	bl	8001466 <_isatty>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_isatty_r+0x1a>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_isatty_r+0x1a>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	2000009c 	.word	0x2000009c

08003774 <_lseek_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d07      	ldr	r5, [pc, #28]	; (8003794 <_lseek_r+0x20>)
 8003778:	4604      	mov	r4, r0
 800377a:	4608      	mov	r0, r1
 800377c:	4611      	mov	r1, r2
 800377e:	2200      	movs	r2, #0
 8003780:	602a      	str	r2, [r5, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f7fd fe7a 	bl	800147c <_lseek>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_lseek_r+0x1e>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_lseek_r+0x1e>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	2000009c 	.word	0x2000009c

08003798 <_read_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d07      	ldr	r5, [pc, #28]	; (80037b8 <_read_r+0x20>)
 800379c:	4604      	mov	r4, r0
 800379e:	4608      	mov	r0, r1
 80037a0:	4611      	mov	r1, r2
 80037a2:	2200      	movs	r2, #0
 80037a4:	602a      	str	r2, [r5, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f7fd fe08 	bl	80013bc <_read>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_read_r+0x1e>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_read_r+0x1e>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	2000009c 	.word	0x2000009c

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
