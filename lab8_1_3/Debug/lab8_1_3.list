
lab8_1_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000361c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003930  08003930  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003938  08003938  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  080039a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080039a8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ae8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001557  00000000  00000000  00026b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  000280d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00028820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012980  00000000  00000000  00028eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053fc  00000000  00000000  0003b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006617d  00000000  00000000  00040c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a6da9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  000a6dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037a4 	.word	0x080037a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080037a4 	.word	0x080037a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <LL_RCC_HSI_Enable+0x1c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <LL_RCC_HSI_Enable+0x1c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <LL_RCC_HSI_IsReady+0x20>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40023800 	.word	0x40023800

080009bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4904      	ldr	r1, [pc, #16]	; (80009e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009d2:	4313      	orrs	r3, r2
 80009d4:	600b      	str	r3, [r1, #0]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <LL_RCC_SetSysClkSource+0x24>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f023 0203 	bic.w	r2, r3, #3
 80009f8:	4904      	ldr	r1, [pc, #16]	; (8000a0c <LL_RCC_SetSysClkSource+0x24>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	608b      	str	r3, [r1, #8]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40023800 	.word	0x40023800

08000a10 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <LL_RCC_GetSysClkSource+0x18>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 030c 	and.w	r3, r3, #12
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40023800 	.word	0x40023800

08000a54 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000a64:	4904      	ldr	r1, [pc, #16]	; (8000a78 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40023800 	.word	0x40023800

08000a7c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	608b      	str	r3, [r1, #8]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <LL_RCC_SetTIMPrescaler+0x28>)
 8000aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ab6:	4905      	ldr	r1, [pc, #20]	; (8000acc <LL_RCC_SetTIMPrescaler+0x28>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40023800 	.word	0x40023800

08000ad0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <LL_RCC_PLL_Enable+0x1c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <LL_RCC_PLL_Enable+0x1c>)
 8000ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <LL_RCC_PLL_IsReady+0x24>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	68f9      	ldr	r1, [r7, #12]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4311      	orrs	r1, r2
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	0192      	lsls	r2, r2, #6
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b48:	4904      	ldr	r1, [pc, #16]	; (8000b5c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	ffbf8000 	.word	0xffbf8000

08000b64 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800

08000b94 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4013      	ands	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3302      	adds	r3, #2
 8000c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	0c1b      	lsrs	r3, r3, #16
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	ea02 0103 	and.w	r1, r2, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	fab3 f383 	clz	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	fa03 f202 	lsl.w	r2, r3, r2
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40013800 	.word	0x40013800

08000c50 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_FLASH_SetLatency+0x24>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 0207 	bic.w	r2, r3, #7
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <LL_FLASH_SetLatency+0x24>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <LL_FLASH_GetLatency+0x18>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0307 	and.w	r3, r3, #7
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000ca4:	4904      	ldr	r1, [pc, #16]	; (8000cb8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40007000 	.word	0x40007000

08000cbc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d01c      	beq.n	8000d26 <LL_TIM_OC_DisableFast+0x4a>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d017      	beq.n	8000d22 <LL_TIM_OC_DisableFast+0x46>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2b10      	cmp	r3, #16
 8000cf6:	d012      	beq.n	8000d1e <LL_TIM_OC_DisableFast+0x42>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b40      	cmp	r3, #64	; 0x40
 8000cfc:	d00d      	beq.n	8000d1a <LL_TIM_OC_DisableFast+0x3e>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d04:	d007      	beq.n	8000d16 <LL_TIM_OC_DisableFast+0x3a>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0c:	d101      	bne.n	8000d12 <LL_TIM_OC_DisableFast+0x36>
 8000d0e:	2305      	movs	r3, #5
 8000d10:	e00a      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d12:	2306      	movs	r3, #6
 8000d14:	e008      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d16:	2304      	movs	r3, #4
 8000d18:	e006      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e004      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <LL_TIM_OC_DisableFast+0x4c>
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LL_TIM_OC_DisableFast+0x84>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	440b      	add	r3, r1
 8000d38:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4908      	ldr	r1, [pc, #32]	; (8000d64 <LL_TIM_OC_DisableFast+0x88>)
 8000d42:	5ccb      	ldrb	r3, [r1, r3]
 8000d44:	4619      	mov	r1, r3
 8000d46:	2304      	movs	r3, #4
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	601a      	str	r2, [r3, #0]

}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	080037bc 	.word	0x080037bc
 8000d64:	080037c4 	.word	0x080037c4

08000d68 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7a:	f023 0307 	bic.w	r3, r3, #7
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	605a      	str	r2, [r3, #4]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	615a      	str	r2, [r3, #20]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	613b      	str	r3, [r7, #16]
  return result;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	fab3 f383 	clz	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	61bb      	str	r3, [r7, #24]
  return result;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fab3 f383 	clz	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	431a      	orrs	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	601a      	str	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b089      	sub	sp, #36	; 0x24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	613b      	str	r3, [r7, #16]
  return result;
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	61bb      	str	r3, [r7, #24]
  return result;
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	fab3 f383 	clz	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	60da      	str	r2, [r3, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3724      	adds	r7, #36	; 0x24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	041a      	lsls	r2, r3, #16
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b598      	push	{r3, r4, r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f08:	f7ff fe5c 	bl	8000bc4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f10:	f7ff fe40 	bl	8000b94 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f14:	2007      	movs	r0, #7
 8000f16:	f7ff fd0b 	bl	8000930 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f86d 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 f97b 	bl	8001218 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f22:	f000 f929 	bl	8001178 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f26:	f000 f8b1 	bl	800108c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_WriteReg(TIM3, CCR1, V12p5);  // threshold 1
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <main+0xf0>)
 8000f2c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  LL_TIM_WriteReg(TIM3, CCR2, V2p5); // threshold 2
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <main+0xf0>)
 8000f34:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
  LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2);   // delete OC flag channel 1
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <main+0xf0>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <main+0xf0>)
 8000f40:	f023 0302 	bic.w	r3, r3, #2
 8000f44:	6113      	str	r3, [r2, #16]
  LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x4);   // delete OC flag channel 2
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <main+0xf0>)
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <main+0xf0>)
 8000f4c:	f023 0304 	bic.w	r3, r3, #4
 8000f50:	6113      	str	r3, [r2, #16]
  LL_TIM_WriteReg(TIM3, CR1, LL_TIM_ReadReg(TIM3, CR1) | 0x1);  // counter enable channel 1
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <main+0xf0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <main+0xf0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6013      	str	r3, [r2, #0]
  LL_TIM_WriteReg(TIM3, CR2, LL_TIM_ReadReg(TIM3, CR2) | 0x1);  // counter enable channel 2
 8000f5e:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <main+0xf0>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <main+0xf0>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <main+0xf0>)
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d018      	beq.n	8000fa8 <main+0xa8>
		LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2); // turn off flag channel 1
 8000f76:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <main+0xf0>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <main+0xf0>)
 8000f7c:	f023 0302 	bic.w	r3, r3, #2
 8000f80:	6113      	str	r3, [r2, #16]
		LL_TIM_WriteReg(TIM3, CCR1, LL_TIM_ReadReg(TIM3, CCR1) + V12p5); // set next threshold
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <main+0xf0>)
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fabc 	bl	8000504 <__aeabi_ui2d>
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <main+0xf4>)
 8000f92:	f7ff f97b 	bl	800028c <__adddf3>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4c15      	ldr	r4, [pc, #84]	; (8000ff0 <main+0xf0>)
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_d2uiz>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	6363      	str	r3, [r4, #52]	; 0x34
	  }
	  if (LL_TIM_ReadReg(TIM3, SR) & 0x4){
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <main+0xf0>)
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0da      	beq.n	8000f6a <main+0x6a>
		LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x4); // turn off flag channel 2
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <main+0xf0>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <main+0xf0>)
 8000fba:	f023 0304 	bic.w	r3, r3, #4
 8000fbe:	6113      	str	r3, [r2, #16]
		LL_TIM_WriteReg(TIM3, CCR2, LL_TIM_ReadReg(TIM3, CCR2) + V2p5); // set next threshold
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <main+0xf0>)
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa9d 	bl	8000504 <__aeabi_ui2d>
 8000fca:	a307      	add	r3, pc, #28	; (adr r3, 8000fe8 <main+0xe8>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff f95c 	bl	800028c <__adddf3>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4c05      	ldr	r4, [pc, #20]	; (8000ff0 <main+0xf0>)
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fb0b 	bl	80005f8 <__aeabi_d2uiz>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	63a3      	str	r3, [r4, #56]	; 0x38
	  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){
 8000fe6:	e7c0      	b.n	8000f6a <main+0x6a>
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40d06800 	.word	0x40d06800
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	40aa4000 	.word	0x40aa4000

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fe27 	bl	8000c50 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001002:	bf00      	nop
 8001004:	f7ff fe38 	bl	8000c78 <LL_FLASH_GetLatency>
 8001008:	4603      	mov	r3, r0
 800100a:	2b02      	cmp	r3, #2
 800100c:	d1fa      	bne.n	8001004 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800100e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001012:	f7ff fe3f 	bl	8000c94 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001016:	2010      	movs	r0, #16
 8001018:	f7ff fcd0 	bl	80009bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800101c:	f7ff fcac 	bl	8000978 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001020:	bf00      	nop
 8001022:	f7ff fcb9 	bl	8000998 <LL_RCC_HSI_IsReady>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1fa      	bne.n	8001022 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001034:	2110      	movs	r1, #16
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fd6e 	bl	8000b18 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800103c:	f7ff fd48 	bl	8000ad0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001040:	bf00      	nop
 8001042:	f7ff fd55 	bl	8000af0 <LL_RCC_PLL_IsReady>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d1fa      	bne.n	8001042 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fced 	bl	8000a2c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001052:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001056:	f7ff fcfd 	bl	8000a54 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fd0e 	bl	8000a7c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff fcc1 	bl	80009e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001066:	bf00      	nop
 8001068:	f7ff fcd2 	bl	8000a10 <LL_RCC_GetSysClkSource>
 800106c:	4603      	mov	r3, r0
 800106e:	2b08      	cmp	r3, #8
 8001070:	d1fa      	bne.n	8001068 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <SystemClock_Config+0x90>)
 8001074:	f001 fb44 	bl	8002700 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <SystemClock_Config+0x90>)
 800107a:	f001 fb4f 	bl	800271c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fd10 	bl	8000aa4 <LL_RCC_SetTIMPrescaler>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	0501bd00 	.word	0x0501bd00

0800108c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001092:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2220      	movs	r2, #32
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fb70 	bl	8002790 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff fd67 	bl	8000b94 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 80010ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80010d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010dc:	4619      	mov	r1, r3
 80010de:	4824      	ldr	r0, [pc, #144]	; (8001170 <MX_TIM3_Init+0xe4>)
 80010e0:	f000 fe7e 	bl	8001de0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80010e4:	4822      	ldr	r0, [pc, #136]	; (8001170 <MX_TIM3_Init+0xe4>)
 80010e6:	f7ff fde9 	bl	8000cbc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80010ea:	2100      	movs	r1, #0
 80010ec:	4820      	ldr	r0, [pc, #128]	; (8001170 <MX_TIM3_Init+0xe4>)
 80010ee:	f7ff fe3b 	bl	8000d68 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 80010f2:	2330      	movs	r3, #48	; 0x30
 80010f4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	461a      	mov	r2, r3
 800110c:	2101      	movs	r1, #1
 800110e:	4818      	ldr	r0, [pc, #96]	; (8001170 <MX_TIM3_Init+0xe4>)
 8001110:	f000 fee0 	bl	8001ed4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001114:	2101      	movs	r1, #1
 8001116:	4816      	ldr	r0, [pc, #88]	; (8001170 <MX_TIM3_Init+0xe4>)
 8001118:	f7ff fde0 	bl	8000cdc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	461a      	mov	r2, r3
 8001122:	2110      	movs	r1, #16
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <MX_TIM3_Init+0xe4>)
 8001126:	f000 fed5 	bl	8001ed4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 800112a:	2110      	movs	r1, #16
 800112c:	4810      	ldr	r0, [pc, #64]	; (8001170 <MX_TIM3_Init+0xe4>)
 800112e:	f7ff fdd5 	bl	8000cdc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001132:	2100      	movs	r1, #0
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <MX_TIM3_Init+0xe4>)
 8001136:	f7ff fe2c 	bl	8000d92 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_TIM3_Init+0xe4>)
 800113c:	f7ff fe3c 	bl	8000db8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001140:	2004      	movs	r0, #4
 8001142:	f7ff fd0f 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001146:	23c0      	movs	r3, #192	; 0xc0
 8001148:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800114a:	2302      	movs	r3, #2
 800114c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_TIM3_Init+0xe8>)
 8001164:	f000 fc1c 	bl	80019a0 <LL_GPIO_Init>

}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40000400 	.word	0x40000400
 8001174:	40020800 	.word	0x40020800

08001178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80011a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011a6:	f7ff fcf5 	bl	8000b94 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fcda 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b0:	230c      	movs	r3, #12
 80011b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011b4:	2302      	movs	r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80011c4:	2307      	movs	r3, #7
 80011c6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <MX_USART2_UART_Init+0x98>)
 80011ce:	f000 fbe7 	bl	80019a0 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011d6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011e4:	230c      	movs	r3, #12
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_USART2_UART_Init+0x9c>)
 80011f8:	f001 fa04 	bl	8002604 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x9c>)
 80011fe:	f7ff fdfb 	bl	8000df8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_USART2_UART_Init+0x9c>)
 8001204:	f7ff fde8 	bl	8000dd8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	; 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020000 	.word	0x40020000
 8001214:	40004400 	.word	0x40004400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001238:	2004      	movs	r0, #4
 800123a:	f7ff fc93 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800123e:	2080      	movs	r0, #128	; 0x80
 8001240:	f7ff fc90 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fc8d 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800124a:	2002      	movs	r0, #2
 800124c:	f7ff fc8a 	bl	8000b64 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001250:	2120      	movs	r1, #32
 8001252:	481a      	ldr	r0, [pc, #104]	; (80012bc <MX_GPIO_Init+0xa4>)
 8001254:	f7ff fe44 	bl	8000ee0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001258:	4919      	ldr	r1, [pc, #100]	; (80012c0 <MX_GPIO_Init+0xa8>)
 800125a:	2002      	movs	r0, #2
 800125c:	f7ff fcca 	bl	8000bf4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001266:	2301      	movs	r3, #1
 8001268:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800126a:	2300      	movs	r3, #0
 800126c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800126e:	2302      	movs	r3, #2
 8001270:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fa0c 	bl	8001694 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	4810      	ldr	r0, [pc, #64]	; (80012c4 <MX_GPIO_Init+0xac>)
 8001284:	f7ff fdfd 	bl	8000e82 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_GPIO_Init+0xac>)
 8001290:	f7ff fdc8 	bl	8000e24 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001294:	2320      	movs	r3, #32
 8001296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001298:	2301      	movs	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <MX_GPIO_Init+0xa4>)
 80012ae:	f000 fb77 	bl	80019a0 <LL_GPIO_Init>

}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020000 	.word	0x40020000
 80012c0:	00f00003 	.word	0x00f00003
 80012c4:	40020800 	.word	0x40020800

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	int x = (rand()%10 + 50)*5;
 8001316:	f001 fa43 	bl	80027a0 <rand>
 800131a:	4601      	mov	r1, r0
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <SysTick_Handler+0x4c>)
 800131e:	fb83 2301 	smull	r2, r3, r3, r1
 8001322:	109a      	asrs	r2, r3, #2
 8001324:	17cb      	asrs	r3, r1, #31
 8001326:	1ad2      	subs	r2, r2, r3
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	1aca      	subs	r2, r1, r3
 8001332:	3232      	adds	r2, #50	; 0x32
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	603b      	str	r3, [r7, #0]
	for(int i=0;i<x;i++);
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	e002      	b.n	8001348 <SysTick_Handler+0x38>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf8      	blt.n	8001342 <SysTick_Handler+0x32>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	66666667 	.word	0x66666667

08001360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800137a:	f001 f9df 	bl	800273c <__errno>
 800137e:	4603      	mov	r3, r0
 8001380:	2216      	movs	r2, #22
 8001382:	601a      	str	r2, [r3, #0]
	return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_exit>:

void _exit (int status)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe7 	bl	8001370 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013a2:	e7fe      	b.n	80013a2 <_exit+0x12>

080013a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00a      	b.n	80013cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b6:	f3af 8000 	nop.w
 80013ba:	4601      	mov	r1, r0
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	b2ca      	uxtb	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf0      	blt.n	80013b6 <_read+0x12>
	}

return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e009      	b.n	8001404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf1      	blt.n	80013f0 <_write+0x12>
	}
	return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_close>:

int _close(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	return -1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	605a      	str	r2, [r3, #4]
	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_isatty>:

int _isatty(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f001 f944 	bl	800273c <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20018000 	.word	0x20018000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	20000084 	.word	0x20000084
 80014e8:	200000a0 	.word	0x200000a0

080014ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001548 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001516:	490e      	ldr	r1, [pc, #56]	; (8001550 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800152c:	4c0b      	ldr	r4, [pc, #44]	; (800155c <LoopFillZerobss+0x26>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800153a:	f7ff ffd7 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153e:	f001 f903 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7ff fcdd 	bl	8000f00 <main>
  bx  lr    
 8001546:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001548:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001554:	08003940 	.word	0x08003940
  ldr r2, =_sbss
 8001558:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800155c:	200000a0 	.word	0x200000a0

08001560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC_IRQHandler>
	...

08001564 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <LL_EXTI_EnableIT_0_31+0x20>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <LL_EXTI_EnableIT_0_31+0x20>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40013c00 	.word	0x40013c00

08001588 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <LL_EXTI_DisableIT_0_31+0x24>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	43db      	mvns	r3, r3
 8001598:	4904      	ldr	r1, [pc, #16]	; (80015ac <LL_EXTI_DisableIT_0_31+0x24>)
 800159a:	4013      	ands	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4904      	ldr	r1, [pc, #16]	; (80015d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]

}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	4904      	ldr	r1, [pc, #16]	; (80015f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40013c00 	.word	0x40013c00

080015fc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]

}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40013c00 	.word	0x40013c00

08001620 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	43db      	mvns	r3, r3
 8001630:	4904      	ldr	r1, [pc, #16]	; (8001644 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001632:	4013      	ands	r3, r2
 8001634:	608b      	str	r3, [r1, #8]

}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40013c00 	.word	0x40013c00

08001648 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40013c00 	.word	0x40013c00

0800166c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	43db      	mvns	r3, r3
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800167e:	4013      	ands	r3, r2
 8001680:	60cb      	str	r3, [r1, #12]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40013c00 	.word	0x40013c00

08001694 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d065      	beq.n	8001774 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d06c      	beq.n	800178a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d01c      	beq.n	80016f2 <LL_EXTI_Init+0x5e>
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	dc25      	bgt.n	8001708 <LL_EXTI_Init+0x74>
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <LL_EXTI_Init+0x32>
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d00b      	beq.n	80016dc <LL_EXTI_Init+0x48>
 80016c4:	e020      	b.n	8001708 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff82 	bl	80015d4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff45 	bl	8001564 <LL_EXTI_EnableIT_0_31>
          break;
 80016da:	e018      	b.n	800170e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff51 	bl	8001588 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff60 	bl	80015b0 <LL_EXTI_EnableEvent_0_31>
          break;
 80016f0:	e00d      	b.n	800170e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff34 	bl	8001564 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff55 	bl	80015b0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001706:	e002      	b.n	800170e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
          break;
 800170c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	799b      	ldrb	r3, [r3, #6]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d039      	beq.n	800178a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	799b      	ldrb	r3, [r3, #6]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d01c      	beq.n	8001758 <LL_EXTI_Init+0xc4>
 800171e:	2b03      	cmp	r3, #3
 8001720:	dc25      	bgt.n	800176e <LL_EXTI_Init+0xda>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d002      	beq.n	800172c <LL_EXTI_Init+0x98>
 8001726:	2b02      	cmp	r3, #2
 8001728:	d00b      	beq.n	8001742 <LL_EXTI_Init+0xae>
 800172a:	e020      	b.n	800176e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff9b 	bl	800166c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff5e 	bl	80015fc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001740:	e024      	b.n	800178c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff6a 	bl	8001620 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff79 	bl	8001648 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001756:	e019      	b.n	800178c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff4d 	bl	80015fc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff6e 	bl	8001648 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800176c:	e00e      	b.n	800178c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
            break;
 8001772:	e00b      	b.n	800178c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff05 	bl	8001588 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff26 	bl	80015d4 <LL_EXTI_DisableEvent_0_31>
 8001788:	e000      	b.n	800178c <LL_EXTI_Init+0xf8>
      }
 800178a:	bf00      	nop
  }
  return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <LL_GPIO_SetPinMode>:
{
 8001796:	b480      	push	{r7}
 8001798:	b089      	sub	sp, #36	; 0x24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	613b      	str	r3, [r7, #16]
  return result;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2103      	movs	r1, #3
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	61bb      	str	r3, [r7, #24]
  return result;
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	431a      	orrs	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3724      	adds	r7, #36	; 0x24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_GPIO_SetPinOutputType>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	43db      	mvns	r3, r3
 8001808:	401a      	ands	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	431a      	orrs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	605a      	str	r2, [r3, #4]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_GPIO_SetPinSpeed>:
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	613b      	str	r3, [r7, #16]
  return result;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2103      	movs	r1, #3
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	61bb      	str	r3, [r7, #24]
  return result;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	609a      	str	r2, [r3, #8]
}
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_GPIO_SetPinPull>:
{
 8001882:	b480      	push	{r7}
 8001884:	b089      	sub	sp, #36	; 0x24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	613b      	str	r3, [r7, #16]
  return result;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	61bb      	str	r3, [r7, #24]
  return result;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	60da      	str	r2, [r3, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3724      	adds	r7, #36	; 0x24
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_GPIO_SetAFPin_0_7>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	613b      	str	r3, [r7, #16]
  return result;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	210f      	movs	r1, #15
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	61bb      	str	r3, [r7, #24]
  return result;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fab3 f383 	clz	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	431a      	orrs	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	621a      	str	r2, [r3, #32]
}
 8001932:	bf00      	nop
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_GPIO_SetAFPin_8_15>:
{
 800193e:	b480      	push	{r7}
 8001940:	b089      	sub	sp, #36	; 0x24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	613b      	str	r3, [r7, #16]
  return result;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	210f      	movs	r1, #15
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	61bb      	str	r3, [r7, #24]
  return result;
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	431a      	orrs	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001994:	bf00      	nop
 8001996:	3724      	adds	r7, #36	; 0x24
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	613b      	str	r3, [r7, #16]
  return result;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80019ca:	e050      	b.n	8001a6e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2101      	movs	r1, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d042      	beq.n	8001a68 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d003      	beq.n	80019f2 <LL_GPIO_Init+0x52>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d10d      	bne.n	8001a0e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	461a      	mov	r2, r3
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff12 	bl	8001824 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	461a      	mov	r2, r3
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fef3 	bl	80017f4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	461a      	mov	r2, r3
 8001a14:	69b9      	ldr	r1, [r7, #24]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff33 	bl	8001882 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d11a      	bne.n	8001a5a <LL_GPIO_Init+0xba>
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	60bb      	str	r3, [r7, #8]
  return result;
 8001a30:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	d807      	bhi.n	8001a4c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	461a      	mov	r2, r3
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff4b 	bl	80018e0 <LL_GPIO_SetAFPin_0_7>
 8001a4a:	e006      	b.n	8001a5a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	461a      	mov	r2, r3
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff72 	bl	800193e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	69b9      	ldr	r1, [r7, #24]
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fe97 	bl	8001796 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1a7      	bne.n	80019cc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <LL_RCC_GetSysClkSource>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <LL_RCC_GetSysClkSource+0x18>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <LL_RCC_GetAHBPrescaler>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <LL_RCC_GetAHBPrescaler+0x18>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <LL_RCC_GetAPB1Prescaler>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <LL_RCC_GetAPB2Prescaler>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <LL_RCC_PLL_GetMainSource+0x18>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <LL_RCC_PLL_GetN+0x18>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40023800 	.word	0x40023800

08001b30 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <LL_RCC_PLL_GetP+0x18>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <LL_RCC_PLL_GetDivider+0x18>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b70:	f000 f820 	bl	8001bb4 <RCC_GetSystemClockFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f840 	bl	8001c04 <RCC_GetHCLKClockFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f84e 	bl	8001c30 <RCC_GetPCLK1ClockFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f85a 	bl	8001c58 <RCC_GetPCLK2ClockFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60da      	str	r2, [r3, #12]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001bbe:	f7ff ff63 	bl	8001a88 <LL_RCC_GetSysClkSource>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d00c      	beq.n	8001be2 <RCC_GetSystemClockFreq+0x2e>
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d80f      	bhi.n	8001bec <RCC_GetSystemClockFreq+0x38>
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <RCC_GetSystemClockFreq+0x22>
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d003      	beq.n	8001bdc <RCC_GetSystemClockFreq+0x28>
 8001bd4:	e00a      	b.n	8001bec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <RCC_GetSystemClockFreq+0x48>)
 8001bd8:	607b      	str	r3, [r7, #4]
      break;
 8001bda:	e00a      	b.n	8001bf2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <RCC_GetSystemClockFreq+0x4c>)
 8001bde:	607b      	str	r3, [r7, #4]
      break;
 8001be0:	e007      	b.n	8001bf2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001be2:	2008      	movs	r0, #8
 8001be4:	f000 f84c 	bl	8001c80 <RCC_PLL_GetFreqDomain_SYS>
 8001be8:	6078      	str	r0, [r7, #4]
      break;
 8001bea:	e002      	b.n	8001bf2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <RCC_GetSystemClockFreq+0x48>)
 8001bee:	607b      	str	r3, [r7, #4]
      break;
 8001bf0:	bf00      	nop
  }

  return frequency;
 8001bf2:	687b      	ldr	r3, [r7, #4]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c0c:	f7ff ff4a 	bl	8001aa4 <LL_RCC_GetAHBPrescaler>
 8001c10:	4603      	mov	r3, r0
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <RCC_GetHCLKClockFreq+0x28>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	40d3      	lsrs	r3, r2
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	080037cc 	.word	0x080037cc

08001c30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c38:	f7ff ff42 	bl	8001ac0 <LL_RCC_GetAPB1Prescaler>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	0a9b      	lsrs	r3, r3, #10
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <RCC_GetPCLK1ClockFreq+0x24>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	40d3      	lsrs	r3, r2
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	080037dc 	.word	0x080037dc

08001c58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001c60:	f7ff ff3c 	bl	8001adc <LL_RCC_GetAPB2Prescaler>
 8001c64:	4603      	mov	r3, r0
 8001c66:	0b5b      	lsrs	r3, r3, #13
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <RCC_GetPCLK2ClockFreq+0x24>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	40d3      	lsrs	r3, r2
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	080037dc 	.word	0x080037dc

08001c80 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c94:	f7ff ff30 	bl	8001af8 <LL_RCC_PLL_GetMainSource>
 8001c98:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca6:	d003      	beq.n	8001cb0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001ca8:	e005      	b.n	8001cb6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001cac:	617b      	str	r3, [r7, #20]
      break;
 8001cae:	e005      	b.n	8001cbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001cb2:	617b      	str	r3, [r7, #20]
      break;
 8001cb4:	e002      	b.n	8001cbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001cb8:	617b      	str	r3, [r7, #20]
      break;
 8001cba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d113      	bne.n	8001cea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001cc2:	f7ff ff43 	bl	8001b4c <LL_RCC_PLL_GetDivider>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fbb3 f4f2 	udiv	r4, r3, r2
 8001cce:	f7ff ff21 	bl	8001b14 <LL_RCC_PLL_GetN>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	fb03 f404 	mul.w	r4, r3, r4
 8001cd8:	f7ff ff2a 	bl	8001b30 <LL_RCC_PLL_GetP>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fbb4 f3f3 	udiv	r3, r4, r3
 8001ce8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001cea:	693b      	ldr	r3, [r7, #16]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <LL_TIM_SetPrescaler>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_TIM_SetAutoReload>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_TIM_SetRepetitionCounter>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_TIM_OC_SetCompareCH1>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_TIM_OC_SetCompareCH2>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_TIM_OC_SetCompareCH3>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_TIM_OC_SetCompareCH4>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	615a      	str	r2, [r3, #20]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a31      	ldr	r2, [pc, #196]	; (8001eb8 <LL_TIM_Init+0xd8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00f      	beq.n	8001e18 <LL_TIM_Init+0x38>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d00b      	beq.n	8001e18 <LL_TIM_Init+0x38>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <LL_TIM_Init+0xdc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <LL_TIM_Init+0x38>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <LL_TIM_Init+0xe0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <LL_TIM_Init+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <LL_TIM_Init+0xe4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d106      	bne.n	8001e26 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <LL_TIM_Init+0xd8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d01b      	beq.n	8001e66 <LL_TIM_Init+0x86>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e34:	d017      	beq.n	8001e66 <LL_TIM_Init+0x86>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <LL_TIM_Init+0xdc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <LL_TIM_Init+0x86>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <LL_TIM_Init+0xe0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00f      	beq.n	8001e66 <LL_TIM_Init+0x86>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <LL_TIM_Init+0xe4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00b      	beq.n	8001e66 <LL_TIM_Init+0x86>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <LL_TIM_Init+0xe8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <LL_TIM_Init+0x86>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <LL_TIM_Init+0xec>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <LL_TIM_Init+0x86>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <LL_TIM_Init+0xf0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d106      	bne.n	8001e74 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff49 	bl	8001d18 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff35 	bl	8001cfc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <LL_TIM_Init+0xd8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d105      	bne.n	8001ea6 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff47 	bl	8001d34 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff8a 	bl	8001dc0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800

08001ed4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eea:	d027      	beq.n	8001f3c <LL_TIM_OC_Init+0x68>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef2:	d82a      	bhi.n	8001f4a <LL_TIM_OC_Init+0x76>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efa:	d018      	beq.n	8001f2e <LL_TIM_OC_Init+0x5a>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f02:	d822      	bhi.n	8001f4a <LL_TIM_OC_Init+0x76>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d003      	beq.n	8001f12 <LL_TIM_OC_Init+0x3e>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d007      	beq.n	8001f20 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001f10:	e01b      	b.n	8001f4a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f81f 	bl	8001f58 <OC1Config>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8001f1e:	e015      	b.n	8001f4c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f87e 	bl	8002024 <OC2Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f2c:	e00e      	b.n	8001f4c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f8e1 	bl	80020f8 <OC3Config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	75fb      	strb	r3, [r7, #23]
      break;
 8001f3a:	e007      	b.n	8001f4c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f944 	bl	80021cc <OC4Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	75fb      	strb	r3, [r7, #23]
      break;
 8001f48:	e000      	b.n	8001f4c <LL_TIM_OC_Init+0x78>
      break;
 8001f4a:	bf00      	nop
  }

  return result;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f023 0201 	bic.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f023 0202 	bic.w	r2, r3, #2
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0201 	bic.w	r2, r3, #1
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <OC1Config+0xc8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d11e      	bne.n	8001ff8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f023 0208 	bic.w	r2, r3, #8
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f023 0204 	bic.w	r2, r3, #4
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4619      	mov	r1, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fea0 	bl	8001d50 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40010000 	.word	0x40010000

08002024 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f023 0210 	bic.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f023 0220 	bic.w	r2, r3, #32
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0210 	bic.w	r2, r3, #16
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <OC2Config+0xd0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d11f      	bne.n	80020cc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	019b      	lsls	r3, r3, #6
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	019b      	lsls	r3, r3, #6
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fe44 	bl	8001d6c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40010000 	.word	0x40010000

080020f8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	4313      	orrs	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <OC3Config+0xd0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11f      	bne.n	800219e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	029b      	lsls	r3, r3, #10
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	029b      	lsls	r3, r3, #10
 800217a:	4313      	orrs	r3, r2
 800217c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	015b      	lsls	r3, r3, #5
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4619      	mov	r1, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fde9 	bl	8001d88 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000

080021cc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	031b      	lsls	r3, r3, #12
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	031b      	lsls	r3, r3, #12
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0f      	ldr	r2, [pc, #60]	; (800226c <OC4Config+0xa0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d107      	bne.n	8002244 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	019b      	lsls	r3, r3, #6
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fda4 	bl	8001da4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010000 	.word	0x40010000

08002270 <LL_USART_IsEnabled>:
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_USART_SetStopBitsLength>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	611a      	str	r2, [r3, #16]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_USART_SetHWFlowCtrl>:
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	615a      	str	r2, [r3, #20]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_USART_SetBaudRate>:
{
 80022e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	b09f      	sub	sp, #124	; 0x7c
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6778      	str	r0, [r7, #116]	; 0x74
 80022ee:	6739      	str	r1, [r7, #112]	; 0x70
 80022f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022f2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80022f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022fa:	f040 80bc 	bne.w	8002476 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80022fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002300:	461c      	mov	r4, r3
 8002302:	f04f 0500 	mov.w	r5, #0
 8002306:	4622      	mov	r2, r4
 8002308:	462b      	mov	r3, r5
 800230a:	eb12 0a02 	adds.w	sl, r2, r2
 800230e:	eb43 0b03 	adc.w	fp, r3, r3
 8002312:	4652      	mov	r2, sl
 8002314:	465b      	mov	r3, fp
 8002316:	1912      	adds	r2, r2, r4
 8002318:	eb45 0303 	adc.w	r3, r5, r3
 800231c:	f04f 0000 	mov.w	r0, #0
 8002320:	f04f 0100 	mov.w	r1, #0
 8002324:	00d9      	lsls	r1, r3, #3
 8002326:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800232a:	00d0      	lsls	r0, r2, #3
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	1911      	adds	r1, r2, r4
 8002332:	6639      	str	r1, [r7, #96]	; 0x60
 8002334:	416b      	adcs	r3, r5
 8002336:	667b      	str	r3, [r7, #100]	; 0x64
 8002338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233a:	461a      	mov	r2, r3
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	1891      	adds	r1, r2, r2
 8002342:	6339      	str	r1, [r7, #48]	; 0x30
 8002344:	415b      	adcs	r3, r3
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
 8002348:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800234c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002350:	f7fe f972 	bl	8000638 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4ba9      	ldr	r3, [pc, #676]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 800235a:	fba3 2302 	umull	r2, r3, r3, r2
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	b29b      	uxth	r3, r3
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	b29e      	uxth	r6, r3
 8002366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002368:	461c      	mov	r4, r3
 800236a:	f04f 0500 	mov.w	r5, #0
 800236e:	4622      	mov	r2, r4
 8002370:	462b      	mov	r3, r5
 8002372:	1891      	adds	r1, r2, r2
 8002374:	62b9      	str	r1, [r7, #40]	; 0x28
 8002376:	415b      	adcs	r3, r3
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800237a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800237e:	1912      	adds	r2, r2, r4
 8002380:	eb45 0303 	adc.w	r3, r5, r3
 8002384:	f04f 0000 	mov.w	r0, #0
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	00d9      	lsls	r1, r3, #3
 800238e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002392:	00d0      	lsls	r0, r2, #3
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	1911      	adds	r1, r2, r4
 800239a:	65b9      	str	r1, [r7, #88]	; 0x58
 800239c:	416b      	adcs	r3, r5
 800239e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023a2:	461a      	mov	r2, r3
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	1891      	adds	r1, r2, r2
 80023aa:	6239      	str	r1, [r7, #32]
 80023ac:	415b      	adcs	r3, r3
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80023b8:	f7fe f93e 	bl	8000638 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4b8f      	ldr	r3, [pc, #572]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 80023c2:	fba3 1302 	umull	r1, r3, r3, r2
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2164      	movs	r1, #100	; 0x64
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	3332      	adds	r3, #50	; 0x32
 80023d4:	4a8a      	ldr	r2, [pc, #552]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	b29b      	uxth	r3, r3
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4433      	add	r3, r6
 80023ea:	b29e      	uxth	r6, r3
 80023ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ee:	4618      	mov	r0, r3
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	1894      	adds	r4, r2, r2
 80023fa:	61bc      	str	r4, [r7, #24]
 80023fc:	415b      	adcs	r3, r3
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002404:	1812      	adds	r2, r2, r0
 8002406:	eb41 0303 	adc.w	r3, r1, r3
 800240a:	f04f 0400 	mov.w	r4, #0
 800240e:	f04f 0500 	mov.w	r5, #0
 8002412:	00dd      	lsls	r5, r3, #3
 8002414:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002418:	00d4      	lsls	r4, r2, #3
 800241a:	4622      	mov	r2, r4
 800241c:	462b      	mov	r3, r5
 800241e:	1814      	adds	r4, r2, r0
 8002420:	653c      	str	r4, [r7, #80]	; 0x50
 8002422:	414b      	adcs	r3, r1
 8002424:	657b      	str	r3, [r7, #84]	; 0x54
 8002426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002428:	461a      	mov	r2, r3
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	1891      	adds	r1, r2, r2
 8002430:	6139      	str	r1, [r7, #16]
 8002432:	415b      	adcs	r3, r3
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800243a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800243e:	f7fe f8fb 	bl	8000638 <__aeabi_uldivmod>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4b6e      	ldr	r3, [pc, #440]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 8002448:	fba3 1302 	umull	r1, r3, r3, r2
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	2164      	movs	r1, #100	; 0x64
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	3332      	adds	r3, #50	; 0x32
 800245a:	4a69      	ldr	r2, [pc, #420]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b29b      	uxth	r3, r3
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	b29b      	uxth	r3, r3
 800246a:	4433      	add	r3, r6
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	e0be      	b.n	80025f4 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002478:	461c      	mov	r4, r3
 800247a:	f04f 0500 	mov.w	r5, #0
 800247e:	4622      	mov	r2, r4
 8002480:	462b      	mov	r3, r5
 8002482:	eb12 0802 	adds.w	r8, r2, r2
 8002486:	eb43 0903 	adc.w	r9, r3, r3
 800248a:	4642      	mov	r2, r8
 800248c:	464b      	mov	r3, r9
 800248e:	1912      	adds	r2, r2, r4
 8002490:	eb45 0303 	adc.w	r3, r5, r3
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	00d9      	lsls	r1, r3, #3
 800249e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a2:	00d0      	lsls	r0, r2, #3
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	1911      	adds	r1, r2, r4
 80024aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80024ac:	416b      	adcs	r3, r5
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b2:	4618      	mov	r0, r3
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	008b      	lsls	r3, r1, #2
 80024c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024c6:	0082      	lsls	r2, r0, #2
 80024c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80024cc:	f7fe f8b4 	bl	8000638 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 80024d6:	fba3 2302 	umull	r2, r3, r3, r2
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b29b      	uxth	r3, r3
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	b29e      	uxth	r6, r3
 80024e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e4:	4618      	mov	r0, r3
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	1894      	adds	r4, r2, r2
 80024f0:	60bc      	str	r4, [r7, #8]
 80024f2:	415b      	adcs	r3, r3
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024fa:	1812      	adds	r2, r2, r0
 80024fc:	eb41 0303 	adc.w	r3, r1, r3
 8002500:	f04f 0400 	mov.w	r4, #0
 8002504:	f04f 0500 	mov.w	r5, #0
 8002508:	00dd      	lsls	r5, r3, #3
 800250a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800250e:	00d4      	lsls	r4, r2, #3
 8002510:	4622      	mov	r2, r4
 8002512:	462b      	mov	r3, r5
 8002514:	1814      	adds	r4, r2, r0
 8002516:	643c      	str	r4, [r7, #64]	; 0x40
 8002518:	414b      	adcs	r3, r1
 800251a:	647b      	str	r3, [r7, #68]	; 0x44
 800251c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800251e:	4618      	mov	r0, r3
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	008b      	lsls	r3, r1, #2
 800252e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002532:	0082      	lsls	r2, r0, #2
 8002534:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002538:	f7fe f87e 	bl	8000638 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 8002542:	fba3 1302 	umull	r1, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2164      	movs	r1, #100	; 0x64
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	3332      	adds	r3, #50	; 0x32
 8002554:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b29b      	uxth	r3, r3
 800255e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002562:	b29b      	uxth	r3, r3
 8002564:	4433      	add	r3, r6
 8002566:	b29e      	uxth	r6, r3
 8002568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800256a:	4618      	mov	r0, r3
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	1894      	adds	r4, r2, r2
 8002576:	603c      	str	r4, [r7, #0]
 8002578:	415b      	adcs	r3, r3
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002580:	1812      	adds	r2, r2, r0
 8002582:	eb41 0303 	adc.w	r3, r1, r3
 8002586:	f04f 0400 	mov.w	r4, #0
 800258a:	f04f 0500 	mov.w	r5, #0
 800258e:	00dd      	lsls	r5, r3, #3
 8002590:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002594:	00d4      	lsls	r4, r2, #3
 8002596:	4622      	mov	r2, r4
 8002598:	462b      	mov	r3, r5
 800259a:	1814      	adds	r4, r2, r0
 800259c:	63bc      	str	r4, [r7, #56]	; 0x38
 800259e:	414b      	adcs	r3, r1
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a4:	4618      	mov	r0, r3
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	008b      	lsls	r3, r1, #2
 80025b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025b8:	0082      	lsls	r2, r0, #2
 80025ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025be:	f7fe f83b 	bl	8000638 <__aeabi_uldivmod>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 80025c8:	fba3 1302 	umull	r1, r3, r3, r2
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	2164      	movs	r1, #100	; 0x64
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	3332      	adds	r3, #50	; 0x32
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <LL_USART_SetBaudRate+0x31c>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4433      	add	r3, r6
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	377c      	adds	r7, #124	; 0x7c
 80025f8:	46bd      	mov	sp, r7
 80025fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fe:	bf00      	nop
 8002600:	51eb851f 	.word	0x51eb851f

08002604 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fe2a 	bl	8002270 <LL_USART_IsEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d149      	bne.n	80026b6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800262a:	f023 030c 	bic.w	r3, r3, #12
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6851      	ldr	r1, [r2, #4]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	4311      	orrs	r1, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6912      	ldr	r2, [r2, #16]
 800263c:	4311      	orrs	r1, r2
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	6992      	ldr	r2, [r2, #24]
 8002642:	430a      	orrs	r2, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fe21 	bl	8002298 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fe2e 	bl	80022be <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fa7e 	bl	8001b68 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <LL_USART_Init+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d102      	bne.n	800267a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e00c      	b.n	8002694 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <LL_USART_Init+0xc0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d102      	bne.n	8002688 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	e005      	b.n	8002694 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <LL_USART_Init+0xc4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80026a2:	2300      	movs	r3, #0
 80026a4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fe17 	bl	80022e4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40004400 	.word	0x40004400
 80026c8:	40011400 	.word	0x40011400

080026cc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <LL_InitTick+0x30>)
 80026e0:	3b01      	subs	r3, #1
 80026e2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <LL_InitTick+0x30>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <LL_InitTick+0x30>)
 80026ec:	2205      	movs	r2, #5
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e010 	.word	0xe000e010

08002700 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ffdd 	bl	80026cc <LL_InitTick>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <LL_SetSystemCoreClock+0x1c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <__errno>:
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <__errno+0x8>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000004 	.word	0x20000004

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	4d0d      	ldr	r5, [pc, #52]	; (8002780 <__libc_init_array+0x38>)
 800274c:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 800274e:	1b64      	subs	r4, r4, r5
 8002750:	10a4      	asrs	r4, r4, #2
 8002752:	2600      	movs	r6, #0
 8002754:	42a6      	cmp	r6, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	4d0b      	ldr	r5, [pc, #44]	; (8002788 <__libc_init_array+0x40>)
 800275a:	4c0c      	ldr	r4, [pc, #48]	; (800278c <__libc_init_array+0x44>)
 800275c:	f001 f822 	bl	80037a4 <_init>
 8002760:	1b64      	subs	r4, r4, r5
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	2600      	movs	r6, #0
 8002766:	42a6      	cmp	r6, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002770:	4798      	blx	r3
 8002772:	3601      	adds	r6, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f855 3b04 	ldr.w	r3, [r5], #4
 800277a:	4798      	blx	r3
 800277c:	3601      	adds	r6, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	08003938 	.word	0x08003938
 8002784:	08003938 	.word	0x08003938
 8002788:	08003938 	.word	0x08003938
 800278c:	0800393c 	.word	0x0800393c

08002790 <memset>:
 8002790:	4402      	add	r2, r0
 8002792:	4603      	mov	r3, r0
 8002794:	4293      	cmp	r3, r2
 8002796:	d100      	bne.n	800279a <memset+0xa>
 8002798:	4770      	bx	lr
 800279a:	f803 1b01 	strb.w	r1, [r3], #1
 800279e:	e7f9      	b.n	8002794 <memset+0x4>

080027a0 <rand>:
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <rand+0x60>)
 80027a2:	b510      	push	{r4, lr}
 80027a4:	681c      	ldr	r4, [r3, #0]
 80027a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027a8:	b9b3      	cbnz	r3, 80027d8 <rand+0x38>
 80027aa:	2018      	movs	r0, #24
 80027ac:	f000 f868 	bl	8002880 <malloc>
 80027b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80027b2:	b928      	cbnz	r0, 80027c0 <rand+0x20>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <rand+0x64>)
 80027b8:	4813      	ldr	r0, [pc, #76]	; (8002808 <rand+0x68>)
 80027ba:	214e      	movs	r1, #78	; 0x4e
 80027bc:	f000 f830 	bl	8002820 <__assert_func>
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <rand+0x6c>)
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <rand+0x70>)
 80027c4:	e9c0 2300 	strd	r2, r3, [r0]
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <rand+0x74>)
 80027ca:	6083      	str	r3, [r0, #8]
 80027cc:	230b      	movs	r3, #11
 80027ce:	8183      	strh	r3, [r0, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	2300      	movs	r3, #0
 80027d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80027d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80027da:	480f      	ldr	r0, [pc, #60]	; (8002818 <rand+0x78>)
 80027dc:	690a      	ldr	r2, [r1, #16]
 80027de:	694b      	ldr	r3, [r1, #20]
 80027e0:	4c0e      	ldr	r4, [pc, #56]	; (800281c <rand+0x7c>)
 80027e2:	4350      	muls	r0, r2
 80027e4:	fb04 0003 	mla	r0, r4, r3, r0
 80027e8:	fba2 3404 	umull	r3, r4, r2, r4
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	4404      	add	r4, r0
 80027f0:	f144 0000 	adc.w	r0, r4, #0
 80027f4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80027f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80027fc:	bd10      	pop	{r4, pc}
 80027fe:	bf00      	nop
 8002800:	20000004 	.word	0x20000004
 8002804:	080037e8 	.word	0x080037e8
 8002808:	080037ff 	.word	0x080037ff
 800280c:	abcd330e 	.word	0xabcd330e
 8002810:	e66d1234 	.word	0xe66d1234
 8002814:	0005deec 	.word	0x0005deec
 8002818:	5851f42d 	.word	0x5851f42d
 800281c:	4c957f2d 	.word	0x4c957f2d

08002820 <__assert_func>:
 8002820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002822:	4614      	mov	r4, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <__assert_func+0x2c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4605      	mov	r5, r0
 800282c:	68d8      	ldr	r0, [r3, #12]
 800282e:	b14c      	cbz	r4, 8002844 <__assert_func+0x24>
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <__assert_func+0x30>)
 8002832:	9100      	str	r1, [sp, #0]
 8002834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002838:	4906      	ldr	r1, [pc, #24]	; (8002854 <__assert_func+0x34>)
 800283a:	462b      	mov	r3, r5
 800283c:	f000 f80e 	bl	800285c <fiprintf>
 8002840:	f000 fc8e 	bl	8003160 <abort>
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__assert_func+0x38>)
 8002846:	461c      	mov	r4, r3
 8002848:	e7f3      	b.n	8002832 <__assert_func+0x12>
 800284a:	bf00      	nop
 800284c:	20000004 	.word	0x20000004
 8002850:	0800385e 	.word	0x0800385e
 8002854:	0800386b 	.word	0x0800386b
 8002858:	08003899 	.word	0x08003899

0800285c <fiprintf>:
 800285c:	b40e      	push	{r1, r2, r3}
 800285e:	b503      	push	{r0, r1, lr}
 8002860:	4601      	mov	r1, r0
 8002862:	ab03      	add	r3, sp, #12
 8002864:	4805      	ldr	r0, [pc, #20]	; (800287c <fiprintf+0x20>)
 8002866:	f853 2b04 	ldr.w	r2, [r3], #4
 800286a:	6800      	ldr	r0, [r0, #0]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f000 f8e3 	bl	8002a38 <_vfiprintf_r>
 8002872:	b002      	add	sp, #8
 8002874:	f85d eb04 	ldr.w	lr, [sp], #4
 8002878:	b003      	add	sp, #12
 800287a:	4770      	bx	lr
 800287c:	20000004 	.word	0x20000004

08002880 <malloc>:
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <malloc+0xc>)
 8002882:	4601      	mov	r1, r0
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f000 b853 	b.w	8002930 <_malloc_r>
 800288a:	bf00      	nop
 800288c:	20000004 	.word	0x20000004

08002890 <_free_r>:
 8002890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002892:	2900      	cmp	r1, #0
 8002894:	d048      	beq.n	8002928 <_free_r+0x98>
 8002896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800289a:	9001      	str	r0, [sp, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f1a1 0404 	sub.w	r4, r1, #4
 80028a2:	bfb8      	it	lt
 80028a4:	18e4      	addlt	r4, r4, r3
 80028a6:	f000 fe81 	bl	80035ac <__malloc_lock>
 80028aa:	4a20      	ldr	r2, [pc, #128]	; (800292c <_free_r+0x9c>)
 80028ac:	9801      	ldr	r0, [sp, #4]
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	4615      	mov	r5, r2
 80028b2:	b933      	cbnz	r3, 80028c2 <_free_r+0x32>
 80028b4:	6063      	str	r3, [r4, #4]
 80028b6:	6014      	str	r4, [r2, #0]
 80028b8:	b003      	add	sp, #12
 80028ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028be:	f000 be7b 	b.w	80035b8 <__malloc_unlock>
 80028c2:	42a3      	cmp	r3, r4
 80028c4:	d90b      	bls.n	80028de <_free_r+0x4e>
 80028c6:	6821      	ldr	r1, [r4, #0]
 80028c8:	1862      	adds	r2, r4, r1
 80028ca:	4293      	cmp	r3, r2
 80028cc:	bf04      	itt	eq
 80028ce:	681a      	ldreq	r2, [r3, #0]
 80028d0:	685b      	ldreq	r3, [r3, #4]
 80028d2:	6063      	str	r3, [r4, #4]
 80028d4:	bf04      	itt	eq
 80028d6:	1852      	addeq	r2, r2, r1
 80028d8:	6022      	streq	r2, [r4, #0]
 80028da:	602c      	str	r4, [r5, #0]
 80028dc:	e7ec      	b.n	80028b8 <_free_r+0x28>
 80028de:	461a      	mov	r2, r3
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	b10b      	cbz	r3, 80028e8 <_free_r+0x58>
 80028e4:	42a3      	cmp	r3, r4
 80028e6:	d9fa      	bls.n	80028de <_free_r+0x4e>
 80028e8:	6811      	ldr	r1, [r2, #0]
 80028ea:	1855      	adds	r5, r2, r1
 80028ec:	42a5      	cmp	r5, r4
 80028ee:	d10b      	bne.n	8002908 <_free_r+0x78>
 80028f0:	6824      	ldr	r4, [r4, #0]
 80028f2:	4421      	add	r1, r4
 80028f4:	1854      	adds	r4, r2, r1
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	6011      	str	r1, [r2, #0]
 80028fa:	d1dd      	bne.n	80028b8 <_free_r+0x28>
 80028fc:	681c      	ldr	r4, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	6053      	str	r3, [r2, #4]
 8002902:	4421      	add	r1, r4
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	e7d7      	b.n	80028b8 <_free_r+0x28>
 8002908:	d902      	bls.n	8002910 <_free_r+0x80>
 800290a:	230c      	movs	r3, #12
 800290c:	6003      	str	r3, [r0, #0]
 800290e:	e7d3      	b.n	80028b8 <_free_r+0x28>
 8002910:	6825      	ldr	r5, [r4, #0]
 8002912:	1961      	adds	r1, r4, r5
 8002914:	428b      	cmp	r3, r1
 8002916:	bf04      	itt	eq
 8002918:	6819      	ldreq	r1, [r3, #0]
 800291a:	685b      	ldreq	r3, [r3, #4]
 800291c:	6063      	str	r3, [r4, #4]
 800291e:	bf04      	itt	eq
 8002920:	1949      	addeq	r1, r1, r5
 8002922:	6021      	streq	r1, [r4, #0]
 8002924:	6054      	str	r4, [r2, #4]
 8002926:	e7c7      	b.n	80028b8 <_free_r+0x28>
 8002928:	b003      	add	sp, #12
 800292a:	bd30      	pop	{r4, r5, pc}
 800292c:	20000088 	.word	0x20000088

08002930 <_malloc_r>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	1ccd      	adds	r5, r1, #3
 8002934:	f025 0503 	bic.w	r5, r5, #3
 8002938:	3508      	adds	r5, #8
 800293a:	2d0c      	cmp	r5, #12
 800293c:	bf38      	it	cc
 800293e:	250c      	movcc	r5, #12
 8002940:	2d00      	cmp	r5, #0
 8002942:	4606      	mov	r6, r0
 8002944:	db01      	blt.n	800294a <_malloc_r+0x1a>
 8002946:	42a9      	cmp	r1, r5
 8002948:	d903      	bls.n	8002952 <_malloc_r+0x22>
 800294a:	230c      	movs	r3, #12
 800294c:	6033      	str	r3, [r6, #0]
 800294e:	2000      	movs	r0, #0
 8002950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002952:	f000 fe2b 	bl	80035ac <__malloc_lock>
 8002956:	4921      	ldr	r1, [pc, #132]	; (80029dc <_malloc_r+0xac>)
 8002958:	680a      	ldr	r2, [r1, #0]
 800295a:	4614      	mov	r4, r2
 800295c:	b99c      	cbnz	r4, 8002986 <_malloc_r+0x56>
 800295e:	4f20      	ldr	r7, [pc, #128]	; (80029e0 <_malloc_r+0xb0>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b923      	cbnz	r3, 800296e <_malloc_r+0x3e>
 8002964:	4621      	mov	r1, r4
 8002966:	4630      	mov	r0, r6
 8002968:	f000 fb2a 	bl	8002fc0 <_sbrk_r>
 800296c:	6038      	str	r0, [r7, #0]
 800296e:	4629      	mov	r1, r5
 8002970:	4630      	mov	r0, r6
 8002972:	f000 fb25 	bl	8002fc0 <_sbrk_r>
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	d123      	bne.n	80029c2 <_malloc_r+0x92>
 800297a:	230c      	movs	r3, #12
 800297c:	6033      	str	r3, [r6, #0]
 800297e:	4630      	mov	r0, r6
 8002980:	f000 fe1a 	bl	80035b8 <__malloc_unlock>
 8002984:	e7e3      	b.n	800294e <_malloc_r+0x1e>
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	1b5b      	subs	r3, r3, r5
 800298a:	d417      	bmi.n	80029bc <_malloc_r+0x8c>
 800298c:	2b0b      	cmp	r3, #11
 800298e:	d903      	bls.n	8002998 <_malloc_r+0x68>
 8002990:	6023      	str	r3, [r4, #0]
 8002992:	441c      	add	r4, r3
 8002994:	6025      	str	r5, [r4, #0]
 8002996:	e004      	b.n	80029a2 <_malloc_r+0x72>
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	42a2      	cmp	r2, r4
 800299c:	bf0c      	ite	eq
 800299e:	600b      	streq	r3, [r1, #0]
 80029a0:	6053      	strne	r3, [r2, #4]
 80029a2:	4630      	mov	r0, r6
 80029a4:	f000 fe08 	bl	80035b8 <__malloc_unlock>
 80029a8:	f104 000b 	add.w	r0, r4, #11
 80029ac:	1d23      	adds	r3, r4, #4
 80029ae:	f020 0007 	bic.w	r0, r0, #7
 80029b2:	1ac2      	subs	r2, r0, r3
 80029b4:	d0cc      	beq.n	8002950 <_malloc_r+0x20>
 80029b6:	1a1b      	subs	r3, r3, r0
 80029b8:	50a3      	str	r3, [r4, r2]
 80029ba:	e7c9      	b.n	8002950 <_malloc_r+0x20>
 80029bc:	4622      	mov	r2, r4
 80029be:	6864      	ldr	r4, [r4, #4]
 80029c0:	e7cc      	b.n	800295c <_malloc_r+0x2c>
 80029c2:	1cc4      	adds	r4, r0, #3
 80029c4:	f024 0403 	bic.w	r4, r4, #3
 80029c8:	42a0      	cmp	r0, r4
 80029ca:	d0e3      	beq.n	8002994 <_malloc_r+0x64>
 80029cc:	1a21      	subs	r1, r4, r0
 80029ce:	4630      	mov	r0, r6
 80029d0:	f000 faf6 	bl	8002fc0 <_sbrk_r>
 80029d4:	3001      	adds	r0, #1
 80029d6:	d1dd      	bne.n	8002994 <_malloc_r+0x64>
 80029d8:	e7cf      	b.n	800297a <_malloc_r+0x4a>
 80029da:	bf00      	nop
 80029dc:	20000088 	.word	0x20000088
 80029e0:	2000008c 	.word	0x2000008c

080029e4 <__sfputc_r>:
 80029e4:	6893      	ldr	r3, [r2, #8]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	b410      	push	{r4}
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	da08      	bge.n	8002a02 <__sfputc_r+0x1e>
 80029f0:	6994      	ldr	r4, [r2, #24]
 80029f2:	42a3      	cmp	r3, r4
 80029f4:	db01      	blt.n	80029fa <__sfputc_r+0x16>
 80029f6:	290a      	cmp	r1, #10
 80029f8:	d103      	bne.n	8002a02 <__sfputc_r+0x1e>
 80029fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029fe:	f000 baef 	b.w	8002fe0 <__swbuf_r>
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	1c58      	adds	r0, r3, #1
 8002a06:	6010      	str	r0, [r2, #0]
 8002a08:	7019      	strb	r1, [r3, #0]
 8002a0a:	4608      	mov	r0, r1
 8002a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <__sfputs_r>:
 8002a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a14:	4606      	mov	r6, r0
 8002a16:	460f      	mov	r7, r1
 8002a18:	4614      	mov	r4, r2
 8002a1a:	18d5      	adds	r5, r2, r3
 8002a1c:	42ac      	cmp	r4, r5
 8002a1e:	d101      	bne.n	8002a24 <__sfputs_r+0x12>
 8002a20:	2000      	movs	r0, #0
 8002a22:	e007      	b.n	8002a34 <__sfputs_r+0x22>
 8002a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a28:	463a      	mov	r2, r7
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	f7ff ffda 	bl	80029e4 <__sfputc_r>
 8002a30:	1c43      	adds	r3, r0, #1
 8002a32:	d1f3      	bne.n	8002a1c <__sfputs_r+0xa>
 8002a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a38 <_vfiprintf_r>:
 8002a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a3c:	460d      	mov	r5, r1
 8002a3e:	b09d      	sub	sp, #116	; 0x74
 8002a40:	4614      	mov	r4, r2
 8002a42:	4698      	mov	r8, r3
 8002a44:	4606      	mov	r6, r0
 8002a46:	b118      	cbz	r0, 8002a50 <_vfiprintf_r+0x18>
 8002a48:	6983      	ldr	r3, [r0, #24]
 8002a4a:	b90b      	cbnz	r3, 8002a50 <_vfiprintf_r+0x18>
 8002a4c:	f000 fcaa 	bl	80033a4 <__sinit>
 8002a50:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <_vfiprintf_r+0x240>)
 8002a52:	429d      	cmp	r5, r3
 8002a54:	d11b      	bne.n	8002a8e <_vfiprintf_r+0x56>
 8002a56:	6875      	ldr	r5, [r6, #4]
 8002a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a5a:	07d9      	lsls	r1, r3, #31
 8002a5c:	d405      	bmi.n	8002a6a <_vfiprintf_r+0x32>
 8002a5e:	89ab      	ldrh	r3, [r5, #12]
 8002a60:	059a      	lsls	r2, r3, #22
 8002a62:	d402      	bmi.n	8002a6a <_vfiprintf_r+0x32>
 8002a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a66:	f000 fd3b 	bl	80034e0 <__retarget_lock_acquire_recursive>
 8002a6a:	89ab      	ldrh	r3, [r5, #12]
 8002a6c:	071b      	lsls	r3, r3, #28
 8002a6e:	d501      	bpl.n	8002a74 <_vfiprintf_r+0x3c>
 8002a70:	692b      	ldr	r3, [r5, #16]
 8002a72:	b9eb      	cbnz	r3, 8002ab0 <_vfiprintf_r+0x78>
 8002a74:	4629      	mov	r1, r5
 8002a76:	4630      	mov	r0, r6
 8002a78:	f000 fb04 	bl	8003084 <__swsetup_r>
 8002a7c:	b1c0      	cbz	r0, 8002ab0 <_vfiprintf_r+0x78>
 8002a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a80:	07dc      	lsls	r4, r3, #31
 8002a82:	d50e      	bpl.n	8002aa2 <_vfiprintf_r+0x6a>
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a88:	b01d      	add	sp, #116	; 0x74
 8002a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8e:	4b7b      	ldr	r3, [pc, #492]	; (8002c7c <_vfiprintf_r+0x244>)
 8002a90:	429d      	cmp	r5, r3
 8002a92:	d101      	bne.n	8002a98 <_vfiprintf_r+0x60>
 8002a94:	68b5      	ldr	r5, [r6, #8]
 8002a96:	e7df      	b.n	8002a58 <_vfiprintf_r+0x20>
 8002a98:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <_vfiprintf_r+0x248>)
 8002a9a:	429d      	cmp	r5, r3
 8002a9c:	bf08      	it	eq
 8002a9e:	68f5      	ldreq	r5, [r6, #12]
 8002aa0:	e7da      	b.n	8002a58 <_vfiprintf_r+0x20>
 8002aa2:	89ab      	ldrh	r3, [r5, #12]
 8002aa4:	0598      	lsls	r0, r3, #22
 8002aa6:	d4ed      	bmi.n	8002a84 <_vfiprintf_r+0x4c>
 8002aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aaa:	f000 fd1a 	bl	80034e2 <__retarget_lock_release_recursive>
 8002aae:	e7e9      	b.n	8002a84 <_vfiprintf_r+0x4c>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8002abe:	2330      	movs	r3, #48	; 0x30
 8002ac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002c84 <_vfiprintf_r+0x24c>
 8002ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac8:	f04f 0901 	mov.w	r9, #1
 8002acc:	4623      	mov	r3, r4
 8002ace:	469a      	mov	sl, r3
 8002ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ad4:	b10a      	cbz	r2, 8002ada <_vfiprintf_r+0xa2>
 8002ad6:	2a25      	cmp	r2, #37	; 0x25
 8002ad8:	d1f9      	bne.n	8002ace <_vfiprintf_r+0x96>
 8002ada:	ebba 0b04 	subs.w	fp, sl, r4
 8002ade:	d00b      	beq.n	8002af8 <_vfiprintf_r+0xc0>
 8002ae0:	465b      	mov	r3, fp
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	f7ff ff93 	bl	8002a12 <__sfputs_r>
 8002aec:	3001      	adds	r0, #1
 8002aee:	f000 80aa 	beq.w	8002c46 <_vfiprintf_r+0x20e>
 8002af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002af4:	445a      	add	r2, fp
 8002af6:	9209      	str	r2, [sp, #36]	; 0x24
 8002af8:	f89a 3000 	ldrb.w	r3, [sl]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a2 	beq.w	8002c46 <_vfiprintf_r+0x20e>
 8002b02:	2300      	movs	r3, #0
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b0c:	f10a 0a01 	add.w	sl, sl, #1
 8002b10:	9304      	str	r3, [sp, #16]
 8002b12:	9307      	str	r3, [sp, #28]
 8002b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b18:	931a      	str	r3, [sp, #104]	; 0x68
 8002b1a:	4654      	mov	r4, sl
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b22:	4858      	ldr	r0, [pc, #352]	; (8002c84 <_vfiprintf_r+0x24c>)
 8002b24:	f7fd fb5c 	bl	80001e0 <memchr>
 8002b28:	9a04      	ldr	r2, [sp, #16]
 8002b2a:	b9d8      	cbnz	r0, 8002b64 <_vfiprintf_r+0x12c>
 8002b2c:	06d1      	lsls	r1, r2, #27
 8002b2e:	bf44      	itt	mi
 8002b30:	2320      	movmi	r3, #32
 8002b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b36:	0713      	lsls	r3, r2, #28
 8002b38:	bf44      	itt	mi
 8002b3a:	232b      	movmi	r3, #43	; 0x2b
 8002b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b40:	f89a 3000 	ldrb.w	r3, [sl]
 8002b44:	2b2a      	cmp	r3, #42	; 0x2a
 8002b46:	d015      	beq.n	8002b74 <_vfiprintf_r+0x13c>
 8002b48:	9a07      	ldr	r2, [sp, #28]
 8002b4a:	4654      	mov	r4, sl
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f04f 0c0a 	mov.w	ip, #10
 8002b52:	4621      	mov	r1, r4
 8002b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b58:	3b30      	subs	r3, #48	; 0x30
 8002b5a:	2b09      	cmp	r3, #9
 8002b5c:	d94e      	bls.n	8002bfc <_vfiprintf_r+0x1c4>
 8002b5e:	b1b0      	cbz	r0, 8002b8e <_vfiprintf_r+0x156>
 8002b60:	9207      	str	r2, [sp, #28]
 8002b62:	e014      	b.n	8002b8e <_vfiprintf_r+0x156>
 8002b64:	eba0 0308 	sub.w	r3, r0, r8
 8002b68:	fa09 f303 	lsl.w	r3, r9, r3
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	9304      	str	r3, [sp, #16]
 8002b70:	46a2      	mov	sl, r4
 8002b72:	e7d2      	b.n	8002b1a <_vfiprintf_r+0xe2>
 8002b74:	9b03      	ldr	r3, [sp, #12]
 8002b76:	1d19      	adds	r1, r3, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	9103      	str	r1, [sp, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bfbb      	ittet	lt
 8002b80:	425b      	neglt	r3, r3
 8002b82:	f042 0202 	orrlt.w	r2, r2, #2
 8002b86:	9307      	strge	r3, [sp, #28]
 8002b88:	9307      	strlt	r3, [sp, #28]
 8002b8a:	bfb8      	it	lt
 8002b8c:	9204      	strlt	r2, [sp, #16]
 8002b8e:	7823      	ldrb	r3, [r4, #0]
 8002b90:	2b2e      	cmp	r3, #46	; 0x2e
 8002b92:	d10c      	bne.n	8002bae <_vfiprintf_r+0x176>
 8002b94:	7863      	ldrb	r3, [r4, #1]
 8002b96:	2b2a      	cmp	r3, #42	; 0x2a
 8002b98:	d135      	bne.n	8002c06 <_vfiprintf_r+0x1ce>
 8002b9a:	9b03      	ldr	r3, [sp, #12]
 8002b9c:	1d1a      	adds	r2, r3, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	9203      	str	r2, [sp, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bfb8      	it	lt
 8002ba6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002baa:	3402      	adds	r4, #2
 8002bac:	9305      	str	r3, [sp, #20]
 8002bae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002c94 <_vfiprintf_r+0x25c>
 8002bb2:	7821      	ldrb	r1, [r4, #0]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4650      	mov	r0, sl
 8002bb8:	f7fd fb12 	bl	80001e0 <memchr>
 8002bbc:	b140      	cbz	r0, 8002bd0 <_vfiprintf_r+0x198>
 8002bbe:	2340      	movs	r3, #64	; 0x40
 8002bc0:	eba0 000a 	sub.w	r0, r0, sl
 8002bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc8:	9b04      	ldr	r3, [sp, #16]
 8002bca:	4303      	orrs	r3, r0
 8002bcc:	3401      	adds	r4, #1
 8002bce:	9304      	str	r3, [sp, #16]
 8002bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd4:	482c      	ldr	r0, [pc, #176]	; (8002c88 <_vfiprintf_r+0x250>)
 8002bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bda:	2206      	movs	r2, #6
 8002bdc:	f7fd fb00 	bl	80001e0 <memchr>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d03f      	beq.n	8002c64 <_vfiprintf_r+0x22c>
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <_vfiprintf_r+0x254>)
 8002be6:	bb1b      	cbnz	r3, 8002c30 <_vfiprintf_r+0x1f8>
 8002be8:	9b03      	ldr	r3, [sp, #12]
 8002bea:	3307      	adds	r3, #7
 8002bec:	f023 0307 	bic.w	r3, r3, #7
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	9303      	str	r3, [sp, #12]
 8002bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf6:	443b      	add	r3, r7
 8002bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bfa:	e767      	b.n	8002acc <_vfiprintf_r+0x94>
 8002bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c00:	460c      	mov	r4, r1
 8002c02:	2001      	movs	r0, #1
 8002c04:	e7a5      	b.n	8002b52 <_vfiprintf_r+0x11a>
 8002c06:	2300      	movs	r3, #0
 8002c08:	3401      	adds	r4, #1
 8002c0a:	9305      	str	r3, [sp, #20]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f04f 0c0a 	mov.w	ip, #10
 8002c12:	4620      	mov	r0, r4
 8002c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c18:	3a30      	subs	r2, #48	; 0x30
 8002c1a:	2a09      	cmp	r2, #9
 8002c1c:	d903      	bls.n	8002c26 <_vfiprintf_r+0x1ee>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0c5      	beq.n	8002bae <_vfiprintf_r+0x176>
 8002c22:	9105      	str	r1, [sp, #20]
 8002c24:	e7c3      	b.n	8002bae <_vfiprintf_r+0x176>
 8002c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e7f0      	b.n	8002c12 <_vfiprintf_r+0x1da>
 8002c30:	ab03      	add	r3, sp, #12
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	462a      	mov	r2, r5
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <_vfiprintf_r+0x258>)
 8002c38:	a904      	add	r1, sp, #16
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f3af 8000 	nop.w
 8002c40:	4607      	mov	r7, r0
 8002c42:	1c78      	adds	r0, r7, #1
 8002c44:	d1d6      	bne.n	8002bf4 <_vfiprintf_r+0x1bc>
 8002c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c48:	07d9      	lsls	r1, r3, #31
 8002c4a:	d405      	bmi.n	8002c58 <_vfiprintf_r+0x220>
 8002c4c:	89ab      	ldrh	r3, [r5, #12]
 8002c4e:	059a      	lsls	r2, r3, #22
 8002c50:	d402      	bmi.n	8002c58 <_vfiprintf_r+0x220>
 8002c52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c54:	f000 fc45 	bl	80034e2 <__retarget_lock_release_recursive>
 8002c58:	89ab      	ldrh	r3, [r5, #12]
 8002c5a:	065b      	lsls	r3, r3, #25
 8002c5c:	f53f af12 	bmi.w	8002a84 <_vfiprintf_r+0x4c>
 8002c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c62:	e711      	b.n	8002a88 <_vfiprintf_r+0x50>
 8002c64:	ab03      	add	r3, sp, #12
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	462a      	mov	r2, r5
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <_vfiprintf_r+0x258>)
 8002c6c:	a904      	add	r1, sp, #16
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f000 f880 	bl	8002d74 <_printf_i>
 8002c74:	e7e4      	b.n	8002c40 <_vfiprintf_r+0x208>
 8002c76:	bf00      	nop
 8002c78:	080038f0 	.word	0x080038f0
 8002c7c:	08003910 	.word	0x08003910
 8002c80:	080038d0 	.word	0x080038d0
 8002c84:	0800389a 	.word	0x0800389a
 8002c88:	080038a4 	.word	0x080038a4
 8002c8c:	00000000 	.word	0x00000000
 8002c90:	08002a13 	.word	0x08002a13
 8002c94:	080038a0 	.word	0x080038a0

08002c98 <_printf_common>:
 8002c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c9c:	4616      	mov	r6, r2
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	688a      	ldr	r2, [r1, #8]
 8002ca2:	690b      	ldr	r3, [r1, #16]
 8002ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bfb8      	it	lt
 8002cac:	4613      	movlt	r3, r2
 8002cae:	6033      	str	r3, [r6, #0]
 8002cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cb4:	4607      	mov	r7, r0
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	b10a      	cbz	r2, 8002cbe <_printf_common+0x26>
 8002cba:	3301      	adds	r3, #1
 8002cbc:	6033      	str	r3, [r6, #0]
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	0699      	lsls	r1, r3, #26
 8002cc2:	bf42      	ittt	mi
 8002cc4:	6833      	ldrmi	r3, [r6, #0]
 8002cc6:	3302      	addmi	r3, #2
 8002cc8:	6033      	strmi	r3, [r6, #0]
 8002cca:	6825      	ldr	r5, [r4, #0]
 8002ccc:	f015 0506 	ands.w	r5, r5, #6
 8002cd0:	d106      	bne.n	8002ce0 <_printf_common+0x48>
 8002cd2:	f104 0a19 	add.w	sl, r4, #25
 8002cd6:	68e3      	ldr	r3, [r4, #12]
 8002cd8:	6832      	ldr	r2, [r6, #0]
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	42ab      	cmp	r3, r5
 8002cde:	dc26      	bgt.n	8002d2e <_printf_common+0x96>
 8002ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ce4:	1e13      	subs	r3, r2, #0
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	bf18      	it	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	0692      	lsls	r2, r2, #26
 8002cee:	d42b      	bmi.n	8002d48 <_printf_common+0xb0>
 8002cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4638      	mov	r0, r7
 8002cf8:	47c0      	blx	r8
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d01e      	beq.n	8002d3c <_printf_common+0xa4>
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	68e5      	ldr	r5, [r4, #12]
 8002d02:	6832      	ldr	r2, [r6, #0]
 8002d04:	f003 0306 	and.w	r3, r3, #6
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	bf08      	it	eq
 8002d0c:	1aad      	subeq	r5, r5, r2
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	bf0c      	ite	eq
 8002d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d18:	2500      	movne	r5, #0
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	bfc4      	itt	gt
 8002d1e:	1a9b      	subgt	r3, r3, r2
 8002d20:	18ed      	addgt	r5, r5, r3
 8002d22:	2600      	movs	r6, #0
 8002d24:	341a      	adds	r4, #26
 8002d26:	42b5      	cmp	r5, r6
 8002d28:	d11a      	bne.n	8002d60 <_printf_common+0xc8>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e008      	b.n	8002d40 <_printf_common+0xa8>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4652      	mov	r2, sl
 8002d32:	4649      	mov	r1, r9
 8002d34:	4638      	mov	r0, r7
 8002d36:	47c0      	blx	r8
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d103      	bne.n	8002d44 <_printf_common+0xac>
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d44:	3501      	adds	r5, #1
 8002d46:	e7c6      	b.n	8002cd6 <_printf_common+0x3e>
 8002d48:	18e1      	adds	r1, r4, r3
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	2030      	movs	r0, #48	; 0x30
 8002d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d52:	4422      	add	r2, r4
 8002d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	e7c7      	b.n	8002cf0 <_printf_common+0x58>
 8002d60:	2301      	movs	r3, #1
 8002d62:	4622      	mov	r2, r4
 8002d64:	4649      	mov	r1, r9
 8002d66:	4638      	mov	r0, r7
 8002d68:	47c0      	blx	r8
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	d0e6      	beq.n	8002d3c <_printf_common+0xa4>
 8002d6e:	3601      	adds	r6, #1
 8002d70:	e7d9      	b.n	8002d26 <_printf_common+0x8e>
	...

08002d74 <_printf_i>:
 8002d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d78:	460c      	mov	r4, r1
 8002d7a:	4691      	mov	r9, r2
 8002d7c:	7e27      	ldrb	r7, [r4, #24]
 8002d7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d80:	2f78      	cmp	r7, #120	; 0x78
 8002d82:	4680      	mov	r8, r0
 8002d84:	469a      	mov	sl, r3
 8002d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d8a:	d807      	bhi.n	8002d9c <_printf_i+0x28>
 8002d8c:	2f62      	cmp	r7, #98	; 0x62
 8002d8e:	d80a      	bhi.n	8002da6 <_printf_i+0x32>
 8002d90:	2f00      	cmp	r7, #0
 8002d92:	f000 80d8 	beq.w	8002f46 <_printf_i+0x1d2>
 8002d96:	2f58      	cmp	r7, #88	; 0x58
 8002d98:	f000 80a3 	beq.w	8002ee2 <_printf_i+0x16e>
 8002d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002da4:	e03a      	b.n	8002e1c <_printf_i+0xa8>
 8002da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002daa:	2b15      	cmp	r3, #21
 8002dac:	d8f6      	bhi.n	8002d9c <_printf_i+0x28>
 8002dae:	a001      	add	r0, pc, #4	; (adr r0, 8002db4 <_printf_i+0x40>)
 8002db0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002db4:	08002e0d 	.word	0x08002e0d
 8002db8:	08002e21 	.word	0x08002e21
 8002dbc:	08002d9d 	.word	0x08002d9d
 8002dc0:	08002d9d 	.word	0x08002d9d
 8002dc4:	08002d9d 	.word	0x08002d9d
 8002dc8:	08002d9d 	.word	0x08002d9d
 8002dcc:	08002e21 	.word	0x08002e21
 8002dd0:	08002d9d 	.word	0x08002d9d
 8002dd4:	08002d9d 	.word	0x08002d9d
 8002dd8:	08002d9d 	.word	0x08002d9d
 8002ddc:	08002d9d 	.word	0x08002d9d
 8002de0:	08002f2d 	.word	0x08002f2d
 8002de4:	08002e51 	.word	0x08002e51
 8002de8:	08002f0f 	.word	0x08002f0f
 8002dec:	08002d9d 	.word	0x08002d9d
 8002df0:	08002d9d 	.word	0x08002d9d
 8002df4:	08002f4f 	.word	0x08002f4f
 8002df8:	08002d9d 	.word	0x08002d9d
 8002dfc:	08002e51 	.word	0x08002e51
 8002e00:	08002d9d 	.word	0x08002d9d
 8002e04:	08002d9d 	.word	0x08002d9d
 8002e08:	08002f17 	.word	0x08002f17
 8002e0c:	680b      	ldr	r3, [r1, #0]
 8002e0e:	1d1a      	adds	r2, r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	600a      	str	r2, [r1, #0]
 8002e14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0a3      	b.n	8002f68 <_printf_i+0x1f4>
 8002e20:	6825      	ldr	r5, [r4, #0]
 8002e22:	6808      	ldr	r0, [r1, #0]
 8002e24:	062e      	lsls	r6, r5, #24
 8002e26:	f100 0304 	add.w	r3, r0, #4
 8002e2a:	d50a      	bpl.n	8002e42 <_printf_i+0xce>
 8002e2c:	6805      	ldr	r5, [r0, #0]
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	2d00      	cmp	r5, #0
 8002e32:	da03      	bge.n	8002e3c <_printf_i+0xc8>
 8002e34:	232d      	movs	r3, #45	; 0x2d
 8002e36:	426d      	negs	r5, r5
 8002e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e3c:	485e      	ldr	r0, [pc, #376]	; (8002fb8 <_printf_i+0x244>)
 8002e3e:	230a      	movs	r3, #10
 8002e40:	e019      	b.n	8002e76 <_printf_i+0x102>
 8002e42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e46:	6805      	ldr	r5, [r0, #0]
 8002e48:	600b      	str	r3, [r1, #0]
 8002e4a:	bf18      	it	ne
 8002e4c:	b22d      	sxthne	r5, r5
 8002e4e:	e7ef      	b.n	8002e30 <_printf_i+0xbc>
 8002e50:	680b      	ldr	r3, [r1, #0]
 8002e52:	6825      	ldr	r5, [r4, #0]
 8002e54:	1d18      	adds	r0, r3, #4
 8002e56:	6008      	str	r0, [r1, #0]
 8002e58:	0628      	lsls	r0, r5, #24
 8002e5a:	d501      	bpl.n	8002e60 <_printf_i+0xec>
 8002e5c:	681d      	ldr	r5, [r3, #0]
 8002e5e:	e002      	b.n	8002e66 <_printf_i+0xf2>
 8002e60:	0669      	lsls	r1, r5, #25
 8002e62:	d5fb      	bpl.n	8002e5c <_printf_i+0xe8>
 8002e64:	881d      	ldrh	r5, [r3, #0]
 8002e66:	4854      	ldr	r0, [pc, #336]	; (8002fb8 <_printf_i+0x244>)
 8002e68:	2f6f      	cmp	r7, #111	; 0x6f
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2308      	moveq	r3, #8
 8002e6e:	230a      	movne	r3, #10
 8002e70:	2100      	movs	r1, #0
 8002e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e76:	6866      	ldr	r6, [r4, #4]
 8002e78:	60a6      	str	r6, [r4, #8]
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	bfa2      	ittt	ge
 8002e7e:	6821      	ldrge	r1, [r4, #0]
 8002e80:	f021 0104 	bicge.w	r1, r1, #4
 8002e84:	6021      	strge	r1, [r4, #0]
 8002e86:	b90d      	cbnz	r5, 8002e8c <_printf_i+0x118>
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	d04d      	beq.n	8002f28 <_printf_i+0x1b4>
 8002e8c:	4616      	mov	r6, r2
 8002e8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e92:	fb03 5711 	mls	r7, r3, r1, r5
 8002e96:	5dc7      	ldrb	r7, [r0, r7]
 8002e98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e9c:	462f      	mov	r7, r5
 8002e9e:	42bb      	cmp	r3, r7
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	d9f4      	bls.n	8002e8e <_printf_i+0x11a>
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d10b      	bne.n	8002ec0 <_printf_i+0x14c>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	07df      	lsls	r7, r3, #31
 8002eac:	d508      	bpl.n	8002ec0 <_printf_i+0x14c>
 8002eae:	6923      	ldr	r3, [r4, #16]
 8002eb0:	6861      	ldr	r1, [r4, #4]
 8002eb2:	4299      	cmp	r1, r3
 8002eb4:	bfde      	ittt	le
 8002eb6:	2330      	movle	r3, #48	; 0x30
 8002eb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ebc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002ec0:	1b92      	subs	r2, r2, r6
 8002ec2:	6122      	str	r2, [r4, #16]
 8002ec4:	f8cd a000 	str.w	sl, [sp]
 8002ec8:	464b      	mov	r3, r9
 8002eca:	aa03      	add	r2, sp, #12
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4640      	mov	r0, r8
 8002ed0:	f7ff fee2 	bl	8002c98 <_printf_common>
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d14c      	bne.n	8002f72 <_printf_i+0x1fe>
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	b004      	add	sp, #16
 8002ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee2:	4835      	ldr	r0, [pc, #212]	; (8002fb8 <_printf_i+0x244>)
 8002ee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	680e      	ldr	r6, [r1, #0]
 8002eec:	061f      	lsls	r7, r3, #24
 8002eee:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ef2:	600e      	str	r6, [r1, #0]
 8002ef4:	d514      	bpl.n	8002f20 <_printf_i+0x1ac>
 8002ef6:	07d9      	lsls	r1, r3, #31
 8002ef8:	bf44      	itt	mi
 8002efa:	f043 0320 	orrmi.w	r3, r3, #32
 8002efe:	6023      	strmi	r3, [r4, #0]
 8002f00:	b91d      	cbnz	r5, 8002f0a <_printf_i+0x196>
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	f023 0320 	bic.w	r3, r3, #32
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	e7b0      	b.n	8002e70 <_printf_i+0xfc>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	2378      	movs	r3, #120	; 0x78
 8002f18:	4828      	ldr	r0, [pc, #160]	; (8002fbc <_printf_i+0x248>)
 8002f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f1e:	e7e3      	b.n	8002ee8 <_printf_i+0x174>
 8002f20:	065e      	lsls	r6, r3, #25
 8002f22:	bf48      	it	mi
 8002f24:	b2ad      	uxthmi	r5, r5
 8002f26:	e7e6      	b.n	8002ef6 <_printf_i+0x182>
 8002f28:	4616      	mov	r6, r2
 8002f2a:	e7bb      	b.n	8002ea4 <_printf_i+0x130>
 8002f2c:	680b      	ldr	r3, [r1, #0]
 8002f2e:	6826      	ldr	r6, [r4, #0]
 8002f30:	6960      	ldr	r0, [r4, #20]
 8002f32:	1d1d      	adds	r5, r3, #4
 8002f34:	600d      	str	r5, [r1, #0]
 8002f36:	0635      	lsls	r5, r6, #24
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	d501      	bpl.n	8002f40 <_printf_i+0x1cc>
 8002f3c:	6018      	str	r0, [r3, #0]
 8002f3e:	e002      	b.n	8002f46 <_printf_i+0x1d2>
 8002f40:	0671      	lsls	r1, r6, #25
 8002f42:	d5fb      	bpl.n	8002f3c <_printf_i+0x1c8>
 8002f44:	8018      	strh	r0, [r3, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	6123      	str	r3, [r4, #16]
 8002f4a:	4616      	mov	r6, r2
 8002f4c:	e7ba      	b.n	8002ec4 <_printf_i+0x150>
 8002f4e:	680b      	ldr	r3, [r1, #0]
 8002f50:	1d1a      	adds	r2, r3, #4
 8002f52:	600a      	str	r2, [r1, #0]
 8002f54:	681e      	ldr	r6, [r3, #0]
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f7fd f940 	bl	80001e0 <memchr>
 8002f60:	b108      	cbz	r0, 8002f66 <_printf_i+0x1f2>
 8002f62:	1b80      	subs	r0, r0, r6
 8002f64:	6060      	str	r0, [r4, #4]
 8002f66:	6863      	ldr	r3, [r4, #4]
 8002f68:	6123      	str	r3, [r4, #16]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f70:	e7a8      	b.n	8002ec4 <_printf_i+0x150>
 8002f72:	6923      	ldr	r3, [r4, #16]
 8002f74:	4632      	mov	r2, r6
 8002f76:	4649      	mov	r1, r9
 8002f78:	4640      	mov	r0, r8
 8002f7a:	47d0      	blx	sl
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d0ab      	beq.n	8002ed8 <_printf_i+0x164>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	079b      	lsls	r3, r3, #30
 8002f84:	d413      	bmi.n	8002fae <_printf_i+0x23a>
 8002f86:	68e0      	ldr	r0, [r4, #12]
 8002f88:	9b03      	ldr	r3, [sp, #12]
 8002f8a:	4298      	cmp	r0, r3
 8002f8c:	bfb8      	it	lt
 8002f8e:	4618      	movlt	r0, r3
 8002f90:	e7a4      	b.n	8002edc <_printf_i+0x168>
 8002f92:	2301      	movs	r3, #1
 8002f94:	4632      	mov	r2, r6
 8002f96:	4649      	mov	r1, r9
 8002f98:	4640      	mov	r0, r8
 8002f9a:	47d0      	blx	sl
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d09b      	beq.n	8002ed8 <_printf_i+0x164>
 8002fa0:	3501      	adds	r5, #1
 8002fa2:	68e3      	ldr	r3, [r4, #12]
 8002fa4:	9903      	ldr	r1, [sp, #12]
 8002fa6:	1a5b      	subs	r3, r3, r1
 8002fa8:	42ab      	cmp	r3, r5
 8002faa:	dcf2      	bgt.n	8002f92 <_printf_i+0x21e>
 8002fac:	e7eb      	b.n	8002f86 <_printf_i+0x212>
 8002fae:	2500      	movs	r5, #0
 8002fb0:	f104 0619 	add.w	r6, r4, #25
 8002fb4:	e7f5      	b.n	8002fa2 <_printf_i+0x22e>
 8002fb6:	bf00      	nop
 8002fb8:	080038ab 	.word	0x080038ab
 8002fbc:	080038bc 	.word	0x080038bc

08002fc0 <_sbrk_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	4d06      	ldr	r5, [pc, #24]	; (8002fdc <_sbrk_r+0x1c>)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	4608      	mov	r0, r1
 8002fca:	602b      	str	r3, [r5, #0]
 8002fcc:	f7fe fa58 	bl	8001480 <_sbrk>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d102      	bne.n	8002fda <_sbrk_r+0x1a>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	b103      	cbz	r3, 8002fda <_sbrk_r+0x1a>
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	2000009c 	.word	0x2000009c

08002fe0 <__swbuf_r>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	460e      	mov	r6, r1
 8002fe4:	4614      	mov	r4, r2
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	b118      	cbz	r0, 8002ff2 <__swbuf_r+0x12>
 8002fea:	6983      	ldr	r3, [r0, #24]
 8002fec:	b90b      	cbnz	r3, 8002ff2 <__swbuf_r+0x12>
 8002fee:	f000 f9d9 	bl	80033a4 <__sinit>
 8002ff2:	4b21      	ldr	r3, [pc, #132]	; (8003078 <__swbuf_r+0x98>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d12b      	bne.n	8003050 <__swbuf_r+0x70>
 8002ff8:	686c      	ldr	r4, [r5, #4]
 8002ffa:	69a3      	ldr	r3, [r4, #24]
 8002ffc:	60a3      	str	r3, [r4, #8]
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	071a      	lsls	r2, r3, #28
 8003002:	d52f      	bpl.n	8003064 <__swbuf_r+0x84>
 8003004:	6923      	ldr	r3, [r4, #16]
 8003006:	b36b      	cbz	r3, 8003064 <__swbuf_r+0x84>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	6820      	ldr	r0, [r4, #0]
 800300c:	1ac0      	subs	r0, r0, r3
 800300e:	6963      	ldr	r3, [r4, #20]
 8003010:	b2f6      	uxtb	r6, r6
 8003012:	4283      	cmp	r3, r0
 8003014:	4637      	mov	r7, r6
 8003016:	dc04      	bgt.n	8003022 <__swbuf_r+0x42>
 8003018:	4621      	mov	r1, r4
 800301a:	4628      	mov	r0, r5
 800301c:	f000 f92e 	bl	800327c <_fflush_r>
 8003020:	bb30      	cbnz	r0, 8003070 <__swbuf_r+0x90>
 8003022:	68a3      	ldr	r3, [r4, #8]
 8003024:	3b01      	subs	r3, #1
 8003026:	60a3      	str	r3, [r4, #8]
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	6022      	str	r2, [r4, #0]
 800302e:	701e      	strb	r6, [r3, #0]
 8003030:	6963      	ldr	r3, [r4, #20]
 8003032:	3001      	adds	r0, #1
 8003034:	4283      	cmp	r3, r0
 8003036:	d004      	beq.n	8003042 <__swbuf_r+0x62>
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	07db      	lsls	r3, r3, #31
 800303c:	d506      	bpl.n	800304c <__swbuf_r+0x6c>
 800303e:	2e0a      	cmp	r6, #10
 8003040:	d104      	bne.n	800304c <__swbuf_r+0x6c>
 8003042:	4621      	mov	r1, r4
 8003044:	4628      	mov	r0, r5
 8003046:	f000 f919 	bl	800327c <_fflush_r>
 800304a:	b988      	cbnz	r0, 8003070 <__swbuf_r+0x90>
 800304c:	4638      	mov	r0, r7
 800304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <__swbuf_r+0x9c>)
 8003052:	429c      	cmp	r4, r3
 8003054:	d101      	bne.n	800305a <__swbuf_r+0x7a>
 8003056:	68ac      	ldr	r4, [r5, #8]
 8003058:	e7cf      	b.n	8002ffa <__swbuf_r+0x1a>
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <__swbuf_r+0xa0>)
 800305c:	429c      	cmp	r4, r3
 800305e:	bf08      	it	eq
 8003060:	68ec      	ldreq	r4, [r5, #12]
 8003062:	e7ca      	b.n	8002ffa <__swbuf_r+0x1a>
 8003064:	4621      	mov	r1, r4
 8003066:	4628      	mov	r0, r5
 8003068:	f000 f80c 	bl	8003084 <__swsetup_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	d0cb      	beq.n	8003008 <__swbuf_r+0x28>
 8003070:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003074:	e7ea      	b.n	800304c <__swbuf_r+0x6c>
 8003076:	bf00      	nop
 8003078:	080038f0 	.word	0x080038f0
 800307c:	08003910 	.word	0x08003910
 8003080:	080038d0 	.word	0x080038d0

08003084 <__swsetup_r>:
 8003084:	4b32      	ldr	r3, [pc, #200]	; (8003150 <__swsetup_r+0xcc>)
 8003086:	b570      	push	{r4, r5, r6, lr}
 8003088:	681d      	ldr	r5, [r3, #0]
 800308a:	4606      	mov	r6, r0
 800308c:	460c      	mov	r4, r1
 800308e:	b125      	cbz	r5, 800309a <__swsetup_r+0x16>
 8003090:	69ab      	ldr	r3, [r5, #24]
 8003092:	b913      	cbnz	r3, 800309a <__swsetup_r+0x16>
 8003094:	4628      	mov	r0, r5
 8003096:	f000 f985 	bl	80033a4 <__sinit>
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <__swsetup_r+0xd0>)
 800309c:	429c      	cmp	r4, r3
 800309e:	d10f      	bne.n	80030c0 <__swsetup_r+0x3c>
 80030a0:	686c      	ldr	r4, [r5, #4]
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030a8:	0719      	lsls	r1, r3, #28
 80030aa:	d42c      	bmi.n	8003106 <__swsetup_r+0x82>
 80030ac:	06dd      	lsls	r5, r3, #27
 80030ae:	d411      	bmi.n	80030d4 <__swsetup_r+0x50>
 80030b0:	2309      	movs	r3, #9
 80030b2:	6033      	str	r3, [r6, #0]
 80030b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030be:	e03e      	b.n	800313e <__swsetup_r+0xba>
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <__swsetup_r+0xd4>)
 80030c2:	429c      	cmp	r4, r3
 80030c4:	d101      	bne.n	80030ca <__swsetup_r+0x46>
 80030c6:	68ac      	ldr	r4, [r5, #8]
 80030c8:	e7eb      	b.n	80030a2 <__swsetup_r+0x1e>
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <__swsetup_r+0xd8>)
 80030cc:	429c      	cmp	r4, r3
 80030ce:	bf08      	it	eq
 80030d0:	68ec      	ldreq	r4, [r5, #12]
 80030d2:	e7e6      	b.n	80030a2 <__swsetup_r+0x1e>
 80030d4:	0758      	lsls	r0, r3, #29
 80030d6:	d512      	bpl.n	80030fe <__swsetup_r+0x7a>
 80030d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030da:	b141      	cbz	r1, 80030ee <__swsetup_r+0x6a>
 80030dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030e0:	4299      	cmp	r1, r3
 80030e2:	d002      	beq.n	80030ea <__swsetup_r+0x66>
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7ff fbd3 	bl	8002890 <_free_r>
 80030ea:	2300      	movs	r3, #0
 80030ec:	6363      	str	r3, [r4, #52]	; 0x34
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	2300      	movs	r3, #0
 80030f8:	6063      	str	r3, [r4, #4]
 80030fa:	6923      	ldr	r3, [r4, #16]
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	6923      	ldr	r3, [r4, #16]
 8003108:	b94b      	cbnz	r3, 800311e <__swsetup_r+0x9a>
 800310a:	89a3      	ldrh	r3, [r4, #12]
 800310c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003114:	d003      	beq.n	800311e <__swsetup_r+0x9a>
 8003116:	4621      	mov	r1, r4
 8003118:	4630      	mov	r0, r6
 800311a:	f000 fa07 	bl	800352c <__smakebuf_r>
 800311e:	89a0      	ldrh	r0, [r4, #12]
 8003120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003124:	f010 0301 	ands.w	r3, r0, #1
 8003128:	d00a      	beq.n	8003140 <__swsetup_r+0xbc>
 800312a:	2300      	movs	r3, #0
 800312c:	60a3      	str	r3, [r4, #8]
 800312e:	6963      	ldr	r3, [r4, #20]
 8003130:	425b      	negs	r3, r3
 8003132:	61a3      	str	r3, [r4, #24]
 8003134:	6923      	ldr	r3, [r4, #16]
 8003136:	b943      	cbnz	r3, 800314a <__swsetup_r+0xc6>
 8003138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800313c:	d1ba      	bne.n	80030b4 <__swsetup_r+0x30>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	0781      	lsls	r1, r0, #30
 8003142:	bf58      	it	pl
 8003144:	6963      	ldrpl	r3, [r4, #20]
 8003146:	60a3      	str	r3, [r4, #8]
 8003148:	e7f4      	b.n	8003134 <__swsetup_r+0xb0>
 800314a:	2000      	movs	r0, #0
 800314c:	e7f7      	b.n	800313e <__swsetup_r+0xba>
 800314e:	bf00      	nop
 8003150:	20000004 	.word	0x20000004
 8003154:	080038f0 	.word	0x080038f0
 8003158:	08003910 	.word	0x08003910
 800315c:	080038d0 	.word	0x080038d0

08003160 <abort>:
 8003160:	b508      	push	{r3, lr}
 8003162:	2006      	movs	r0, #6
 8003164:	f000 fa56 	bl	8003614 <raise>
 8003168:	2001      	movs	r0, #1
 800316a:	f7fe f911 	bl	8001390 <_exit>
	...

08003170 <__sflush_r>:
 8003170:	898a      	ldrh	r2, [r1, #12]
 8003172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003176:	4605      	mov	r5, r0
 8003178:	0710      	lsls	r0, r2, #28
 800317a:	460c      	mov	r4, r1
 800317c:	d458      	bmi.n	8003230 <__sflush_r+0xc0>
 800317e:	684b      	ldr	r3, [r1, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	dc05      	bgt.n	8003190 <__sflush_r+0x20>
 8003184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	dc02      	bgt.n	8003190 <__sflush_r+0x20>
 800318a:	2000      	movs	r0, #0
 800318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003192:	2e00      	cmp	r6, #0
 8003194:	d0f9      	beq.n	800318a <__sflush_r+0x1a>
 8003196:	2300      	movs	r3, #0
 8003198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800319c:	682f      	ldr	r7, [r5, #0]
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	d032      	beq.n	8003208 <__sflush_r+0x98>
 80031a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	075a      	lsls	r2, r3, #29
 80031a8:	d505      	bpl.n	80031b6 <__sflush_r+0x46>
 80031aa:	6863      	ldr	r3, [r4, #4]
 80031ac:	1ac0      	subs	r0, r0, r3
 80031ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031b0:	b10b      	cbz	r3, 80031b6 <__sflush_r+0x46>
 80031b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b4:	1ac0      	subs	r0, r0, r3
 80031b6:	2300      	movs	r3, #0
 80031b8:	4602      	mov	r2, r0
 80031ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031bc:	6a21      	ldr	r1, [r4, #32]
 80031be:	4628      	mov	r0, r5
 80031c0:	47b0      	blx	r6
 80031c2:	1c43      	adds	r3, r0, #1
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	d106      	bne.n	80031d6 <__sflush_r+0x66>
 80031c8:	6829      	ldr	r1, [r5, #0]
 80031ca:	291d      	cmp	r1, #29
 80031cc:	d82c      	bhi.n	8003228 <__sflush_r+0xb8>
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <__sflush_r+0x108>)
 80031d0:	40ca      	lsrs	r2, r1
 80031d2:	07d6      	lsls	r6, r2, #31
 80031d4:	d528      	bpl.n	8003228 <__sflush_r+0xb8>
 80031d6:	2200      	movs	r2, #0
 80031d8:	6062      	str	r2, [r4, #4]
 80031da:	04d9      	lsls	r1, r3, #19
 80031dc:	6922      	ldr	r2, [r4, #16]
 80031de:	6022      	str	r2, [r4, #0]
 80031e0:	d504      	bpl.n	80031ec <__sflush_r+0x7c>
 80031e2:	1c42      	adds	r2, r0, #1
 80031e4:	d101      	bne.n	80031ea <__sflush_r+0x7a>
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	b903      	cbnz	r3, 80031ec <__sflush_r+0x7c>
 80031ea:	6560      	str	r0, [r4, #84]	; 0x54
 80031ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031ee:	602f      	str	r7, [r5, #0]
 80031f0:	2900      	cmp	r1, #0
 80031f2:	d0ca      	beq.n	800318a <__sflush_r+0x1a>
 80031f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031f8:	4299      	cmp	r1, r3
 80031fa:	d002      	beq.n	8003202 <__sflush_r+0x92>
 80031fc:	4628      	mov	r0, r5
 80031fe:	f7ff fb47 	bl	8002890 <_free_r>
 8003202:	2000      	movs	r0, #0
 8003204:	6360      	str	r0, [r4, #52]	; 0x34
 8003206:	e7c1      	b.n	800318c <__sflush_r+0x1c>
 8003208:	6a21      	ldr	r1, [r4, #32]
 800320a:	2301      	movs	r3, #1
 800320c:	4628      	mov	r0, r5
 800320e:	47b0      	blx	r6
 8003210:	1c41      	adds	r1, r0, #1
 8003212:	d1c7      	bne.n	80031a4 <__sflush_r+0x34>
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0c4      	beq.n	80031a4 <__sflush_r+0x34>
 800321a:	2b1d      	cmp	r3, #29
 800321c:	d001      	beq.n	8003222 <__sflush_r+0xb2>
 800321e:	2b16      	cmp	r3, #22
 8003220:	d101      	bne.n	8003226 <__sflush_r+0xb6>
 8003222:	602f      	str	r7, [r5, #0]
 8003224:	e7b1      	b.n	800318a <__sflush_r+0x1a>
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	e7ad      	b.n	800318c <__sflush_r+0x1c>
 8003230:	690f      	ldr	r7, [r1, #16]
 8003232:	2f00      	cmp	r7, #0
 8003234:	d0a9      	beq.n	800318a <__sflush_r+0x1a>
 8003236:	0793      	lsls	r3, r2, #30
 8003238:	680e      	ldr	r6, [r1, #0]
 800323a:	bf08      	it	eq
 800323c:	694b      	ldreq	r3, [r1, #20]
 800323e:	600f      	str	r7, [r1, #0]
 8003240:	bf18      	it	ne
 8003242:	2300      	movne	r3, #0
 8003244:	eba6 0807 	sub.w	r8, r6, r7
 8003248:	608b      	str	r3, [r1, #8]
 800324a:	f1b8 0f00 	cmp.w	r8, #0
 800324e:	dd9c      	ble.n	800318a <__sflush_r+0x1a>
 8003250:	6a21      	ldr	r1, [r4, #32]
 8003252:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003254:	4643      	mov	r3, r8
 8003256:	463a      	mov	r2, r7
 8003258:	4628      	mov	r0, r5
 800325a:	47b0      	blx	r6
 800325c:	2800      	cmp	r0, #0
 800325e:	dc06      	bgt.n	800326e <__sflush_r+0xfe>
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003266:	81a3      	strh	r3, [r4, #12]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800326c:	e78e      	b.n	800318c <__sflush_r+0x1c>
 800326e:	4407      	add	r7, r0
 8003270:	eba8 0800 	sub.w	r8, r8, r0
 8003274:	e7e9      	b.n	800324a <__sflush_r+0xda>
 8003276:	bf00      	nop
 8003278:	20400001 	.word	0x20400001

0800327c <_fflush_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	690b      	ldr	r3, [r1, #16]
 8003280:	4605      	mov	r5, r0
 8003282:	460c      	mov	r4, r1
 8003284:	b913      	cbnz	r3, 800328c <_fflush_r+0x10>
 8003286:	2500      	movs	r5, #0
 8003288:	4628      	mov	r0, r5
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	b118      	cbz	r0, 8003296 <_fflush_r+0x1a>
 800328e:	6983      	ldr	r3, [r0, #24]
 8003290:	b90b      	cbnz	r3, 8003296 <_fflush_r+0x1a>
 8003292:	f000 f887 	bl	80033a4 <__sinit>
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <_fflush_r+0x6c>)
 8003298:	429c      	cmp	r4, r3
 800329a:	d11b      	bne.n	80032d4 <_fflush_r+0x58>
 800329c:	686c      	ldr	r4, [r5, #4]
 800329e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ef      	beq.n	8003286 <_fflush_r+0xa>
 80032a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032a8:	07d0      	lsls	r0, r2, #31
 80032aa:	d404      	bmi.n	80032b6 <_fflush_r+0x3a>
 80032ac:	0599      	lsls	r1, r3, #22
 80032ae:	d402      	bmi.n	80032b6 <_fflush_r+0x3a>
 80032b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032b2:	f000 f915 	bl	80034e0 <__retarget_lock_acquire_recursive>
 80032b6:	4628      	mov	r0, r5
 80032b8:	4621      	mov	r1, r4
 80032ba:	f7ff ff59 	bl	8003170 <__sflush_r>
 80032be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032c0:	07da      	lsls	r2, r3, #31
 80032c2:	4605      	mov	r5, r0
 80032c4:	d4e0      	bmi.n	8003288 <_fflush_r+0xc>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	059b      	lsls	r3, r3, #22
 80032ca:	d4dd      	bmi.n	8003288 <_fflush_r+0xc>
 80032cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ce:	f000 f908 	bl	80034e2 <__retarget_lock_release_recursive>
 80032d2:	e7d9      	b.n	8003288 <_fflush_r+0xc>
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <_fflush_r+0x70>)
 80032d6:	429c      	cmp	r4, r3
 80032d8:	d101      	bne.n	80032de <_fflush_r+0x62>
 80032da:	68ac      	ldr	r4, [r5, #8]
 80032dc:	e7df      	b.n	800329e <_fflush_r+0x22>
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <_fflush_r+0x74>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	bf08      	it	eq
 80032e4:	68ec      	ldreq	r4, [r5, #12]
 80032e6:	e7da      	b.n	800329e <_fflush_r+0x22>
 80032e8:	080038f0 	.word	0x080038f0
 80032ec:	08003910 	.word	0x08003910
 80032f0:	080038d0 	.word	0x080038d0

080032f4 <std>:
 80032f4:	2300      	movs	r3, #0
 80032f6:	b510      	push	{r4, lr}
 80032f8:	4604      	mov	r4, r0
 80032fa:	e9c0 3300 	strd	r3, r3, [r0]
 80032fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003302:	6083      	str	r3, [r0, #8]
 8003304:	8181      	strh	r1, [r0, #12]
 8003306:	6643      	str	r3, [r0, #100]	; 0x64
 8003308:	81c2      	strh	r2, [r0, #14]
 800330a:	6183      	str	r3, [r0, #24]
 800330c:	4619      	mov	r1, r3
 800330e:	2208      	movs	r2, #8
 8003310:	305c      	adds	r0, #92	; 0x5c
 8003312:	f7ff fa3d 	bl	8002790 <memset>
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <std+0x38>)
 8003318:	6263      	str	r3, [r4, #36]	; 0x24
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <std+0x3c>)
 800331c:	62a3      	str	r3, [r4, #40]	; 0x28
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <std+0x40>)
 8003320:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <std+0x44>)
 8003324:	6224      	str	r4, [r4, #32]
 8003326:	6323      	str	r3, [r4, #48]	; 0x30
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	0800364d 	.word	0x0800364d
 8003330:	0800366f 	.word	0x0800366f
 8003334:	080036a7 	.word	0x080036a7
 8003338:	080036cb 	.word	0x080036cb

0800333c <_cleanup_r>:
 800333c:	4901      	ldr	r1, [pc, #4]	; (8003344 <_cleanup_r+0x8>)
 800333e:	f000 b8af 	b.w	80034a0 <_fwalk_reent>
 8003342:	bf00      	nop
 8003344:	0800327d 	.word	0x0800327d

08003348 <__sfmoreglue>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	1e4a      	subs	r2, r1, #1
 800334c:	2568      	movs	r5, #104	; 0x68
 800334e:	4355      	muls	r5, r2
 8003350:	460e      	mov	r6, r1
 8003352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003356:	f7ff faeb 	bl	8002930 <_malloc_r>
 800335a:	4604      	mov	r4, r0
 800335c:	b140      	cbz	r0, 8003370 <__sfmoreglue+0x28>
 800335e:	2100      	movs	r1, #0
 8003360:	e9c0 1600 	strd	r1, r6, [r0]
 8003364:	300c      	adds	r0, #12
 8003366:	60a0      	str	r0, [r4, #8]
 8003368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800336c:	f7ff fa10 	bl	8002790 <memset>
 8003370:	4620      	mov	r0, r4
 8003372:	bd70      	pop	{r4, r5, r6, pc}

08003374 <__sfp_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sfp_lock_acquire+0x8>)
 8003376:	f000 b8b3 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	20000098 	.word	0x20000098

08003380 <__sfp_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sfp_lock_release+0x8>)
 8003382:	f000 b8ae 	b.w	80034e2 <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	20000098 	.word	0x20000098

0800338c <__sinit_lock_acquire>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__sinit_lock_acquire+0x8>)
 800338e:	f000 b8a7 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 8003392:	bf00      	nop
 8003394:	20000093 	.word	0x20000093

08003398 <__sinit_lock_release>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__sinit_lock_release+0x8>)
 800339a:	f000 b8a2 	b.w	80034e2 <__retarget_lock_release_recursive>
 800339e:	bf00      	nop
 80033a0:	20000093 	.word	0x20000093

080033a4 <__sinit>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4604      	mov	r4, r0
 80033a8:	f7ff fff0 	bl	800338c <__sinit_lock_acquire>
 80033ac:	69a3      	ldr	r3, [r4, #24]
 80033ae:	b11b      	cbz	r3, 80033b8 <__sinit+0x14>
 80033b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b4:	f7ff bff0 	b.w	8003398 <__sinit_lock_release>
 80033b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033bc:	6523      	str	r3, [r4, #80]	; 0x50
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <__sinit+0x68>)
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <__sinit+0x6c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80033c6:	42a3      	cmp	r3, r4
 80033c8:	bf04      	itt	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	61a3      	streq	r3, [r4, #24]
 80033ce:	4620      	mov	r0, r4
 80033d0:	f000 f820 	bl	8003414 <__sfp>
 80033d4:	6060      	str	r0, [r4, #4]
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 f81c 	bl	8003414 <__sfp>
 80033dc:	60a0      	str	r0, [r4, #8]
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 f818 	bl	8003414 <__sfp>
 80033e4:	2200      	movs	r2, #0
 80033e6:	60e0      	str	r0, [r4, #12]
 80033e8:	2104      	movs	r1, #4
 80033ea:	6860      	ldr	r0, [r4, #4]
 80033ec:	f7ff ff82 	bl	80032f4 <std>
 80033f0:	68a0      	ldr	r0, [r4, #8]
 80033f2:	2201      	movs	r2, #1
 80033f4:	2109      	movs	r1, #9
 80033f6:	f7ff ff7d 	bl	80032f4 <std>
 80033fa:	68e0      	ldr	r0, [r4, #12]
 80033fc:	2202      	movs	r2, #2
 80033fe:	2112      	movs	r1, #18
 8003400:	f7ff ff78 	bl	80032f4 <std>
 8003404:	2301      	movs	r3, #1
 8003406:	61a3      	str	r3, [r4, #24]
 8003408:	e7d2      	b.n	80033b0 <__sinit+0xc>
 800340a:	bf00      	nop
 800340c:	080037e4 	.word	0x080037e4
 8003410:	0800333d 	.word	0x0800333d

08003414 <__sfp>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	4607      	mov	r7, r0
 8003418:	f7ff ffac 	bl	8003374 <__sfp_lock_acquire>
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <__sfp+0x84>)
 800341e:	681e      	ldr	r6, [r3, #0]
 8003420:	69b3      	ldr	r3, [r6, #24]
 8003422:	b913      	cbnz	r3, 800342a <__sfp+0x16>
 8003424:	4630      	mov	r0, r6
 8003426:	f7ff ffbd 	bl	80033a4 <__sinit>
 800342a:	3648      	adds	r6, #72	; 0x48
 800342c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003430:	3b01      	subs	r3, #1
 8003432:	d503      	bpl.n	800343c <__sfp+0x28>
 8003434:	6833      	ldr	r3, [r6, #0]
 8003436:	b30b      	cbz	r3, 800347c <__sfp+0x68>
 8003438:	6836      	ldr	r6, [r6, #0]
 800343a:	e7f7      	b.n	800342c <__sfp+0x18>
 800343c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003440:	b9d5      	cbnz	r5, 8003478 <__sfp+0x64>
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <__sfp+0x88>)
 8003444:	60e3      	str	r3, [r4, #12]
 8003446:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800344a:	6665      	str	r5, [r4, #100]	; 0x64
 800344c:	f000 f847 	bl	80034de <__retarget_lock_init_recursive>
 8003450:	f7ff ff96 	bl	8003380 <__sfp_lock_release>
 8003454:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003458:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800345c:	6025      	str	r5, [r4, #0]
 800345e:	61a5      	str	r5, [r4, #24]
 8003460:	2208      	movs	r2, #8
 8003462:	4629      	mov	r1, r5
 8003464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003468:	f7ff f992 	bl	8002790 <memset>
 800346c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003474:	4620      	mov	r0, r4
 8003476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003478:	3468      	adds	r4, #104	; 0x68
 800347a:	e7d9      	b.n	8003430 <__sfp+0x1c>
 800347c:	2104      	movs	r1, #4
 800347e:	4638      	mov	r0, r7
 8003480:	f7ff ff62 	bl	8003348 <__sfmoreglue>
 8003484:	4604      	mov	r4, r0
 8003486:	6030      	str	r0, [r6, #0]
 8003488:	2800      	cmp	r0, #0
 800348a:	d1d5      	bne.n	8003438 <__sfp+0x24>
 800348c:	f7ff ff78 	bl	8003380 <__sfp_lock_release>
 8003490:	230c      	movs	r3, #12
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	e7ee      	b.n	8003474 <__sfp+0x60>
 8003496:	bf00      	nop
 8003498:	080037e4 	.word	0x080037e4
 800349c:	ffff0001 	.word	0xffff0001

080034a0 <_fwalk_reent>:
 80034a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a4:	4606      	mov	r6, r0
 80034a6:	4688      	mov	r8, r1
 80034a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034ac:	2700      	movs	r7, #0
 80034ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034b2:	f1b9 0901 	subs.w	r9, r9, #1
 80034b6:	d505      	bpl.n	80034c4 <_fwalk_reent+0x24>
 80034b8:	6824      	ldr	r4, [r4, #0]
 80034ba:	2c00      	cmp	r4, #0
 80034bc:	d1f7      	bne.n	80034ae <_fwalk_reent+0xe>
 80034be:	4638      	mov	r0, r7
 80034c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034c4:	89ab      	ldrh	r3, [r5, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d907      	bls.n	80034da <_fwalk_reent+0x3a>
 80034ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034ce:	3301      	adds	r3, #1
 80034d0:	d003      	beq.n	80034da <_fwalk_reent+0x3a>
 80034d2:	4629      	mov	r1, r5
 80034d4:	4630      	mov	r0, r6
 80034d6:	47c0      	blx	r8
 80034d8:	4307      	orrs	r7, r0
 80034da:	3568      	adds	r5, #104	; 0x68
 80034dc:	e7e9      	b.n	80034b2 <_fwalk_reent+0x12>

080034de <__retarget_lock_init_recursive>:
 80034de:	4770      	bx	lr

080034e0 <__retarget_lock_acquire_recursive>:
 80034e0:	4770      	bx	lr

080034e2 <__retarget_lock_release_recursive>:
 80034e2:	4770      	bx	lr

080034e4 <__swhatbuf_r>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	460e      	mov	r6, r1
 80034e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ec:	2900      	cmp	r1, #0
 80034ee:	b096      	sub	sp, #88	; 0x58
 80034f0:	4614      	mov	r4, r2
 80034f2:	461d      	mov	r5, r3
 80034f4:	da07      	bge.n	8003506 <__swhatbuf_r+0x22>
 80034f6:	2300      	movs	r3, #0
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	89b3      	ldrh	r3, [r6, #12]
 80034fc:	061a      	lsls	r2, r3, #24
 80034fe:	d410      	bmi.n	8003522 <__swhatbuf_r+0x3e>
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003504:	e00e      	b.n	8003524 <__swhatbuf_r+0x40>
 8003506:	466a      	mov	r2, sp
 8003508:	f000 f906 	bl	8003718 <_fstat_r>
 800350c:	2800      	cmp	r0, #0
 800350e:	dbf2      	blt.n	80034f6 <__swhatbuf_r+0x12>
 8003510:	9a01      	ldr	r2, [sp, #4]
 8003512:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003516:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800351a:	425a      	negs	r2, r3
 800351c:	415a      	adcs	r2, r3
 800351e:	602a      	str	r2, [r5, #0]
 8003520:	e7ee      	b.n	8003500 <__swhatbuf_r+0x1c>
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	2000      	movs	r0, #0
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	b016      	add	sp, #88	; 0x58
 800352a:	bd70      	pop	{r4, r5, r6, pc}

0800352c <__smakebuf_r>:
 800352c:	898b      	ldrh	r3, [r1, #12]
 800352e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003530:	079d      	lsls	r5, r3, #30
 8003532:	4606      	mov	r6, r0
 8003534:	460c      	mov	r4, r1
 8003536:	d507      	bpl.n	8003548 <__smakebuf_r+0x1c>
 8003538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	6123      	str	r3, [r4, #16]
 8003540:	2301      	movs	r3, #1
 8003542:	6163      	str	r3, [r4, #20]
 8003544:	b002      	add	sp, #8
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	ab01      	add	r3, sp, #4
 800354a:	466a      	mov	r2, sp
 800354c:	f7ff ffca 	bl	80034e4 <__swhatbuf_r>
 8003550:	9900      	ldr	r1, [sp, #0]
 8003552:	4605      	mov	r5, r0
 8003554:	4630      	mov	r0, r6
 8003556:	f7ff f9eb 	bl	8002930 <_malloc_r>
 800355a:	b948      	cbnz	r0, 8003570 <__smakebuf_r+0x44>
 800355c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003560:	059a      	lsls	r2, r3, #22
 8003562:	d4ef      	bmi.n	8003544 <__smakebuf_r+0x18>
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	81a3      	strh	r3, [r4, #12]
 800356e:	e7e3      	b.n	8003538 <__smakebuf_r+0xc>
 8003570:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <__smakebuf_r+0x7c>)
 8003572:	62b3      	str	r3, [r6, #40]	; 0x28
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	6020      	str	r0, [r4, #0]
 8003578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	9b00      	ldr	r3, [sp, #0]
 8003580:	6163      	str	r3, [r4, #20]
 8003582:	9b01      	ldr	r3, [sp, #4]
 8003584:	6120      	str	r0, [r4, #16]
 8003586:	b15b      	cbz	r3, 80035a0 <__smakebuf_r+0x74>
 8003588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800358c:	4630      	mov	r0, r6
 800358e:	f000 f8d5 	bl	800373c <_isatty_r>
 8003592:	b128      	cbz	r0, 80035a0 <__smakebuf_r+0x74>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	81a3      	strh	r3, [r4, #12]
 80035a0:	89a0      	ldrh	r0, [r4, #12]
 80035a2:	4305      	orrs	r5, r0
 80035a4:	81a5      	strh	r5, [r4, #12]
 80035a6:	e7cd      	b.n	8003544 <__smakebuf_r+0x18>
 80035a8:	0800333d 	.word	0x0800333d

080035ac <__malloc_lock>:
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <__malloc_lock+0x8>)
 80035ae:	f7ff bf97 	b.w	80034e0 <__retarget_lock_acquire_recursive>
 80035b2:	bf00      	nop
 80035b4:	20000094 	.word	0x20000094

080035b8 <__malloc_unlock>:
 80035b8:	4801      	ldr	r0, [pc, #4]	; (80035c0 <__malloc_unlock+0x8>)
 80035ba:	f7ff bf92 	b.w	80034e2 <__retarget_lock_release_recursive>
 80035be:	bf00      	nop
 80035c0:	20000094 	.word	0x20000094

080035c4 <_raise_r>:
 80035c4:	291f      	cmp	r1, #31
 80035c6:	b538      	push	{r3, r4, r5, lr}
 80035c8:	4604      	mov	r4, r0
 80035ca:	460d      	mov	r5, r1
 80035cc:	d904      	bls.n	80035d8 <_raise_r+0x14>
 80035ce:	2316      	movs	r3, #22
 80035d0:	6003      	str	r3, [r0, #0]
 80035d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80035da:	b112      	cbz	r2, 80035e2 <_raise_r+0x1e>
 80035dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80035e0:	b94b      	cbnz	r3, 80035f6 <_raise_r+0x32>
 80035e2:	4620      	mov	r0, r4
 80035e4:	f000 f830 	bl	8003648 <_getpid_r>
 80035e8:	462a      	mov	r2, r5
 80035ea:	4601      	mov	r1, r0
 80035ec:	4620      	mov	r0, r4
 80035ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f2:	f000 b817 	b.w	8003624 <_kill_r>
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d00a      	beq.n	8003610 <_raise_r+0x4c>
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	d103      	bne.n	8003606 <_raise_r+0x42>
 80035fe:	2316      	movs	r3, #22
 8003600:	6003      	str	r3, [r0, #0]
 8003602:	2001      	movs	r0, #1
 8003604:	e7e7      	b.n	80035d6 <_raise_r+0x12>
 8003606:	2400      	movs	r4, #0
 8003608:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800360c:	4628      	mov	r0, r5
 800360e:	4798      	blx	r3
 8003610:	2000      	movs	r0, #0
 8003612:	e7e0      	b.n	80035d6 <_raise_r+0x12>

08003614 <raise>:
 8003614:	4b02      	ldr	r3, [pc, #8]	; (8003620 <raise+0xc>)
 8003616:	4601      	mov	r1, r0
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	f7ff bfd3 	b.w	80035c4 <_raise_r>
 800361e:	bf00      	nop
 8003620:	20000004 	.word	0x20000004

08003624 <_kill_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4d07      	ldr	r5, [pc, #28]	; (8003644 <_kill_r+0x20>)
 8003628:	2300      	movs	r3, #0
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	f7fd fe9d 	bl	8001370 <_kill>
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	d102      	bne.n	8003640 <_kill_r+0x1c>
 800363a:	682b      	ldr	r3, [r5, #0]
 800363c:	b103      	cbz	r3, 8003640 <_kill_r+0x1c>
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	bd38      	pop	{r3, r4, r5, pc}
 8003642:	bf00      	nop
 8003644:	2000009c 	.word	0x2000009c

08003648 <_getpid_r>:
 8003648:	f7fd be8a 	b.w	8001360 <_getpid>

0800364c <__sread>:
 800364c:	b510      	push	{r4, lr}
 800364e:	460c      	mov	r4, r1
 8003650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003654:	f000 f894 	bl	8003780 <_read_r>
 8003658:	2800      	cmp	r0, #0
 800365a:	bfab      	itete	ge
 800365c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800365e:	89a3      	ldrhlt	r3, [r4, #12]
 8003660:	181b      	addge	r3, r3, r0
 8003662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003666:	bfac      	ite	ge
 8003668:	6563      	strge	r3, [r4, #84]	; 0x54
 800366a:	81a3      	strhlt	r3, [r4, #12]
 800366c:	bd10      	pop	{r4, pc}

0800366e <__swrite>:
 800366e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003672:	461f      	mov	r7, r3
 8003674:	898b      	ldrh	r3, [r1, #12]
 8003676:	05db      	lsls	r3, r3, #23
 8003678:	4605      	mov	r5, r0
 800367a:	460c      	mov	r4, r1
 800367c:	4616      	mov	r6, r2
 800367e:	d505      	bpl.n	800368c <__swrite+0x1e>
 8003680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003684:	2302      	movs	r3, #2
 8003686:	2200      	movs	r2, #0
 8003688:	f000 f868 	bl	800375c <_lseek_r>
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003696:	81a3      	strh	r3, [r4, #12]
 8003698:	4632      	mov	r2, r6
 800369a:	463b      	mov	r3, r7
 800369c:	4628      	mov	r0, r5
 800369e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	f000 b817 	b.w	80036d4 <_write_r>

080036a6 <__sseek>:
 80036a6:	b510      	push	{r4, lr}
 80036a8:	460c      	mov	r4, r1
 80036aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ae:	f000 f855 	bl	800375c <_lseek_r>
 80036b2:	1c43      	adds	r3, r0, #1
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	bf15      	itete	ne
 80036b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036c2:	81a3      	strheq	r3, [r4, #12]
 80036c4:	bf18      	it	ne
 80036c6:	81a3      	strhne	r3, [r4, #12]
 80036c8:	bd10      	pop	{r4, pc}

080036ca <__sclose>:
 80036ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ce:	f000 b813 	b.w	80036f8 <_close_r>
	...

080036d4 <_write_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4d07      	ldr	r5, [pc, #28]	; (80036f4 <_write_r+0x20>)
 80036d8:	4604      	mov	r4, r0
 80036da:	4608      	mov	r0, r1
 80036dc:	4611      	mov	r1, r2
 80036de:	2200      	movs	r2, #0
 80036e0:	602a      	str	r2, [r5, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7fd fe7b 	bl	80013de <_write>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_write_r+0x1e>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_write_r+0x1e>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	2000009c 	.word	0x2000009c

080036f8 <_close_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4d06      	ldr	r5, [pc, #24]	; (8003714 <_close_r+0x1c>)
 80036fc:	2300      	movs	r3, #0
 80036fe:	4604      	mov	r4, r0
 8003700:	4608      	mov	r0, r1
 8003702:	602b      	str	r3, [r5, #0]
 8003704:	f7fd fe87 	bl	8001416 <_close>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_close_r+0x1a>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	b103      	cbz	r3, 8003712 <_close_r+0x1a>
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	2000009c 	.word	0x2000009c

08003718 <_fstat_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4d07      	ldr	r5, [pc, #28]	; (8003738 <_fstat_r+0x20>)
 800371c:	2300      	movs	r3, #0
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	f7fd fe82 	bl	800142e <_fstat>
 800372a:	1c43      	adds	r3, r0, #1
 800372c:	d102      	bne.n	8003734 <_fstat_r+0x1c>
 800372e:	682b      	ldr	r3, [r5, #0]
 8003730:	b103      	cbz	r3, 8003734 <_fstat_r+0x1c>
 8003732:	6023      	str	r3, [r4, #0]
 8003734:	bd38      	pop	{r3, r4, r5, pc}
 8003736:	bf00      	nop
 8003738:	2000009c 	.word	0x2000009c

0800373c <_isatty_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d06      	ldr	r5, [pc, #24]	; (8003758 <_isatty_r+0x1c>)
 8003740:	2300      	movs	r3, #0
 8003742:	4604      	mov	r4, r0
 8003744:	4608      	mov	r0, r1
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	f7fd fe81 	bl	800144e <_isatty>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_isatty_r+0x1a>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	b103      	cbz	r3, 8003756 <_isatty_r+0x1a>
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	2000009c 	.word	0x2000009c

0800375c <_lseek_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4d07      	ldr	r5, [pc, #28]	; (800377c <_lseek_r+0x20>)
 8003760:	4604      	mov	r4, r0
 8003762:	4608      	mov	r0, r1
 8003764:	4611      	mov	r1, r2
 8003766:	2200      	movs	r2, #0
 8003768:	602a      	str	r2, [r5, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	f7fd fe7a 	bl	8001464 <_lseek>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_lseek_r+0x1e>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_lseek_r+0x1e>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	2000009c 	.word	0x2000009c

08003780 <_read_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d07      	ldr	r5, [pc, #28]	; (80037a0 <_read_r+0x20>)
 8003784:	4604      	mov	r4, r0
 8003786:	4608      	mov	r0, r1
 8003788:	4611      	mov	r1, r2
 800378a:	2200      	movs	r2, #0
 800378c:	602a      	str	r2, [r5, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7fd fe08 	bl	80013a4 <_read>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_read_r+0x1e>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_read_r+0x1e>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	2000009c 	.word	0x2000009c

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
