
lab8_1_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003544  08003544  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800354c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  080035b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080035b4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ae8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001557  00000000  00000000  00026b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  000280d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00028820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001297a  00000000  00000000  00028eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005598  00000000  00000000  0003b82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066153  00000000  00000000  00040dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a6f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  000a6f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080033b0 	.word	0x080033b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080033b0 	.word	0x080033b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000594:	4013      	ands	r3, r2
 8000596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	60d3      	str	r3, [r2, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <LL_RCC_HSI_Enable+0x1c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <LL_RCC_HSI_Enable+0x1c>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <LL_RCC_HSI_IsReady+0x20>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40023800 	.word	0x40023800

08000604 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	4904      	ldr	r1, [pc, #16]	; (800062c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800061a:	4313      	orrs	r3, r2
 800061c:	600b      	str	r3, [r1, #0]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <LL_RCC_SetSysClkSource+0x24>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f023 0203 	bic.w	r2, r3, #3
 8000640:	4904      	ldr	r1, [pc, #16]	; (8000654 <LL_RCC_SetSysClkSource+0x24>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	608b      	str	r3, [r1, #8]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	40023800 	.word	0x40023800

08000658 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <LL_RCC_GetSysClkSource+0x18>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f003 030c 	and.w	r3, r3, #12
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <LL_RCC_SetAHBPrescaler+0x24>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <LL_RCC_SetAHBPrescaler+0x24>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4313      	orrs	r3, r2
 800068a:	608b      	str	r3, [r1, #8]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40023800 	.word	0x40023800

0800069c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80006ac:	4904      	ldr	r1, [pc, #16]	; (80006c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	608b      	str	r3, [r1, #8]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40023800 	.word	0x40023800

080006c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80006d4:	4904      	ldr	r1, [pc, #16]	; (80006e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	608b      	str	r3, [r1, #8]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40023800 	.word	0x40023800

080006ec <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <LL_RCC_SetTIMPrescaler+0x28>)
 80006f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80006fe:	4905      	ldr	r1, [pc, #20]	; (8000714 <LL_RCC_SetTIMPrescaler+0x28>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4313      	orrs	r3, r2
 8000704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40023800 	.word	0x40023800

08000718 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <LL_RCC_PLL_Enable+0x1c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <LL_RCC_PLL_Enable+0x1c>)
 8000722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <LL_RCC_PLL_IsReady+0x24>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000774:	4013      	ands	r3, r2
 8000776:	68f9      	ldr	r1, [r7, #12]
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	4311      	orrs	r1, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	0192      	lsls	r2, r2, #6
 8000780:	430a      	orrs	r2, r1
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000784:	4313      	orrs	r3, r2
 8000786:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000790:	4904      	ldr	r1, [pc, #16]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	4313      	orrs	r3, r2
 8000796:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40023800 	.word	0x40023800
 80007a8:	ffbf8000 	.word	0xffbf8000

080007ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4013      	ands	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e8:	4907      	ldr	r1, [pc, #28]	; (8000808 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	40023800 	.word	0x40023800

0800080c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000818:	4907      	ldr	r1, [pc, #28]	; (8000838 <LL_APB2_GRP1_EnableClock+0x2c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4313      	orrs	r3, r2
 800081e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4013      	ands	r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40023800 	.word	0x40023800

0800083c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <LL_SYSCFG_SetEXTISource+0x58>)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	3302      	adds	r3, #2
 800084e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	0c1b      	lsrs	r3, r3, #16
 8000856:	43db      	mvns	r3, r3
 8000858:	ea02 0103 	and.w	r1, r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	fa93 f3a3 	rbit	r3, r3
 8000868:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	fab3 f383 	clz	r3, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	fa03 f202 	lsl.w	r2, r3, r2
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <LL_SYSCFG_SetEXTISource+0x58>)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	430a      	orrs	r2, r1
 8000882:	3302      	adds	r3, #2
 8000884:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40013800 	.word	0x40013800

08000898 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <LL_FLASH_SetLatency+0x24>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 0207 	bic.w	r2, r3, #7
 80008a8:	4904      	ldr	r1, [pc, #16]	; (80008bc <LL_FLASH_SetLatency+0x24>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	600b      	str	r3, [r1, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	40023c00 	.word	0x40023c00

080008c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <LL_FLASH_GetLatency+0x18>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0307 	and.w	r3, r3, #7
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023c00 	.word	0x40023c00

080008dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80008ec:	4904      	ldr	r1, [pc, #16]	; (8000900 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	600b      	str	r3, [r1, #0]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	40007000 	.word	0x40007000

08000904 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d01c      	beq.n	800096e <LL_TIM_OC_DisableFast+0x4a>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d017      	beq.n	800096a <LL_TIM_OC_DisableFast+0x46>
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	2b10      	cmp	r3, #16
 800093e:	d012      	beq.n	8000966 <LL_TIM_OC_DisableFast+0x42>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b40      	cmp	r3, #64	; 0x40
 8000944:	d00d      	beq.n	8000962 <LL_TIM_OC_DisableFast+0x3e>
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094c:	d007      	beq.n	800095e <LL_TIM_OC_DisableFast+0x3a>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000954:	d101      	bne.n	800095a <LL_TIM_OC_DisableFast+0x36>
 8000956:	2305      	movs	r3, #5
 8000958:	e00a      	b.n	8000970 <LL_TIM_OC_DisableFast+0x4c>
 800095a:	2306      	movs	r3, #6
 800095c:	e008      	b.n	8000970 <LL_TIM_OC_DisableFast+0x4c>
 800095e:	2304      	movs	r3, #4
 8000960:	e006      	b.n	8000970 <LL_TIM_OC_DisableFast+0x4c>
 8000962:	2303      	movs	r3, #3
 8000964:	e004      	b.n	8000970 <LL_TIM_OC_DisableFast+0x4c>
 8000966:	2302      	movs	r3, #2
 8000968:	e002      	b.n	8000970 <LL_TIM_OC_DisableFast+0x4c>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <LL_TIM_OC_DisableFast+0x4c>
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3318      	adds	r3, #24
 8000976:	4619      	mov	r1, r3
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LL_TIM_OC_DisableFast+0x84>)
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	440b      	add	r3, r1
 8000980:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	4908      	ldr	r1, [pc, #32]	; (80009ac <LL_TIM_OC_DisableFast+0x88>)
 800098a:	5ccb      	ldrb	r3, [r1, r3]
 800098c:	4619      	mov	r1, r3
 800098e:	2304      	movs	r3, #4
 8000990:	408b      	lsls	r3, r1
 8000992:	43db      	mvns	r3, r3
 8000994:	401a      	ands	r2, r3
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	601a      	str	r2, [r3, #0]

}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	080033c8 	.word	0x080033c8
 80009ac:	080033d0 	.word	0x080033d0

080009b0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c2:	f023 0307 	bic.w	r3, r3, #7
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	609a      	str	r2, [r3, #8]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	431a      	orrs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	605a      	str	r2, [r3, #4]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	609a      	str	r2, [r3, #8]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	60da      	str	r2, [r3, #12]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	615a      	str	r2, [r3, #20]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa93 f3a3 	rbit	r3, r3
 8000a86:	613b      	str	r3, [r7, #16]
  return result;
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	fab3 f383 	clz	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2103      	movs	r1, #3
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	fa93 f3a3 	rbit	r3, r3
 8000aa6:	61bb      	str	r3, [r7, #24]
  return result;
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fab3 f383 	clz	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b089      	sub	sp, #36	; 0x24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	fa93 f3a3 	rbit	r3, r3
 8000ae4:	613b      	str	r3, [r7, #16]
  return result;
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fab3 f383 	clz	r3, r3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2103      	movs	r1, #3
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	fa93 f3a3 	rbit	r3, r3
 8000b04:	61bb      	str	r3, [r7, #24]
  return result;
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	fab3 f383 	clz	r3, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	431a      	orrs	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	60da      	str	r2, [r3, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3724      	adds	r7, #36	; 0x24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	041a      	lsls	r2, r3, #16
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	619a      	str	r2, [r3, #24]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b50:	f7ff fe5c 	bl	800080c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b58:	f7ff fe40 	bl	80007dc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5c:	2007      	movs	r0, #7
 8000b5e:	f7ff fd0b 	bl	8000578 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f84f 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 f95d 	bl	8000e24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b6a:	f000 f90b 	bl	8000d84 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b6e:	f000 f893 	bl	8000c98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_WriteReg(TIM3, CCR1, f5);  // threshold 1
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <main+0xb8>)
 8000b74:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
  LL_TIM_WriteReg(TIM3, CCR2, f25); // threshold 2
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <main+0xb8>)
 8000b7c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38
  LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2);   // delete OC flag channel 1
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <main+0xb8>)
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <main+0xb8>)
 8000b88:	f023 0302 	bic.w	r3, r3, #2
 8000b8c:	6113      	str	r3, [r2, #16]
  LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x4);   // delete OC flag channel 2
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <main+0xb8>)
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <main+0xb8>)
 8000b94:	f023 0304 	bic.w	r3, r3, #4
 8000b98:	6113      	str	r3, [r2, #16]
  LL_TIM_WriteReg(TIM3, CR1, LL_TIM_ReadReg(TIM3, CR1) | 0x1);  // counter enable channel 1
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <main+0xb8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <main+0xb8>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6013      	str	r3, [r2, #0]
  LL_TIM_WriteReg(TIM3, CR2, LL_TIM_ReadReg(TIM3, CR2) | 0x1);  // counter enable channel 2
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <main+0xb8>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <main+0xb8>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <main+0xb8>)
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00c      	beq.n	8000bd8 <main+0x90>
		LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2); // turn off flag channel 1
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <main+0xb8>)
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <main+0xb8>)
 8000bc4:	f023 0302 	bic.w	r3, r3, #2
 8000bc8:	6113      	str	r3, [r2, #16]
		LL_TIM_WriteReg(TIM3, CCR1, LL_TIM_ReadReg(TIM3, CCR1) + f5); // set next threshold
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <main+0xb8>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <main+0xb8>)
 8000bd0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8000bd4:	3310      	adds	r3, #16
 8000bd6:	6353      	str	r3, [r2, #52]	; 0x34
	  }
	  if (LL_TIM_ReadReg(TIM3, SR) & 0x4){
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <main+0xb8>)
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0e6      	beq.n	8000bb2 <main+0x6a>
		LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x4); // turn off flag channel 2
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <main+0xb8>)
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <main+0xb8>)
 8000bea:	f023 0304 	bic.w	r3, r3, #4
 8000bee:	6113      	str	r3, [r2, #16]
		LL_TIM_WriteReg(TIM3, CCR2, LL_TIM_ReadReg(TIM3, CCR2) + f25); // set next threshold
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <main+0xb8>)
 8000bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf4:	4a02      	ldr	r2, [pc, #8]	; (8000c00 <main+0xb8>)
 8000bf6:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8000bfa:	3320      	adds	r3, #32
 8000bfc:	6393      	str	r3, [r2, #56]	; 0x38
  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){
 8000bfe:	e7d8      	b.n	8000bb2 <main+0x6a>
 8000c00:	40000400 	.word	0x40000400

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fe45 	bl	8000898 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000c0e:	bf00      	nop
 8000c10:	f7ff fe56 	bl	80008c0 <LL_FLASH_GetLatency>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d1fa      	bne.n	8000c10 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000c1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c1e:	f7ff fe5d 	bl	80008dc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c22:	2010      	movs	r0, #16
 8000c24:	f7ff fcee 	bl	8000604 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000c28:	f7ff fcca 	bl	80005c0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c2c:	bf00      	nop
 8000c2e:	f7ff fcd7 	bl	80005e0 <LL_RCC_HSI_IsReady>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d1fa      	bne.n	8000c2e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000c40:	2110      	movs	r1, #16
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fd8c 	bl	8000760 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c48:	f7ff fd66 	bl	8000718 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c4c:	bf00      	nop
 8000c4e:	f7ff fd73 	bl	8000738 <LL_RCC_PLL_IsReady>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d1fa      	bne.n	8000c4e <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fd0b 	bl	8000674 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000c5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c62:	f7ff fd1b 	bl	800069c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fd2c 	bl	80006c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fcdf 	bl	8000630 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c72:	bf00      	nop
 8000c74:	f7ff fcf0 	bl	8000658 <LL_RCC_GetSysClkSource>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d1fa      	bne.n	8000c74 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <SystemClock_Config+0x90>)
 8000c80:	f001 fb44 	bl	800230c <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <SystemClock_Config+0x90>)
 8000c86:	f001 fb4f 	bl	8002328 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fd2e 	bl	80006ec <LL_RCC_SetTIMPrescaler>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0501bd00 	.word	0x0501bd00

08000c98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	; 0x50
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fb70 	bl	800239c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
 8000cca:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff fd85 	bl	80007dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 8000cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4824      	ldr	r0, [pc, #144]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cec:	f000 fe7e 	bl	80019ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000cf0:	4822      	ldr	r0, [pc, #136]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cf2:	f7ff fe07 	bl	8000904 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4820      	ldr	r0, [pc, #128]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cfa:	f7ff fe59 	bl	80009b0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8000cfe:	2330      	movs	r3, #48	; 0x30
 8000d00:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	461a      	mov	r2, r3
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d1c:	f000 fee0 	bl	8001ae0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000d20:	2101      	movs	r1, #1
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d24:	f7ff fdfe 	bl	8000924 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	2110      	movs	r1, #16
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d32:	f000 fed5 	bl	8001ae0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8000d36:	2110      	movs	r1, #16
 8000d38:	4810      	ldr	r0, [pc, #64]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d3a:	f7ff fdf3 	bl	8000924 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	480e      	ldr	r0, [pc, #56]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d42:	f7ff fe4a 	bl	80009da <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d48:	f7ff fe5a 	bl	8000a00 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d4c:	2004      	movs	r0, #4
 8000d4e:	f7ff fd2d 	bl	80007ac <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000d52:	23c0      	movs	r3, #192	; 0xc0
 8000d54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d56:	2302      	movs	r3, #2
 8000d58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_TIM3_Init+0xe8>)
 8000d70:	f000 fc1c 	bl	80015ac <LL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3750      	adds	r7, #80	; 0x50
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40000400 	.word	0x40000400
 8000d80:	40020800 	.word	0x40020800

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000dae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000db2:	f7ff fd13 	bl	80007dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff fcf8 	bl	80007ac <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <MX_USART2_UART_Init+0x98>)
 8000dda:	f000 fbe7 	bl	80015ac <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000dde:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000de2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000df0:	230c      	movs	r3, #12
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_USART2_UART_Init+0x9c>)
 8000e04:	f001 fa04 	bl	8002210 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART2_UART_Init+0x9c>)
 8000e0a:	f7ff fe19 	bl	8000a40 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_USART2_UART_Init+0x9c>)
 8000e10:	f7ff fe06 	bl	8000a20 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3738      	adds	r7, #56	; 0x38
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40004400 	.word	0x40004400

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000e44:	2004      	movs	r0, #4
 8000e46:	f7ff fcb1 	bl	80007ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000e4a:	2080      	movs	r0, #128	; 0x80
 8000e4c:	f7ff fcae 	bl	80007ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fcab 	bl	80007ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e56:	2002      	movs	r0, #2
 8000e58:	f7ff fca8 	bl	80007ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <MX_GPIO_Init+0xa4>)
 8000e60:	f7ff fe62 	bl	8000b28 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000e64:	4919      	ldr	r1, [pc, #100]	; (8000ecc <MX_GPIO_Init+0xa8>)
 8000e66:	2002      	movs	r0, #2
 8000e68:	f7ff fce8 	bl	800083c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e70:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e72:	2301      	movs	r3, #1
 8000e74:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fa0c 	bl	80012a0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <MX_GPIO_Init+0xac>)
 8000e90:	f7ff fe1b 	bl	8000aca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_GPIO_Init+0xac>)
 8000e9c:	f7ff fde6 	bl	8000a6c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_GPIO_Init+0xa4>)
 8000eba:	f000 fb77 	bl	80015ac <LL_GPIO_Init>

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	00f00003 	.word	0x00f00003
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	int x = (rand()%10 + 50)*5;
 8000f22:	f001 fa43 	bl	80023ac <rand>
 8000f26:	4601      	mov	r1, r0
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <SysTick_Handler+0x4c>)
 8000f2a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f2e:	109a      	asrs	r2, r3, #2
 8000f30:	17cb      	asrs	r3, r1, #31
 8000f32:	1ad2      	subs	r2, r2, r3
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	1aca      	subs	r2, r1, r3
 8000f3e:	3232      	adds	r2, #50	; 0x32
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	603b      	str	r3, [r7, #0]
	for(int i=0;i<x;i++);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	e002      	b.n	8000f54 <SysTick_Handler+0x38>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf8      	blt.n	8000f4e <SysTick_Handler+0x32>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	66666667 	.word	0x66666667

08000f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_kill>:

int _kill(int pid, int sig)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f86:	f001 f9df 	bl	8002348 <__errno>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2216      	movs	r2, #22
 8000f8e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_exit>:

void _exit (int status)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe7 	bl	8000f7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fae:	e7fe      	b.n	8000fae <_exit+0x12>

08000fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00a      	b.n	8000fd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc2:	f3af 8000 	nop.w
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf0      	blt.n	8000fc2 <_read+0x12>
	}

return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x12>
	}
	return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_close>:

int _close(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104a:	605a      	str	r2, [r3, #4]
	return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_isatty>:

int _isatty(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	return 1;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f001 f944 	bl	8002348 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20018000 	.word	0x20018000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	20000084 	.word	0x20000084
 80010f4:	200000a0 	.word	0x200000a0

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001122:	490e      	ldr	r1, [pc, #56]	; (800115c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001138:	4c0b      	ldr	r4, [pc, #44]	; (8001168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001146:	f7ff ffd7 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f001 f903 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fcfb 	bl	8000b48 <main>
  bx  lr    
 8001152:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001154:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001160:	0800354c 	.word	0x0800354c
  ldr r2, =_sbss
 8001164:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001168:	200000a0 	.word	0x200000a0

0800116c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC_IRQHandler>
	...

08001170 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <LL_EXTI_EnableIT_0_31+0x20>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4904      	ldr	r1, [pc, #16]	; (8001190 <LL_EXTI_EnableIT_0_31+0x20>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40013c00 	.word	0x40013c00

08001194 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <LL_EXTI_DisableIT_0_31+0x24>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40013c00 	.word	0x40013c00

080011bc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <LL_EXTI_EnableEvent_0_31+0x20>)
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4904      	ldr	r1, [pc, #16]	; (80011dc <LL_EXTI_EnableEvent_0_31+0x20>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]

}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <LL_EXTI_DisableEvent_0_31+0x24>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4904      	ldr	r1, [pc, #16]	; (8001204 <LL_EXTI_DisableEvent_0_31+0x24>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40013c00 	.word	0x40013c00

08001208 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4313      	orrs	r3, r2
 800121a:	608b      	str	r3, [r1, #8]

}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40013c00 	.word	0x40013c00

0800122c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	43db      	mvns	r3, r3
 800123c:	4904      	ldr	r1, [pc, #16]	; (8001250 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800123e:	4013      	ands	r3, r2
 8001240:	608b      	str	r3, [r1, #8]

}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40013c00 	.word	0x40013c00

08001254 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	4904      	ldr	r1, [pc, #16]	; (8001274 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	60cb      	str	r3, [r1, #12]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40013c00 	.word	0x40013c00

08001278 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	43db      	mvns	r3, r3
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800128a:	4013      	ands	r3, r2
 800128c:	60cb      	str	r3, [r1, #12]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40013c00 	.word	0x40013c00

080012a0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d065      	beq.n	8001380 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d06c      	beq.n	8001396 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	795b      	ldrb	r3, [r3, #5]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d01c      	beq.n	80012fe <LL_EXTI_Init+0x5e>
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	dc25      	bgt.n	8001314 <LL_EXTI_Init+0x74>
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <LL_EXTI_Init+0x32>
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d00b      	beq.n	80012e8 <LL_EXTI_Init+0x48>
 80012d0:	e020      	b.n	8001314 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff82 	bl	80011e0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff45 	bl	8001170 <LL_EXTI_EnableIT_0_31>
          break;
 80012e6:	e018      	b.n	800131a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff51 	bl	8001194 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff60 	bl	80011bc <LL_EXTI_EnableEvent_0_31>
          break;
 80012fc:	e00d      	b.n	800131a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff34 	bl	8001170 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff55 	bl	80011bc <LL_EXTI_EnableEvent_0_31>
          break;
 8001312:	e002      	b.n	800131a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
          break;
 8001318:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	799b      	ldrb	r3, [r3, #6]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d039      	beq.n	8001396 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	799b      	ldrb	r3, [r3, #6]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d01c      	beq.n	8001364 <LL_EXTI_Init+0xc4>
 800132a:	2b03      	cmp	r3, #3
 800132c:	dc25      	bgt.n	800137a <LL_EXTI_Init+0xda>
 800132e:	2b01      	cmp	r3, #1
 8001330:	d002      	beq.n	8001338 <LL_EXTI_Init+0x98>
 8001332:	2b02      	cmp	r3, #2
 8001334:	d00b      	beq.n	800134e <LL_EXTI_Init+0xae>
 8001336:	e020      	b.n	800137a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff9b 	bl	8001278 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff5e 	bl	8001208 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800134c:	e024      	b.n	8001398 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff6a 	bl	800122c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff79 	bl	8001254 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001362:	e019      	b.n	8001398 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff4d 	bl	8001208 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff6e 	bl	8001254 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001378:	e00e      	b.n	8001398 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
            break;
 800137e:	e00b      	b.n	8001398 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff05 	bl	8001194 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff26 	bl	80011e0 <LL_EXTI_DisableEvent_0_31>
 8001394:	e000      	b.n	8001398 <LL_EXTI_Init+0xf8>
      }
 8001396:	bf00      	nop
  }
  return status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <LL_GPIO_SetPinMode>:
{
 80013a2:	b480      	push	{r7}
 80013a4:	b089      	sub	sp, #36	; 0x24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	613b      	str	r3, [r7, #16]
  return result;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2103      	movs	r1, #3
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	401a      	ands	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	61bb      	str	r3, [r7, #24]
  return result;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3724      	adds	r7, #36	; 0x24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_GPIO_SetPinOutputType>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	431a      	orrs	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_GPIO_SetPinSpeed>:
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	613b      	str	r3, [r7, #16]
  return result;
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2103      	movs	r1, #3
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	401a      	ands	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	61bb      	str	r3, [r7, #24]
  return result;
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	431a      	orrs	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	609a      	str	r2, [r3, #8]
}
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_GPIO_SetPinPull>:
{
 800148e:	b480      	push	{r7}
 8001490:	b089      	sub	sp, #36	; 0x24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	613b      	str	r3, [r7, #16]
  return result;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2103      	movs	r1, #3
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	401a      	ands	r2, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	61bb      	str	r3, [r7, #24]
  return result;
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	431a      	orrs	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	60da      	str	r2, [r3, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3724      	adds	r7, #36	; 0x24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_GPIO_SetAFPin_0_7>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	613b      	str	r3, [r7, #16]
  return result;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	210f      	movs	r1, #15
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	61bb      	str	r3, [r7, #24]
  return result;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	431a      	orrs	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	621a      	str	r2, [r3, #32]
}
 800153e:	bf00      	nop
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_GPIO_SetAFPin_8_15>:
{
 800154a:	b480      	push	{r7}
 800154c:	b089      	sub	sp, #36	; 0x24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	613b      	str	r3, [r7, #16]
  return result;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	210f      	movs	r1, #15
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	61bb      	str	r3, [r7, #24]
  return result;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	431a      	orrs	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015a0:	bf00      	nop
 80015a2:	3724      	adds	r7, #36	; 0x24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	613b      	str	r3, [r7, #16]
  return result;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80015d6:	e050      	b.n	800167a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d042      	beq.n	8001674 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d003      	beq.n	80015fe <LL_GPIO_Init+0x52>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d10d      	bne.n	800161a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	461a      	mov	r2, r3
 8001604:	69b9      	ldr	r1, [r7, #24]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff12 	bl	8001430 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	461a      	mov	r2, r3
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fef3 	bl	8001400 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	461a      	mov	r2, r3
 8001620:	69b9      	ldr	r1, [r7, #24]
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff33 	bl	800148e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d11a      	bne.n	8001666 <LL_GPIO_Init+0xba>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	60bb      	str	r3, [r7, #8]
  return result;
 800163c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b07      	cmp	r3, #7
 8001646:	d807      	bhi.n	8001658 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	461a      	mov	r2, r3
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff4b 	bl	80014ec <LL_GPIO_SetAFPin_0_7>
 8001656:	e006      	b.n	8001666 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	461a      	mov	r2, r3
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff72 	bl	800154a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	69b9      	ldr	r1, [r7, #24]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fe97 	bl	80013a2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	3301      	adds	r3, #1
 8001678:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1a7      	bne.n	80015d8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <LL_RCC_GetSysClkSource>:
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <LL_RCC_GetSysClkSource+0x18>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <LL_RCC_GetAHBPrescaler>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <LL_RCC_GetAHBPrescaler+0x18>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <LL_RCC_GetAPB1Prescaler>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <LL_RCC_GetAPB2Prescaler>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <LL_RCC_GetAPB2Prescaler+0x18>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <LL_RCC_PLL_GetMainSource+0x18>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <LL_RCC_PLL_GetN+0x18>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40023800 	.word	0x40023800

0800173c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_RCC_PLL_GetP+0x18>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <LL_RCC_PLL_GetDivider+0x18>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800177c:	f000 f820 	bl	80017c0 <RCC_GetSystemClockFreq>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f840 	bl	8001810 <RCC_GetHCLKClockFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f84e 	bl	800183c <RCC_GetPCLK1ClockFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f85a 	bl	8001864 <RCC_GetPCLK2ClockFreq>
 80017b0:	4602      	mov	r2, r0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60da      	str	r2, [r3, #12]
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80017ca:	f7ff ff63 	bl	8001694 <LL_RCC_GetSysClkSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d00c      	beq.n	80017ee <RCC_GetSystemClockFreq+0x2e>
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d80f      	bhi.n	80017f8 <RCC_GetSystemClockFreq+0x38>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <RCC_GetSystemClockFreq+0x22>
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d003      	beq.n	80017e8 <RCC_GetSystemClockFreq+0x28>
 80017e0:	e00a      	b.n	80017f8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <RCC_GetSystemClockFreq+0x48>)
 80017e4:	607b      	str	r3, [r7, #4]
      break;
 80017e6:	e00a      	b.n	80017fe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <RCC_GetSystemClockFreq+0x4c>)
 80017ea:	607b      	str	r3, [r7, #4]
      break;
 80017ec:	e007      	b.n	80017fe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80017ee:	2008      	movs	r0, #8
 80017f0:	f000 f84c 	bl	800188c <RCC_PLL_GetFreqDomain_SYS>
 80017f4:	6078      	str	r0, [r7, #4]
      break;
 80017f6:	e002      	b.n	80017fe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <RCC_GetSystemClockFreq+0x48>)
 80017fa:	607b      	str	r3, [r7, #4]
      break;
 80017fc:	bf00      	nop
  }

  return frequency;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001818:	f7ff ff4a 	bl	80016b0 <LL_RCC_GetAHBPrescaler>
 800181c:	4603      	mov	r3, r0
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <RCC_GetHCLKClockFreq+0x28>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	40d3      	lsrs	r3, r2
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	080033d8 	.word	0x080033d8

0800183c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001844:	f7ff ff42 	bl	80016cc <LL_RCC_GetAPB1Prescaler>
 8001848:	4603      	mov	r3, r0
 800184a:	0a9b      	lsrs	r3, r3, #10
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <RCC_GetPCLK1ClockFreq+0x24>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	40d3      	lsrs	r3, r2
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	080033e8 	.word	0x080033e8

08001864 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800186c:	f7ff ff3c 	bl	80016e8 <LL_RCC_GetAPB2Prescaler>
 8001870:	4603      	mov	r3, r0
 8001872:	0b5b      	lsrs	r3, r3, #13
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <RCC_GetPCLK2ClockFreq+0x24>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	40d3      	lsrs	r3, r2
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	080033e8 	.word	0x080033e8

0800188c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80018a0:	f7ff ff30 	bl	8001704 <LL_RCC_PLL_GetMainSource>
 80018a4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b2:	d003      	beq.n	80018bc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80018b4:	e005      	b.n	80018c2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80018b8:	617b      	str	r3, [r7, #20]
      break;
 80018ba:	e005      	b.n	80018c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80018be:	617b      	str	r3, [r7, #20]
      break;
 80018c0:	e002      	b.n	80018c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80018c4:	617b      	str	r3, [r7, #20]
      break;
 80018c6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d113      	bne.n	80018f6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80018ce:	f7ff ff43 	bl	8001758 <LL_RCC_PLL_GetDivider>
 80018d2:	4602      	mov	r2, r0
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fbb3 f4f2 	udiv	r4, r3, r2
 80018da:	f7ff ff21 	bl	8001720 <LL_RCC_PLL_GetN>
 80018de:	4603      	mov	r3, r0
 80018e0:	fb03 f404 	mul.w	r4, r3, r4
 80018e4:	f7ff ff2a 	bl	800173c <LL_RCC_PLL_GetP>
 80018e8:	4603      	mov	r3, r0
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	3301      	adds	r3, #1
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fbb4 f3f3 	udiv	r3, r4, r3
 80018f4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80018f6:	693b      	ldr	r3, [r7, #16]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	00f42400 	.word	0x00f42400
 8001904:	007a1200 	.word	0x007a1200

08001908 <LL_TIM_SetPrescaler>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_TIM_SetAutoReload>:
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_TIM_SetRepetitionCounter>:
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_TIM_OC_SetCompareCH1>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_TIM_OC_SetCompareCH2>:
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_TIM_OC_SetCompareCH3>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_TIM_OC_SetCompareCH4>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	615a      	str	r2, [r3, #20]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <LL_TIM_Init+0xd8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00f      	beq.n	8001a24 <LL_TIM_Init+0x38>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0a:	d00b      	beq.n	8001a24 <LL_TIM_Init+0x38>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ac8 <LL_TIM_Init+0xdc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <LL_TIM_Init+0x38>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a2d      	ldr	r2, [pc, #180]	; (8001acc <LL_TIM_Init+0xe0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d003      	beq.n	8001a24 <LL_TIM_Init+0x38>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ad0 <LL_TIM_Init+0xe4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d106      	bne.n	8001a32 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <LL_TIM_Init+0xd8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01b      	beq.n	8001a72 <LL_TIM_Init+0x86>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d017      	beq.n	8001a72 <LL_TIM_Init+0x86>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <LL_TIM_Init+0xdc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <LL_TIM_Init+0x86>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <LL_TIM_Init+0xe0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00f      	beq.n	8001a72 <LL_TIM_Init+0x86>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <LL_TIM_Init+0xe4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00b      	beq.n	8001a72 <LL_TIM_Init+0x86>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <LL_TIM_Init+0xe8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <LL_TIM_Init+0x86>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <LL_TIM_Init+0xec>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d003      	beq.n	8001a72 <LL_TIM_Init+0x86>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <LL_TIM_Init+0xf0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d106      	bne.n	8001a80 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff49 	bl	8001924 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff35 	bl	8001908 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <LL_TIM_Init+0xd8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d105      	bne.n	8001ab2 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff47 	bl	8001940 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff8a 	bl	80019cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40000c00 	.word	0x40000c00
 8001ad4:	40014000 	.word	0x40014000
 8001ad8:	40014400 	.word	0x40014400
 8001adc:	40014800 	.word	0x40014800

08001ae0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af6:	d027      	beq.n	8001b48 <LL_TIM_OC_Init+0x68>
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afe:	d82a      	bhi.n	8001b56 <LL_TIM_OC_Init+0x76>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b06:	d018      	beq.n	8001b3a <LL_TIM_OC_Init+0x5a>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0e:	d822      	bhi.n	8001b56 <LL_TIM_OC_Init+0x76>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d003      	beq.n	8001b1e <LL_TIM_OC_Init+0x3e>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d007      	beq.n	8001b2c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001b1c:	e01b      	b.n	8001b56 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f81f 	bl	8001b64 <OC1Config>
 8001b26:	4603      	mov	r3, r0
 8001b28:	75fb      	strb	r3, [r7, #23]
      break;
 8001b2a:	e015      	b.n	8001b58 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f87e 	bl	8001c30 <OC2Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]
      break;
 8001b38:	e00e      	b.n	8001b58 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f8e1 	bl	8001d04 <OC3Config>
 8001b42:	4603      	mov	r3, r0
 8001b44:	75fb      	strb	r3, [r7, #23]
      break;
 8001b46:	e007      	b.n	8001b58 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f944 	bl	8001dd8 <OC4Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]
      break;
 8001b54:	e000      	b.n	8001b58 <LL_TIM_OC_Init+0x78>
      break;
 8001b56:	bf00      	nop
  }

  return result;
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	f023 0201 	bic.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f023 0202 	bic.w	r2, r3, #2
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f023 0201 	bic.w	r2, r3, #1
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <OC1Config+0xc8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d11e      	bne.n	8001c04 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f023 0208 	bic.w	r2, r3, #8
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f023 0204 	bic.w	r2, r3, #4
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fea0 	bl	800195c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40010000 	.word	0x40010000

08001c30 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f023 0210 	bic.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f023 0220 	bic.w	r2, r3, #32
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0210 	bic.w	r2, r3, #16
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <OC2Config+0xd0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d11f      	bne.n	8001cd8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	019b      	lsls	r3, r3, #6
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fe44 	bl	8001978 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40010000 	.word	0x40010000

08001d04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <OC3Config+0xd0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d11f      	bne.n	8001daa <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	029b      	lsls	r3, r3, #10
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fde9 	bl	8001994 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	031b      	lsls	r3, r3, #12
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	031b      	lsls	r3, r3, #12
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <OC4Config+0xa0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d107      	bne.n	8001e50 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fda4 	bl	80019b0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010000 	.word	0x40010000

08001e7c <LL_USART_IsEnabled>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_USART_SetStopBitsLength>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_USART_SetHWFlowCtrl>:
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	615a      	str	r2, [r3, #20]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_USART_SetBaudRate>:
{
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef4:	b09f      	sub	sp, #124	; 0x7c
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6778      	str	r0, [r7, #116]	; 0x74
 8001efa:	6739      	str	r1, [r7, #112]	; 0x70
 8001efc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001efe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f06:	f040 80bc 	bne.w	8002082 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f0c:	461c      	mov	r4, r3
 8001f0e:	f04f 0500 	mov.w	r5, #0
 8001f12:	4622      	mov	r2, r4
 8001f14:	462b      	mov	r3, r5
 8001f16:	eb12 0a02 	adds.w	sl, r2, r2
 8001f1a:	eb43 0b03 	adc.w	fp, r3, r3
 8001f1e:	4652      	mov	r2, sl
 8001f20:	465b      	mov	r3, fp
 8001f22:	1912      	adds	r2, r2, r4
 8001f24:	eb45 0303 	adc.w	r3, r5, r3
 8001f28:	f04f 0000 	mov.w	r0, #0
 8001f2c:	f04f 0100 	mov.w	r1, #0
 8001f30:	00d9      	lsls	r1, r3, #3
 8001f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f36:	00d0      	lsls	r0, r2, #3
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	1911      	adds	r1, r2, r4
 8001f3e:	6639      	str	r1, [r7, #96]	; 0x60
 8001f40:	416b      	adcs	r3, r5
 8001f42:	667b      	str	r3, [r7, #100]	; 0x64
 8001f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f46:	461a      	mov	r2, r3
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	1891      	adds	r1, r2, r2
 8001f4e:	6339      	str	r1, [r7, #48]	; 0x30
 8001f50:	415b      	adcs	r3, r3
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
 8001f54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f5c:	f7fe f990 	bl	8000280 <__aeabi_uldivmod>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4ba9      	ldr	r3, [pc, #676]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 8001f66:	fba3 2302 	umull	r2, r3, r3, r2
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	b29e      	uxth	r6, r3
 8001f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f74:	461c      	mov	r4, r3
 8001f76:	f04f 0500 	mov.w	r5, #0
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	462b      	mov	r3, r5
 8001f7e:	1891      	adds	r1, r2, r2
 8001f80:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f82:	415b      	adcs	r3, r3
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8a:	1912      	adds	r2, r2, r4
 8001f8c:	eb45 0303 	adc.w	r3, r5, r3
 8001f90:	f04f 0000 	mov.w	r0, #0
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	00d9      	lsls	r1, r3, #3
 8001f9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f9e:	00d0      	lsls	r0, r2, #3
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	1911      	adds	r1, r2, r4
 8001fa6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fa8:	416b      	adcs	r3, r5
 8001faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	1891      	adds	r1, r2, r2
 8001fb6:	6239      	str	r1, [r7, #32]
 8001fb8:	415b      	adcs	r3, r3
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fc0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fc4:	f7fe f95c 	bl	8000280 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4b8f      	ldr	r3, [pc, #572]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 8001fce:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2164      	movs	r1, #100	; 0x64
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	3332      	adds	r3, #50	; 0x32
 8001fe0:	4a8a      	ldr	r2, [pc, #552]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4433      	add	r3, r6
 8001ff6:	b29e      	uxth	r6, r3
 8001ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f04f 0100 	mov.w	r1, #0
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	1894      	adds	r4, r2, r2
 8002006:	61bc      	str	r4, [r7, #24]
 8002008:	415b      	adcs	r3, r3
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002010:	1812      	adds	r2, r2, r0
 8002012:	eb41 0303 	adc.w	r3, r1, r3
 8002016:	f04f 0400 	mov.w	r4, #0
 800201a:	f04f 0500 	mov.w	r5, #0
 800201e:	00dd      	lsls	r5, r3, #3
 8002020:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002024:	00d4      	lsls	r4, r2, #3
 8002026:	4622      	mov	r2, r4
 8002028:	462b      	mov	r3, r5
 800202a:	1814      	adds	r4, r2, r0
 800202c:	653c      	str	r4, [r7, #80]	; 0x50
 800202e:	414b      	adcs	r3, r1
 8002030:	657b      	str	r3, [r7, #84]	; 0x54
 8002032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002034:	461a      	mov	r2, r3
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	1891      	adds	r1, r2, r2
 800203c:	6139      	str	r1, [r7, #16]
 800203e:	415b      	adcs	r3, r3
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002046:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800204a:	f7fe f919 	bl	8000280 <__aeabi_uldivmod>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4b6e      	ldr	r3, [pc, #440]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 8002054:	fba3 1302 	umull	r1, r3, r3, r2
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	2164      	movs	r1, #100	; 0x64
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	3332      	adds	r3, #50	; 0x32
 8002066:	4a69      	ldr	r2, [pc, #420]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	b29b      	uxth	r3, r3
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	b29b      	uxth	r3, r3
 8002076:	4433      	add	r3, r6
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	e0be      	b.n	8002200 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002084:	461c      	mov	r4, r3
 8002086:	f04f 0500 	mov.w	r5, #0
 800208a:	4622      	mov	r2, r4
 800208c:	462b      	mov	r3, r5
 800208e:	eb12 0802 	adds.w	r8, r2, r2
 8002092:	eb43 0903 	adc.w	r9, r3, r3
 8002096:	4642      	mov	r2, r8
 8002098:	464b      	mov	r3, r9
 800209a:	1912      	adds	r2, r2, r4
 800209c:	eb45 0303 	adc.w	r3, r5, r3
 80020a0:	f04f 0000 	mov.w	r0, #0
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	00d9      	lsls	r1, r3, #3
 80020aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020ae:	00d0      	lsls	r0, r2, #3
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	1911      	adds	r1, r2, r4
 80020b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80020b8:	416b      	adcs	r3, r5
 80020ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020be:	4618      	mov	r0, r3
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	008b      	lsls	r3, r1, #2
 80020ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020d2:	0082      	lsls	r2, r0, #2
 80020d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020d8:	f7fe f8d2 	bl	8000280 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 80020e2:	fba3 2302 	umull	r2, r3, r3, r2
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	b29e      	uxth	r6, r3
 80020ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f0:	4618      	mov	r0, r3
 80020f2:	f04f 0100 	mov.w	r1, #0
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	1894      	adds	r4, r2, r2
 80020fc:	60bc      	str	r4, [r7, #8]
 80020fe:	415b      	adcs	r3, r3
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002106:	1812      	adds	r2, r2, r0
 8002108:	eb41 0303 	adc.w	r3, r1, r3
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	f04f 0500 	mov.w	r5, #0
 8002114:	00dd      	lsls	r5, r3, #3
 8002116:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800211a:	00d4      	lsls	r4, r2, #3
 800211c:	4622      	mov	r2, r4
 800211e:	462b      	mov	r3, r5
 8002120:	1814      	adds	r4, r2, r0
 8002122:	643c      	str	r4, [r7, #64]	; 0x40
 8002124:	414b      	adcs	r3, r1
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
 8002128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800212a:	4618      	mov	r0, r3
 800212c:	f04f 0100 	mov.w	r1, #0
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	008b      	lsls	r3, r1, #2
 800213a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800213e:	0082      	lsls	r2, r0, #2
 8002140:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002144:	f7fe f89c 	bl	8000280 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 800214e:	fba3 1302 	umull	r1, r3, r3, r2
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2164      	movs	r1, #100	; 0x64
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	3332      	adds	r3, #50	; 0x32
 8002160:	4a2a      	ldr	r2, [pc, #168]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	b29b      	uxth	r3, r3
 800216a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216e:	b29b      	uxth	r3, r3
 8002170:	4433      	add	r3, r6
 8002172:	b29e      	uxth	r6, r3
 8002174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002176:	4618      	mov	r0, r3
 8002178:	f04f 0100 	mov.w	r1, #0
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	1894      	adds	r4, r2, r2
 8002182:	603c      	str	r4, [r7, #0]
 8002184:	415b      	adcs	r3, r3
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	1812      	adds	r2, r2, r0
 800218e:	eb41 0303 	adc.w	r3, r1, r3
 8002192:	f04f 0400 	mov.w	r4, #0
 8002196:	f04f 0500 	mov.w	r5, #0
 800219a:	00dd      	lsls	r5, r3, #3
 800219c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021a0:	00d4      	lsls	r4, r2, #3
 80021a2:	4622      	mov	r2, r4
 80021a4:	462b      	mov	r3, r5
 80021a6:	1814      	adds	r4, r2, r0
 80021a8:	63bc      	str	r4, [r7, #56]	; 0x38
 80021aa:	414b      	adcs	r3, r1
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b0:	4618      	mov	r0, r3
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	008b      	lsls	r3, r1, #2
 80021c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80021c4:	0082      	lsls	r2, r0, #2
 80021c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021ca:	f7fe f859 	bl	8000280 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 80021d4:	fba3 1302 	umull	r1, r3, r3, r2
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	2164      	movs	r1, #100	; 0x64
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	3332      	adds	r3, #50	; 0x32
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <LL_USART_SetBaudRate+0x31c>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4433      	add	r3, r6
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	bf00      	nop
 8002202:	377c      	adds	r7, #124	; 0x7c
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220a:	bf00      	nop
 800220c:	51eb851f 	.word	0x51eb851f

08002210 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fe2a 	bl	8001e7c <LL_USART_IsEnabled>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d149      	bne.n	80022c2 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002236:	f023 030c 	bic.w	r3, r3, #12
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	6851      	ldr	r1, [r2, #4]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	4311      	orrs	r1, r2
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	6912      	ldr	r2, [r2, #16]
 8002248:	4311      	orrs	r1, r2
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	6992      	ldr	r2, [r2, #24]
 800224e:	430a      	orrs	r2, r1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fe21 	bl	8001ea4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fe2e 	bl	8001eca <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800226e:	f107 0308 	add.w	r3, r7, #8
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fa7e 	bl	8001774 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <LL_USART_Init+0xbc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	e00c      	b.n	80022a0 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <LL_USART_Init+0xc0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d102      	bne.n	8002294 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e005      	b.n	80022a0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <LL_USART_Init+0xc4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00d      	beq.n	80022c2 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80022ae:	2300      	movs	r3, #0
 80022b0:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fe17 	bl	8001ef0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40011000 	.word	0x40011000
 80022d0:	40004400 	.word	0x40004400
 80022d4:	40011400 	.word	0x40011400

080022d8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <LL_InitTick+0x30>)
 80022ec:	3b01      	subs	r3, #1
 80022ee:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <LL_InitTick+0x30>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <LL_InitTick+0x30>)
 80022f8:	2205      	movs	r2, #5
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e010 	.word	0xe000e010

0800230c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002314:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ffdd 	bl	80022d8 <LL_InitTick>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <LL_SetSystemCoreClock+0x1c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000000 	.word	0x20000000

08002348 <__errno>:
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <__errno+0x8>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000004 	.word	0x20000004

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	4d0d      	ldr	r5, [pc, #52]	; (800238c <__libc_init_array+0x38>)
 8002358:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <__libc_init_array+0x3c>)
 800235a:	1b64      	subs	r4, r4, r5
 800235c:	10a4      	asrs	r4, r4, #2
 800235e:	2600      	movs	r6, #0
 8002360:	42a6      	cmp	r6, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	4d0b      	ldr	r5, [pc, #44]	; (8002394 <__libc_init_array+0x40>)
 8002366:	4c0c      	ldr	r4, [pc, #48]	; (8002398 <__libc_init_array+0x44>)
 8002368:	f001 f822 	bl	80033b0 <_init>
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	2600      	movs	r6, #0
 8002372:	42a6      	cmp	r6, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f855 3b04 	ldr.w	r3, [r5], #4
 800237c:	4798      	blx	r3
 800237e:	3601      	adds	r6, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f855 3b04 	ldr.w	r3, [r5], #4
 8002386:	4798      	blx	r3
 8002388:	3601      	adds	r6, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	08003544 	.word	0x08003544
 8002390:	08003544 	.word	0x08003544
 8002394:	08003544 	.word	0x08003544
 8002398:	08003548 	.word	0x08003548

0800239c <memset>:
 800239c:	4402      	add	r2, r0
 800239e:	4603      	mov	r3, r0
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d100      	bne.n	80023a6 <memset+0xa>
 80023a4:	4770      	bx	lr
 80023a6:	f803 1b01 	strb.w	r1, [r3], #1
 80023aa:	e7f9      	b.n	80023a0 <memset+0x4>

080023ac <rand>:
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <rand+0x60>)
 80023ae:	b510      	push	{r4, lr}
 80023b0:	681c      	ldr	r4, [r3, #0]
 80023b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023b4:	b9b3      	cbnz	r3, 80023e4 <rand+0x38>
 80023b6:	2018      	movs	r0, #24
 80023b8:	f000 f868 	bl	800248c <malloc>
 80023bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80023be:	b928      	cbnz	r0, 80023cc <rand+0x20>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <rand+0x64>)
 80023c4:	4813      	ldr	r0, [pc, #76]	; (8002414 <rand+0x68>)
 80023c6:	214e      	movs	r1, #78	; 0x4e
 80023c8:	f000 f830 	bl	800242c <__assert_func>
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <rand+0x6c>)
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <rand+0x70>)
 80023d0:	e9c0 2300 	strd	r2, r3, [r0]
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <rand+0x74>)
 80023d6:	6083      	str	r3, [r0, #8]
 80023d8:	230b      	movs	r3, #11
 80023da:	8183      	strh	r3, [r0, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	2300      	movs	r3, #0
 80023e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80023e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023e6:	480f      	ldr	r0, [pc, #60]	; (8002424 <rand+0x78>)
 80023e8:	690a      	ldr	r2, [r1, #16]
 80023ea:	694b      	ldr	r3, [r1, #20]
 80023ec:	4c0e      	ldr	r4, [pc, #56]	; (8002428 <rand+0x7c>)
 80023ee:	4350      	muls	r0, r2
 80023f0:	fb04 0003 	mla	r0, r4, r3, r0
 80023f4:	fba2 3404 	umull	r3, r4, r2, r4
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	4404      	add	r4, r0
 80023fc:	f144 0000 	adc.w	r0, r4, #0
 8002400:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002404:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002408:	bd10      	pop	{r4, pc}
 800240a:	bf00      	nop
 800240c:	20000004 	.word	0x20000004
 8002410:	080033f4 	.word	0x080033f4
 8002414:	0800340b 	.word	0x0800340b
 8002418:	abcd330e 	.word	0xabcd330e
 800241c:	e66d1234 	.word	0xe66d1234
 8002420:	0005deec 	.word	0x0005deec
 8002424:	5851f42d 	.word	0x5851f42d
 8002428:	4c957f2d 	.word	0x4c957f2d

0800242c <__assert_func>:
 800242c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800242e:	4614      	mov	r4, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <__assert_func+0x2c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4605      	mov	r5, r0
 8002438:	68d8      	ldr	r0, [r3, #12]
 800243a:	b14c      	cbz	r4, 8002450 <__assert_func+0x24>
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <__assert_func+0x30>)
 800243e:	9100      	str	r1, [sp, #0]
 8002440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002444:	4906      	ldr	r1, [pc, #24]	; (8002460 <__assert_func+0x34>)
 8002446:	462b      	mov	r3, r5
 8002448:	f000 f80e 	bl	8002468 <fiprintf>
 800244c:	f000 fc8e 	bl	8002d6c <abort>
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__assert_func+0x38>)
 8002452:	461c      	mov	r4, r3
 8002454:	e7f3      	b.n	800243e <__assert_func+0x12>
 8002456:	bf00      	nop
 8002458:	20000004 	.word	0x20000004
 800245c:	0800346a 	.word	0x0800346a
 8002460:	08003477 	.word	0x08003477
 8002464:	080034a5 	.word	0x080034a5

08002468 <fiprintf>:
 8002468:	b40e      	push	{r1, r2, r3}
 800246a:	b503      	push	{r0, r1, lr}
 800246c:	4601      	mov	r1, r0
 800246e:	ab03      	add	r3, sp, #12
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <fiprintf+0x20>)
 8002472:	f853 2b04 	ldr.w	r2, [r3], #4
 8002476:	6800      	ldr	r0, [r0, #0]
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	f000 f8e3 	bl	8002644 <_vfiprintf_r>
 800247e:	b002      	add	sp, #8
 8002480:	f85d eb04 	ldr.w	lr, [sp], #4
 8002484:	b003      	add	sp, #12
 8002486:	4770      	bx	lr
 8002488:	20000004 	.word	0x20000004

0800248c <malloc>:
 800248c:	4b02      	ldr	r3, [pc, #8]	; (8002498 <malloc+0xc>)
 800248e:	4601      	mov	r1, r0
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	f000 b853 	b.w	800253c <_malloc_r>
 8002496:	bf00      	nop
 8002498:	20000004 	.word	0x20000004

0800249c <_free_r>:
 800249c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800249e:	2900      	cmp	r1, #0
 80024a0:	d048      	beq.n	8002534 <_free_r+0x98>
 80024a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024a6:	9001      	str	r0, [sp, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f1a1 0404 	sub.w	r4, r1, #4
 80024ae:	bfb8      	it	lt
 80024b0:	18e4      	addlt	r4, r4, r3
 80024b2:	f000 fe81 	bl	80031b8 <__malloc_lock>
 80024b6:	4a20      	ldr	r2, [pc, #128]	; (8002538 <_free_r+0x9c>)
 80024b8:	9801      	ldr	r0, [sp, #4]
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	4615      	mov	r5, r2
 80024be:	b933      	cbnz	r3, 80024ce <_free_r+0x32>
 80024c0:	6063      	str	r3, [r4, #4]
 80024c2:	6014      	str	r4, [r2, #0]
 80024c4:	b003      	add	sp, #12
 80024c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024ca:	f000 be7b 	b.w	80031c4 <__malloc_unlock>
 80024ce:	42a3      	cmp	r3, r4
 80024d0:	d90b      	bls.n	80024ea <_free_r+0x4e>
 80024d2:	6821      	ldr	r1, [r4, #0]
 80024d4:	1862      	adds	r2, r4, r1
 80024d6:	4293      	cmp	r3, r2
 80024d8:	bf04      	itt	eq
 80024da:	681a      	ldreq	r2, [r3, #0]
 80024dc:	685b      	ldreq	r3, [r3, #4]
 80024de:	6063      	str	r3, [r4, #4]
 80024e0:	bf04      	itt	eq
 80024e2:	1852      	addeq	r2, r2, r1
 80024e4:	6022      	streq	r2, [r4, #0]
 80024e6:	602c      	str	r4, [r5, #0]
 80024e8:	e7ec      	b.n	80024c4 <_free_r+0x28>
 80024ea:	461a      	mov	r2, r3
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	b10b      	cbz	r3, 80024f4 <_free_r+0x58>
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	d9fa      	bls.n	80024ea <_free_r+0x4e>
 80024f4:	6811      	ldr	r1, [r2, #0]
 80024f6:	1855      	adds	r5, r2, r1
 80024f8:	42a5      	cmp	r5, r4
 80024fa:	d10b      	bne.n	8002514 <_free_r+0x78>
 80024fc:	6824      	ldr	r4, [r4, #0]
 80024fe:	4421      	add	r1, r4
 8002500:	1854      	adds	r4, r2, r1
 8002502:	42a3      	cmp	r3, r4
 8002504:	6011      	str	r1, [r2, #0]
 8002506:	d1dd      	bne.n	80024c4 <_free_r+0x28>
 8002508:	681c      	ldr	r4, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	6053      	str	r3, [r2, #4]
 800250e:	4421      	add	r1, r4
 8002510:	6011      	str	r1, [r2, #0]
 8002512:	e7d7      	b.n	80024c4 <_free_r+0x28>
 8002514:	d902      	bls.n	800251c <_free_r+0x80>
 8002516:	230c      	movs	r3, #12
 8002518:	6003      	str	r3, [r0, #0]
 800251a:	e7d3      	b.n	80024c4 <_free_r+0x28>
 800251c:	6825      	ldr	r5, [r4, #0]
 800251e:	1961      	adds	r1, r4, r5
 8002520:	428b      	cmp	r3, r1
 8002522:	bf04      	itt	eq
 8002524:	6819      	ldreq	r1, [r3, #0]
 8002526:	685b      	ldreq	r3, [r3, #4]
 8002528:	6063      	str	r3, [r4, #4]
 800252a:	bf04      	itt	eq
 800252c:	1949      	addeq	r1, r1, r5
 800252e:	6021      	streq	r1, [r4, #0]
 8002530:	6054      	str	r4, [r2, #4]
 8002532:	e7c7      	b.n	80024c4 <_free_r+0x28>
 8002534:	b003      	add	sp, #12
 8002536:	bd30      	pop	{r4, r5, pc}
 8002538:	20000088 	.word	0x20000088

0800253c <_malloc_r>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	1ccd      	adds	r5, r1, #3
 8002540:	f025 0503 	bic.w	r5, r5, #3
 8002544:	3508      	adds	r5, #8
 8002546:	2d0c      	cmp	r5, #12
 8002548:	bf38      	it	cc
 800254a:	250c      	movcc	r5, #12
 800254c:	2d00      	cmp	r5, #0
 800254e:	4606      	mov	r6, r0
 8002550:	db01      	blt.n	8002556 <_malloc_r+0x1a>
 8002552:	42a9      	cmp	r1, r5
 8002554:	d903      	bls.n	800255e <_malloc_r+0x22>
 8002556:	230c      	movs	r3, #12
 8002558:	6033      	str	r3, [r6, #0]
 800255a:	2000      	movs	r0, #0
 800255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800255e:	f000 fe2b 	bl	80031b8 <__malloc_lock>
 8002562:	4921      	ldr	r1, [pc, #132]	; (80025e8 <_malloc_r+0xac>)
 8002564:	680a      	ldr	r2, [r1, #0]
 8002566:	4614      	mov	r4, r2
 8002568:	b99c      	cbnz	r4, 8002592 <_malloc_r+0x56>
 800256a:	4f20      	ldr	r7, [pc, #128]	; (80025ec <_malloc_r+0xb0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b923      	cbnz	r3, 800257a <_malloc_r+0x3e>
 8002570:	4621      	mov	r1, r4
 8002572:	4630      	mov	r0, r6
 8002574:	f000 fb2a 	bl	8002bcc <_sbrk_r>
 8002578:	6038      	str	r0, [r7, #0]
 800257a:	4629      	mov	r1, r5
 800257c:	4630      	mov	r0, r6
 800257e:	f000 fb25 	bl	8002bcc <_sbrk_r>
 8002582:	1c43      	adds	r3, r0, #1
 8002584:	d123      	bne.n	80025ce <_malloc_r+0x92>
 8002586:	230c      	movs	r3, #12
 8002588:	6033      	str	r3, [r6, #0]
 800258a:	4630      	mov	r0, r6
 800258c:	f000 fe1a 	bl	80031c4 <__malloc_unlock>
 8002590:	e7e3      	b.n	800255a <_malloc_r+0x1e>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	1b5b      	subs	r3, r3, r5
 8002596:	d417      	bmi.n	80025c8 <_malloc_r+0x8c>
 8002598:	2b0b      	cmp	r3, #11
 800259a:	d903      	bls.n	80025a4 <_malloc_r+0x68>
 800259c:	6023      	str	r3, [r4, #0]
 800259e:	441c      	add	r4, r3
 80025a0:	6025      	str	r5, [r4, #0]
 80025a2:	e004      	b.n	80025ae <_malloc_r+0x72>
 80025a4:	6863      	ldr	r3, [r4, #4]
 80025a6:	42a2      	cmp	r2, r4
 80025a8:	bf0c      	ite	eq
 80025aa:	600b      	streq	r3, [r1, #0]
 80025ac:	6053      	strne	r3, [r2, #4]
 80025ae:	4630      	mov	r0, r6
 80025b0:	f000 fe08 	bl	80031c4 <__malloc_unlock>
 80025b4:	f104 000b 	add.w	r0, r4, #11
 80025b8:	1d23      	adds	r3, r4, #4
 80025ba:	f020 0007 	bic.w	r0, r0, #7
 80025be:	1ac2      	subs	r2, r0, r3
 80025c0:	d0cc      	beq.n	800255c <_malloc_r+0x20>
 80025c2:	1a1b      	subs	r3, r3, r0
 80025c4:	50a3      	str	r3, [r4, r2]
 80025c6:	e7c9      	b.n	800255c <_malloc_r+0x20>
 80025c8:	4622      	mov	r2, r4
 80025ca:	6864      	ldr	r4, [r4, #4]
 80025cc:	e7cc      	b.n	8002568 <_malloc_r+0x2c>
 80025ce:	1cc4      	adds	r4, r0, #3
 80025d0:	f024 0403 	bic.w	r4, r4, #3
 80025d4:	42a0      	cmp	r0, r4
 80025d6:	d0e3      	beq.n	80025a0 <_malloc_r+0x64>
 80025d8:	1a21      	subs	r1, r4, r0
 80025da:	4630      	mov	r0, r6
 80025dc:	f000 faf6 	bl	8002bcc <_sbrk_r>
 80025e0:	3001      	adds	r0, #1
 80025e2:	d1dd      	bne.n	80025a0 <_malloc_r+0x64>
 80025e4:	e7cf      	b.n	8002586 <_malloc_r+0x4a>
 80025e6:	bf00      	nop
 80025e8:	20000088 	.word	0x20000088
 80025ec:	2000008c 	.word	0x2000008c

080025f0 <__sfputc_r>:
 80025f0:	6893      	ldr	r3, [r2, #8]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	b410      	push	{r4}
 80025f8:	6093      	str	r3, [r2, #8]
 80025fa:	da08      	bge.n	800260e <__sfputc_r+0x1e>
 80025fc:	6994      	ldr	r4, [r2, #24]
 80025fe:	42a3      	cmp	r3, r4
 8002600:	db01      	blt.n	8002606 <__sfputc_r+0x16>
 8002602:	290a      	cmp	r1, #10
 8002604:	d103      	bne.n	800260e <__sfputc_r+0x1e>
 8002606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800260a:	f000 baef 	b.w	8002bec <__swbuf_r>
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	1c58      	adds	r0, r3, #1
 8002612:	6010      	str	r0, [r2, #0]
 8002614:	7019      	strb	r1, [r3, #0]
 8002616:	4608      	mov	r0, r1
 8002618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800261c:	4770      	bx	lr

0800261e <__sfputs_r>:
 800261e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002620:	4606      	mov	r6, r0
 8002622:	460f      	mov	r7, r1
 8002624:	4614      	mov	r4, r2
 8002626:	18d5      	adds	r5, r2, r3
 8002628:	42ac      	cmp	r4, r5
 800262a:	d101      	bne.n	8002630 <__sfputs_r+0x12>
 800262c:	2000      	movs	r0, #0
 800262e:	e007      	b.n	8002640 <__sfputs_r+0x22>
 8002630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002634:	463a      	mov	r2, r7
 8002636:	4630      	mov	r0, r6
 8002638:	f7ff ffda 	bl	80025f0 <__sfputc_r>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d1f3      	bne.n	8002628 <__sfputs_r+0xa>
 8002640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002644 <_vfiprintf_r>:
 8002644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002648:	460d      	mov	r5, r1
 800264a:	b09d      	sub	sp, #116	; 0x74
 800264c:	4614      	mov	r4, r2
 800264e:	4698      	mov	r8, r3
 8002650:	4606      	mov	r6, r0
 8002652:	b118      	cbz	r0, 800265c <_vfiprintf_r+0x18>
 8002654:	6983      	ldr	r3, [r0, #24]
 8002656:	b90b      	cbnz	r3, 800265c <_vfiprintf_r+0x18>
 8002658:	f000 fcaa 	bl	8002fb0 <__sinit>
 800265c:	4b89      	ldr	r3, [pc, #548]	; (8002884 <_vfiprintf_r+0x240>)
 800265e:	429d      	cmp	r5, r3
 8002660:	d11b      	bne.n	800269a <_vfiprintf_r+0x56>
 8002662:	6875      	ldr	r5, [r6, #4]
 8002664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002666:	07d9      	lsls	r1, r3, #31
 8002668:	d405      	bmi.n	8002676 <_vfiprintf_r+0x32>
 800266a:	89ab      	ldrh	r3, [r5, #12]
 800266c:	059a      	lsls	r2, r3, #22
 800266e:	d402      	bmi.n	8002676 <_vfiprintf_r+0x32>
 8002670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002672:	f000 fd3b 	bl	80030ec <__retarget_lock_acquire_recursive>
 8002676:	89ab      	ldrh	r3, [r5, #12]
 8002678:	071b      	lsls	r3, r3, #28
 800267a:	d501      	bpl.n	8002680 <_vfiprintf_r+0x3c>
 800267c:	692b      	ldr	r3, [r5, #16]
 800267e:	b9eb      	cbnz	r3, 80026bc <_vfiprintf_r+0x78>
 8002680:	4629      	mov	r1, r5
 8002682:	4630      	mov	r0, r6
 8002684:	f000 fb04 	bl	8002c90 <__swsetup_r>
 8002688:	b1c0      	cbz	r0, 80026bc <_vfiprintf_r+0x78>
 800268a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800268c:	07dc      	lsls	r4, r3, #31
 800268e:	d50e      	bpl.n	80026ae <_vfiprintf_r+0x6a>
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	b01d      	add	sp, #116	; 0x74
 8002696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800269a:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <_vfiprintf_r+0x244>)
 800269c:	429d      	cmp	r5, r3
 800269e:	d101      	bne.n	80026a4 <_vfiprintf_r+0x60>
 80026a0:	68b5      	ldr	r5, [r6, #8]
 80026a2:	e7df      	b.n	8002664 <_vfiprintf_r+0x20>
 80026a4:	4b79      	ldr	r3, [pc, #484]	; (800288c <_vfiprintf_r+0x248>)
 80026a6:	429d      	cmp	r5, r3
 80026a8:	bf08      	it	eq
 80026aa:	68f5      	ldreq	r5, [r6, #12]
 80026ac:	e7da      	b.n	8002664 <_vfiprintf_r+0x20>
 80026ae:	89ab      	ldrh	r3, [r5, #12]
 80026b0:	0598      	lsls	r0, r3, #22
 80026b2:	d4ed      	bmi.n	8002690 <_vfiprintf_r+0x4c>
 80026b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026b6:	f000 fd1a 	bl	80030ee <__retarget_lock_release_recursive>
 80026ba:	e7e9      	b.n	8002690 <_vfiprintf_r+0x4c>
 80026bc:	2300      	movs	r3, #0
 80026be:	9309      	str	r3, [sp, #36]	; 0x24
 80026c0:	2320      	movs	r3, #32
 80026c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80026ca:	2330      	movs	r3, #48	; 0x30
 80026cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002890 <_vfiprintf_r+0x24c>
 80026d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026d4:	f04f 0901 	mov.w	r9, #1
 80026d8:	4623      	mov	r3, r4
 80026da:	469a      	mov	sl, r3
 80026dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026e0:	b10a      	cbz	r2, 80026e6 <_vfiprintf_r+0xa2>
 80026e2:	2a25      	cmp	r2, #37	; 0x25
 80026e4:	d1f9      	bne.n	80026da <_vfiprintf_r+0x96>
 80026e6:	ebba 0b04 	subs.w	fp, sl, r4
 80026ea:	d00b      	beq.n	8002704 <_vfiprintf_r+0xc0>
 80026ec:	465b      	mov	r3, fp
 80026ee:	4622      	mov	r2, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	4630      	mov	r0, r6
 80026f4:	f7ff ff93 	bl	800261e <__sfputs_r>
 80026f8:	3001      	adds	r0, #1
 80026fa:	f000 80aa 	beq.w	8002852 <_vfiprintf_r+0x20e>
 80026fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002700:	445a      	add	r2, fp
 8002702:	9209      	str	r2, [sp, #36]	; 0x24
 8002704:	f89a 3000 	ldrb.w	r3, [sl]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a2 	beq.w	8002852 <_vfiprintf_r+0x20e>
 800270e:	2300      	movs	r3, #0
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002718:	f10a 0a01 	add.w	sl, sl, #1
 800271c:	9304      	str	r3, [sp, #16]
 800271e:	9307      	str	r3, [sp, #28]
 8002720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002724:	931a      	str	r3, [sp, #104]	; 0x68
 8002726:	4654      	mov	r4, sl
 8002728:	2205      	movs	r2, #5
 800272a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800272e:	4858      	ldr	r0, [pc, #352]	; (8002890 <_vfiprintf_r+0x24c>)
 8002730:	f7fd fd56 	bl	80001e0 <memchr>
 8002734:	9a04      	ldr	r2, [sp, #16]
 8002736:	b9d8      	cbnz	r0, 8002770 <_vfiprintf_r+0x12c>
 8002738:	06d1      	lsls	r1, r2, #27
 800273a:	bf44      	itt	mi
 800273c:	2320      	movmi	r3, #32
 800273e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002742:	0713      	lsls	r3, r2, #28
 8002744:	bf44      	itt	mi
 8002746:	232b      	movmi	r3, #43	; 0x2b
 8002748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800274c:	f89a 3000 	ldrb.w	r3, [sl]
 8002750:	2b2a      	cmp	r3, #42	; 0x2a
 8002752:	d015      	beq.n	8002780 <_vfiprintf_r+0x13c>
 8002754:	9a07      	ldr	r2, [sp, #28]
 8002756:	4654      	mov	r4, sl
 8002758:	2000      	movs	r0, #0
 800275a:	f04f 0c0a 	mov.w	ip, #10
 800275e:	4621      	mov	r1, r4
 8002760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002764:	3b30      	subs	r3, #48	; 0x30
 8002766:	2b09      	cmp	r3, #9
 8002768:	d94e      	bls.n	8002808 <_vfiprintf_r+0x1c4>
 800276a:	b1b0      	cbz	r0, 800279a <_vfiprintf_r+0x156>
 800276c:	9207      	str	r2, [sp, #28]
 800276e:	e014      	b.n	800279a <_vfiprintf_r+0x156>
 8002770:	eba0 0308 	sub.w	r3, r0, r8
 8002774:	fa09 f303 	lsl.w	r3, r9, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	9304      	str	r3, [sp, #16]
 800277c:	46a2      	mov	sl, r4
 800277e:	e7d2      	b.n	8002726 <_vfiprintf_r+0xe2>
 8002780:	9b03      	ldr	r3, [sp, #12]
 8002782:	1d19      	adds	r1, r3, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	9103      	str	r1, [sp, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	bfbb      	ittet	lt
 800278c:	425b      	neglt	r3, r3
 800278e:	f042 0202 	orrlt.w	r2, r2, #2
 8002792:	9307      	strge	r3, [sp, #28]
 8002794:	9307      	strlt	r3, [sp, #28]
 8002796:	bfb8      	it	lt
 8002798:	9204      	strlt	r2, [sp, #16]
 800279a:	7823      	ldrb	r3, [r4, #0]
 800279c:	2b2e      	cmp	r3, #46	; 0x2e
 800279e:	d10c      	bne.n	80027ba <_vfiprintf_r+0x176>
 80027a0:	7863      	ldrb	r3, [r4, #1]
 80027a2:	2b2a      	cmp	r3, #42	; 0x2a
 80027a4:	d135      	bne.n	8002812 <_vfiprintf_r+0x1ce>
 80027a6:	9b03      	ldr	r3, [sp, #12]
 80027a8:	1d1a      	adds	r2, r3, #4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	9203      	str	r2, [sp, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80027b6:	3402      	adds	r4, #2
 80027b8:	9305      	str	r3, [sp, #20]
 80027ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80028a0 <_vfiprintf_r+0x25c>
 80027be:	7821      	ldrb	r1, [r4, #0]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4650      	mov	r0, sl
 80027c4:	f7fd fd0c 	bl	80001e0 <memchr>
 80027c8:	b140      	cbz	r0, 80027dc <_vfiprintf_r+0x198>
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	eba0 000a 	sub.w	r0, r0, sl
 80027d0:	fa03 f000 	lsl.w	r0, r3, r0
 80027d4:	9b04      	ldr	r3, [sp, #16]
 80027d6:	4303      	orrs	r3, r0
 80027d8:	3401      	adds	r4, #1
 80027da:	9304      	str	r3, [sp, #16]
 80027dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027e0:	482c      	ldr	r0, [pc, #176]	; (8002894 <_vfiprintf_r+0x250>)
 80027e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e6:	2206      	movs	r2, #6
 80027e8:	f7fd fcfa 	bl	80001e0 <memchr>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d03f      	beq.n	8002870 <_vfiprintf_r+0x22c>
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <_vfiprintf_r+0x254>)
 80027f2:	bb1b      	cbnz	r3, 800283c <_vfiprintf_r+0x1f8>
 80027f4:	9b03      	ldr	r3, [sp, #12]
 80027f6:	3307      	adds	r3, #7
 80027f8:	f023 0307 	bic.w	r3, r3, #7
 80027fc:	3308      	adds	r3, #8
 80027fe:	9303      	str	r3, [sp, #12]
 8002800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002802:	443b      	add	r3, r7
 8002804:	9309      	str	r3, [sp, #36]	; 0x24
 8002806:	e767      	b.n	80026d8 <_vfiprintf_r+0x94>
 8002808:	fb0c 3202 	mla	r2, ip, r2, r3
 800280c:	460c      	mov	r4, r1
 800280e:	2001      	movs	r0, #1
 8002810:	e7a5      	b.n	800275e <_vfiprintf_r+0x11a>
 8002812:	2300      	movs	r3, #0
 8002814:	3401      	adds	r4, #1
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	4619      	mov	r1, r3
 800281a:	f04f 0c0a 	mov.w	ip, #10
 800281e:	4620      	mov	r0, r4
 8002820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002824:	3a30      	subs	r2, #48	; 0x30
 8002826:	2a09      	cmp	r2, #9
 8002828:	d903      	bls.n	8002832 <_vfiprintf_r+0x1ee>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0c5      	beq.n	80027ba <_vfiprintf_r+0x176>
 800282e:	9105      	str	r1, [sp, #20]
 8002830:	e7c3      	b.n	80027ba <_vfiprintf_r+0x176>
 8002832:	fb0c 2101 	mla	r1, ip, r1, r2
 8002836:	4604      	mov	r4, r0
 8002838:	2301      	movs	r3, #1
 800283a:	e7f0      	b.n	800281e <_vfiprintf_r+0x1da>
 800283c:	ab03      	add	r3, sp, #12
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	462a      	mov	r2, r5
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <_vfiprintf_r+0x258>)
 8002844:	a904      	add	r1, sp, #16
 8002846:	4630      	mov	r0, r6
 8002848:	f3af 8000 	nop.w
 800284c:	4607      	mov	r7, r0
 800284e:	1c78      	adds	r0, r7, #1
 8002850:	d1d6      	bne.n	8002800 <_vfiprintf_r+0x1bc>
 8002852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002854:	07d9      	lsls	r1, r3, #31
 8002856:	d405      	bmi.n	8002864 <_vfiprintf_r+0x220>
 8002858:	89ab      	ldrh	r3, [r5, #12]
 800285a:	059a      	lsls	r2, r3, #22
 800285c:	d402      	bmi.n	8002864 <_vfiprintf_r+0x220>
 800285e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002860:	f000 fc45 	bl	80030ee <__retarget_lock_release_recursive>
 8002864:	89ab      	ldrh	r3, [r5, #12]
 8002866:	065b      	lsls	r3, r3, #25
 8002868:	f53f af12 	bmi.w	8002690 <_vfiprintf_r+0x4c>
 800286c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800286e:	e711      	b.n	8002694 <_vfiprintf_r+0x50>
 8002870:	ab03      	add	r3, sp, #12
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	462a      	mov	r2, r5
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <_vfiprintf_r+0x258>)
 8002878:	a904      	add	r1, sp, #16
 800287a:	4630      	mov	r0, r6
 800287c:	f000 f880 	bl	8002980 <_printf_i>
 8002880:	e7e4      	b.n	800284c <_vfiprintf_r+0x208>
 8002882:	bf00      	nop
 8002884:	080034fc 	.word	0x080034fc
 8002888:	0800351c 	.word	0x0800351c
 800288c:	080034dc 	.word	0x080034dc
 8002890:	080034a6 	.word	0x080034a6
 8002894:	080034b0 	.word	0x080034b0
 8002898:	00000000 	.word	0x00000000
 800289c:	0800261f 	.word	0x0800261f
 80028a0:	080034ac 	.word	0x080034ac

080028a4 <_printf_common>:
 80028a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028a8:	4616      	mov	r6, r2
 80028aa:	4699      	mov	r9, r3
 80028ac:	688a      	ldr	r2, [r1, #8]
 80028ae:	690b      	ldr	r3, [r1, #16]
 80028b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bfb8      	it	lt
 80028b8:	4613      	movlt	r3, r2
 80028ba:	6033      	str	r3, [r6, #0]
 80028bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028c0:	4607      	mov	r7, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	b10a      	cbz	r2, 80028ca <_printf_common+0x26>
 80028c6:	3301      	adds	r3, #1
 80028c8:	6033      	str	r3, [r6, #0]
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	0699      	lsls	r1, r3, #26
 80028ce:	bf42      	ittt	mi
 80028d0:	6833      	ldrmi	r3, [r6, #0]
 80028d2:	3302      	addmi	r3, #2
 80028d4:	6033      	strmi	r3, [r6, #0]
 80028d6:	6825      	ldr	r5, [r4, #0]
 80028d8:	f015 0506 	ands.w	r5, r5, #6
 80028dc:	d106      	bne.n	80028ec <_printf_common+0x48>
 80028de:	f104 0a19 	add.w	sl, r4, #25
 80028e2:	68e3      	ldr	r3, [r4, #12]
 80028e4:	6832      	ldr	r2, [r6, #0]
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	42ab      	cmp	r3, r5
 80028ea:	dc26      	bgt.n	800293a <_printf_common+0x96>
 80028ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028f0:	1e13      	subs	r3, r2, #0
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	bf18      	it	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	0692      	lsls	r2, r2, #26
 80028fa:	d42b      	bmi.n	8002954 <_printf_common+0xb0>
 80028fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002900:	4649      	mov	r1, r9
 8002902:	4638      	mov	r0, r7
 8002904:	47c0      	blx	r8
 8002906:	3001      	adds	r0, #1
 8002908:	d01e      	beq.n	8002948 <_printf_common+0xa4>
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	68e5      	ldr	r5, [r4, #12]
 800290e:	6832      	ldr	r2, [r6, #0]
 8002910:	f003 0306 	and.w	r3, r3, #6
 8002914:	2b04      	cmp	r3, #4
 8002916:	bf08      	it	eq
 8002918:	1aad      	subeq	r5, r5, r2
 800291a:	68a3      	ldr	r3, [r4, #8]
 800291c:	6922      	ldr	r2, [r4, #16]
 800291e:	bf0c      	ite	eq
 8002920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002924:	2500      	movne	r5, #0
 8002926:	4293      	cmp	r3, r2
 8002928:	bfc4      	itt	gt
 800292a:	1a9b      	subgt	r3, r3, r2
 800292c:	18ed      	addgt	r5, r5, r3
 800292e:	2600      	movs	r6, #0
 8002930:	341a      	adds	r4, #26
 8002932:	42b5      	cmp	r5, r6
 8002934:	d11a      	bne.n	800296c <_printf_common+0xc8>
 8002936:	2000      	movs	r0, #0
 8002938:	e008      	b.n	800294c <_printf_common+0xa8>
 800293a:	2301      	movs	r3, #1
 800293c:	4652      	mov	r2, sl
 800293e:	4649      	mov	r1, r9
 8002940:	4638      	mov	r0, r7
 8002942:	47c0      	blx	r8
 8002944:	3001      	adds	r0, #1
 8002946:	d103      	bne.n	8002950 <_printf_common+0xac>
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002950:	3501      	adds	r5, #1
 8002952:	e7c6      	b.n	80028e2 <_printf_common+0x3e>
 8002954:	18e1      	adds	r1, r4, r3
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	2030      	movs	r0, #48	; 0x30
 800295a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800295e:	4422      	add	r2, r4
 8002960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002968:	3302      	adds	r3, #2
 800296a:	e7c7      	b.n	80028fc <_printf_common+0x58>
 800296c:	2301      	movs	r3, #1
 800296e:	4622      	mov	r2, r4
 8002970:	4649      	mov	r1, r9
 8002972:	4638      	mov	r0, r7
 8002974:	47c0      	blx	r8
 8002976:	3001      	adds	r0, #1
 8002978:	d0e6      	beq.n	8002948 <_printf_common+0xa4>
 800297a:	3601      	adds	r6, #1
 800297c:	e7d9      	b.n	8002932 <_printf_common+0x8e>
	...

08002980 <_printf_i>:
 8002980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002984:	460c      	mov	r4, r1
 8002986:	4691      	mov	r9, r2
 8002988:	7e27      	ldrb	r7, [r4, #24]
 800298a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800298c:	2f78      	cmp	r7, #120	; 0x78
 800298e:	4680      	mov	r8, r0
 8002990:	469a      	mov	sl, r3
 8002992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002996:	d807      	bhi.n	80029a8 <_printf_i+0x28>
 8002998:	2f62      	cmp	r7, #98	; 0x62
 800299a:	d80a      	bhi.n	80029b2 <_printf_i+0x32>
 800299c:	2f00      	cmp	r7, #0
 800299e:	f000 80d8 	beq.w	8002b52 <_printf_i+0x1d2>
 80029a2:	2f58      	cmp	r7, #88	; 0x58
 80029a4:	f000 80a3 	beq.w	8002aee <_printf_i+0x16e>
 80029a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029b0:	e03a      	b.n	8002a28 <_printf_i+0xa8>
 80029b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029b6:	2b15      	cmp	r3, #21
 80029b8:	d8f6      	bhi.n	80029a8 <_printf_i+0x28>
 80029ba:	a001      	add	r0, pc, #4	; (adr r0, 80029c0 <_printf_i+0x40>)
 80029bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80029c0:	08002a19 	.word	0x08002a19
 80029c4:	08002a2d 	.word	0x08002a2d
 80029c8:	080029a9 	.word	0x080029a9
 80029cc:	080029a9 	.word	0x080029a9
 80029d0:	080029a9 	.word	0x080029a9
 80029d4:	080029a9 	.word	0x080029a9
 80029d8:	08002a2d 	.word	0x08002a2d
 80029dc:	080029a9 	.word	0x080029a9
 80029e0:	080029a9 	.word	0x080029a9
 80029e4:	080029a9 	.word	0x080029a9
 80029e8:	080029a9 	.word	0x080029a9
 80029ec:	08002b39 	.word	0x08002b39
 80029f0:	08002a5d 	.word	0x08002a5d
 80029f4:	08002b1b 	.word	0x08002b1b
 80029f8:	080029a9 	.word	0x080029a9
 80029fc:	080029a9 	.word	0x080029a9
 8002a00:	08002b5b 	.word	0x08002b5b
 8002a04:	080029a9 	.word	0x080029a9
 8002a08:	08002a5d 	.word	0x08002a5d
 8002a0c:	080029a9 	.word	0x080029a9
 8002a10:	080029a9 	.word	0x080029a9
 8002a14:	08002b23 	.word	0x08002b23
 8002a18:	680b      	ldr	r3, [r1, #0]
 8002a1a:	1d1a      	adds	r2, r3, #4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	600a      	str	r2, [r1, #0]
 8002a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0a3      	b.n	8002b74 <_printf_i+0x1f4>
 8002a2c:	6825      	ldr	r5, [r4, #0]
 8002a2e:	6808      	ldr	r0, [r1, #0]
 8002a30:	062e      	lsls	r6, r5, #24
 8002a32:	f100 0304 	add.w	r3, r0, #4
 8002a36:	d50a      	bpl.n	8002a4e <_printf_i+0xce>
 8002a38:	6805      	ldr	r5, [r0, #0]
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	2d00      	cmp	r5, #0
 8002a3e:	da03      	bge.n	8002a48 <_printf_i+0xc8>
 8002a40:	232d      	movs	r3, #45	; 0x2d
 8002a42:	426d      	negs	r5, r5
 8002a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a48:	485e      	ldr	r0, [pc, #376]	; (8002bc4 <_printf_i+0x244>)
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	e019      	b.n	8002a82 <_printf_i+0x102>
 8002a4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002a52:	6805      	ldr	r5, [r0, #0]
 8002a54:	600b      	str	r3, [r1, #0]
 8002a56:	bf18      	it	ne
 8002a58:	b22d      	sxthne	r5, r5
 8002a5a:	e7ef      	b.n	8002a3c <_printf_i+0xbc>
 8002a5c:	680b      	ldr	r3, [r1, #0]
 8002a5e:	6825      	ldr	r5, [r4, #0]
 8002a60:	1d18      	adds	r0, r3, #4
 8002a62:	6008      	str	r0, [r1, #0]
 8002a64:	0628      	lsls	r0, r5, #24
 8002a66:	d501      	bpl.n	8002a6c <_printf_i+0xec>
 8002a68:	681d      	ldr	r5, [r3, #0]
 8002a6a:	e002      	b.n	8002a72 <_printf_i+0xf2>
 8002a6c:	0669      	lsls	r1, r5, #25
 8002a6e:	d5fb      	bpl.n	8002a68 <_printf_i+0xe8>
 8002a70:	881d      	ldrh	r5, [r3, #0]
 8002a72:	4854      	ldr	r0, [pc, #336]	; (8002bc4 <_printf_i+0x244>)
 8002a74:	2f6f      	cmp	r7, #111	; 0x6f
 8002a76:	bf0c      	ite	eq
 8002a78:	2308      	moveq	r3, #8
 8002a7a:	230a      	movne	r3, #10
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a82:	6866      	ldr	r6, [r4, #4]
 8002a84:	60a6      	str	r6, [r4, #8]
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	bfa2      	ittt	ge
 8002a8a:	6821      	ldrge	r1, [r4, #0]
 8002a8c:	f021 0104 	bicge.w	r1, r1, #4
 8002a90:	6021      	strge	r1, [r4, #0]
 8002a92:	b90d      	cbnz	r5, 8002a98 <_printf_i+0x118>
 8002a94:	2e00      	cmp	r6, #0
 8002a96:	d04d      	beq.n	8002b34 <_printf_i+0x1b4>
 8002a98:	4616      	mov	r6, r2
 8002a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8002aa2:	5dc7      	ldrb	r7, [r0, r7]
 8002aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002aa8:	462f      	mov	r7, r5
 8002aaa:	42bb      	cmp	r3, r7
 8002aac:	460d      	mov	r5, r1
 8002aae:	d9f4      	bls.n	8002a9a <_printf_i+0x11a>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d10b      	bne.n	8002acc <_printf_i+0x14c>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	07df      	lsls	r7, r3, #31
 8002ab8:	d508      	bpl.n	8002acc <_printf_i+0x14c>
 8002aba:	6923      	ldr	r3, [r4, #16]
 8002abc:	6861      	ldr	r1, [r4, #4]
 8002abe:	4299      	cmp	r1, r3
 8002ac0:	bfde      	ittt	le
 8002ac2:	2330      	movle	r3, #48	; 0x30
 8002ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002acc:	1b92      	subs	r2, r2, r6
 8002ace:	6122      	str	r2, [r4, #16]
 8002ad0:	f8cd a000 	str.w	sl, [sp]
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	aa03      	add	r2, sp, #12
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4640      	mov	r0, r8
 8002adc:	f7ff fee2 	bl	80028a4 <_printf_common>
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d14c      	bne.n	8002b7e <_printf_i+0x1fe>
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	b004      	add	sp, #16
 8002aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aee:	4835      	ldr	r0, [pc, #212]	; (8002bc4 <_printf_i+0x244>)
 8002af0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	680e      	ldr	r6, [r1, #0]
 8002af8:	061f      	lsls	r7, r3, #24
 8002afa:	f856 5b04 	ldr.w	r5, [r6], #4
 8002afe:	600e      	str	r6, [r1, #0]
 8002b00:	d514      	bpl.n	8002b2c <_printf_i+0x1ac>
 8002b02:	07d9      	lsls	r1, r3, #31
 8002b04:	bf44      	itt	mi
 8002b06:	f043 0320 	orrmi.w	r3, r3, #32
 8002b0a:	6023      	strmi	r3, [r4, #0]
 8002b0c:	b91d      	cbnz	r5, 8002b16 <_printf_i+0x196>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f023 0320 	bic.w	r3, r3, #32
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	2310      	movs	r3, #16
 8002b18:	e7b0      	b.n	8002a7c <_printf_i+0xfc>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	f043 0320 	orr.w	r3, r3, #32
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	2378      	movs	r3, #120	; 0x78
 8002b24:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <_printf_i+0x248>)
 8002b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b2a:	e7e3      	b.n	8002af4 <_printf_i+0x174>
 8002b2c:	065e      	lsls	r6, r3, #25
 8002b2e:	bf48      	it	mi
 8002b30:	b2ad      	uxthmi	r5, r5
 8002b32:	e7e6      	b.n	8002b02 <_printf_i+0x182>
 8002b34:	4616      	mov	r6, r2
 8002b36:	e7bb      	b.n	8002ab0 <_printf_i+0x130>
 8002b38:	680b      	ldr	r3, [r1, #0]
 8002b3a:	6826      	ldr	r6, [r4, #0]
 8002b3c:	6960      	ldr	r0, [r4, #20]
 8002b3e:	1d1d      	adds	r5, r3, #4
 8002b40:	600d      	str	r5, [r1, #0]
 8002b42:	0635      	lsls	r5, r6, #24
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	d501      	bpl.n	8002b4c <_printf_i+0x1cc>
 8002b48:	6018      	str	r0, [r3, #0]
 8002b4a:	e002      	b.n	8002b52 <_printf_i+0x1d2>
 8002b4c:	0671      	lsls	r1, r6, #25
 8002b4e:	d5fb      	bpl.n	8002b48 <_printf_i+0x1c8>
 8002b50:	8018      	strh	r0, [r3, #0]
 8002b52:	2300      	movs	r3, #0
 8002b54:	6123      	str	r3, [r4, #16]
 8002b56:	4616      	mov	r6, r2
 8002b58:	e7ba      	b.n	8002ad0 <_printf_i+0x150>
 8002b5a:	680b      	ldr	r3, [r1, #0]
 8002b5c:	1d1a      	adds	r2, r3, #4
 8002b5e:	600a      	str	r2, [r1, #0]
 8002b60:	681e      	ldr	r6, [r3, #0]
 8002b62:	6862      	ldr	r2, [r4, #4]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4630      	mov	r0, r6
 8002b68:	f7fd fb3a 	bl	80001e0 <memchr>
 8002b6c:	b108      	cbz	r0, 8002b72 <_printf_i+0x1f2>
 8002b6e:	1b80      	subs	r0, r0, r6
 8002b70:	6060      	str	r0, [r4, #4]
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	6123      	str	r3, [r4, #16]
 8002b76:	2300      	movs	r3, #0
 8002b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b7c:	e7a8      	b.n	8002ad0 <_printf_i+0x150>
 8002b7e:	6923      	ldr	r3, [r4, #16]
 8002b80:	4632      	mov	r2, r6
 8002b82:	4649      	mov	r1, r9
 8002b84:	4640      	mov	r0, r8
 8002b86:	47d0      	blx	sl
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d0ab      	beq.n	8002ae4 <_printf_i+0x164>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	079b      	lsls	r3, r3, #30
 8002b90:	d413      	bmi.n	8002bba <_printf_i+0x23a>
 8002b92:	68e0      	ldr	r0, [r4, #12]
 8002b94:	9b03      	ldr	r3, [sp, #12]
 8002b96:	4298      	cmp	r0, r3
 8002b98:	bfb8      	it	lt
 8002b9a:	4618      	movlt	r0, r3
 8002b9c:	e7a4      	b.n	8002ae8 <_printf_i+0x168>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	47d0      	blx	sl
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d09b      	beq.n	8002ae4 <_printf_i+0x164>
 8002bac:	3501      	adds	r5, #1
 8002bae:	68e3      	ldr	r3, [r4, #12]
 8002bb0:	9903      	ldr	r1, [sp, #12]
 8002bb2:	1a5b      	subs	r3, r3, r1
 8002bb4:	42ab      	cmp	r3, r5
 8002bb6:	dcf2      	bgt.n	8002b9e <_printf_i+0x21e>
 8002bb8:	e7eb      	b.n	8002b92 <_printf_i+0x212>
 8002bba:	2500      	movs	r5, #0
 8002bbc:	f104 0619 	add.w	r6, r4, #25
 8002bc0:	e7f5      	b.n	8002bae <_printf_i+0x22e>
 8002bc2:	bf00      	nop
 8002bc4:	080034b7 	.word	0x080034b7
 8002bc8:	080034c8 	.word	0x080034c8

08002bcc <_sbrk_r>:
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4d06      	ldr	r5, [pc, #24]	; (8002be8 <_sbrk_r+0x1c>)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	602b      	str	r3, [r5, #0]
 8002bd8:	f7fe fa58 	bl	800108c <_sbrk>
 8002bdc:	1c43      	adds	r3, r0, #1
 8002bde:	d102      	bne.n	8002be6 <_sbrk_r+0x1a>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	b103      	cbz	r3, 8002be6 <_sbrk_r+0x1a>
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	bd38      	pop	{r3, r4, r5, pc}
 8002be8:	2000009c 	.word	0x2000009c

08002bec <__swbuf_r>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	460e      	mov	r6, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	b118      	cbz	r0, 8002bfe <__swbuf_r+0x12>
 8002bf6:	6983      	ldr	r3, [r0, #24]
 8002bf8:	b90b      	cbnz	r3, 8002bfe <__swbuf_r+0x12>
 8002bfa:	f000 f9d9 	bl	8002fb0 <__sinit>
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <__swbuf_r+0x98>)
 8002c00:	429c      	cmp	r4, r3
 8002c02:	d12b      	bne.n	8002c5c <__swbuf_r+0x70>
 8002c04:	686c      	ldr	r4, [r5, #4]
 8002c06:	69a3      	ldr	r3, [r4, #24]
 8002c08:	60a3      	str	r3, [r4, #8]
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	071a      	lsls	r2, r3, #28
 8002c0e:	d52f      	bpl.n	8002c70 <__swbuf_r+0x84>
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	b36b      	cbz	r3, 8002c70 <__swbuf_r+0x84>
 8002c14:	6923      	ldr	r3, [r4, #16]
 8002c16:	6820      	ldr	r0, [r4, #0]
 8002c18:	1ac0      	subs	r0, r0, r3
 8002c1a:	6963      	ldr	r3, [r4, #20]
 8002c1c:	b2f6      	uxtb	r6, r6
 8002c1e:	4283      	cmp	r3, r0
 8002c20:	4637      	mov	r7, r6
 8002c22:	dc04      	bgt.n	8002c2e <__swbuf_r+0x42>
 8002c24:	4621      	mov	r1, r4
 8002c26:	4628      	mov	r0, r5
 8002c28:	f000 f92e 	bl	8002e88 <_fflush_r>
 8002c2c:	bb30      	cbnz	r0, 8002c7c <__swbuf_r+0x90>
 8002c2e:	68a3      	ldr	r3, [r4, #8]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60a3      	str	r3, [r4, #8]
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	6022      	str	r2, [r4, #0]
 8002c3a:	701e      	strb	r6, [r3, #0]
 8002c3c:	6963      	ldr	r3, [r4, #20]
 8002c3e:	3001      	adds	r0, #1
 8002c40:	4283      	cmp	r3, r0
 8002c42:	d004      	beq.n	8002c4e <__swbuf_r+0x62>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	07db      	lsls	r3, r3, #31
 8002c48:	d506      	bpl.n	8002c58 <__swbuf_r+0x6c>
 8002c4a:	2e0a      	cmp	r6, #10
 8002c4c:	d104      	bne.n	8002c58 <__swbuf_r+0x6c>
 8002c4e:	4621      	mov	r1, r4
 8002c50:	4628      	mov	r0, r5
 8002c52:	f000 f919 	bl	8002e88 <_fflush_r>
 8002c56:	b988      	cbnz	r0, 8002c7c <__swbuf_r+0x90>
 8002c58:	4638      	mov	r0, r7
 8002c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <__swbuf_r+0x9c>)
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d101      	bne.n	8002c66 <__swbuf_r+0x7a>
 8002c62:	68ac      	ldr	r4, [r5, #8]
 8002c64:	e7cf      	b.n	8002c06 <__swbuf_r+0x1a>
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <__swbuf_r+0xa0>)
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	bf08      	it	eq
 8002c6c:	68ec      	ldreq	r4, [r5, #12]
 8002c6e:	e7ca      	b.n	8002c06 <__swbuf_r+0x1a>
 8002c70:	4621      	mov	r1, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f000 f80c 	bl	8002c90 <__swsetup_r>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d0cb      	beq.n	8002c14 <__swbuf_r+0x28>
 8002c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8002c80:	e7ea      	b.n	8002c58 <__swbuf_r+0x6c>
 8002c82:	bf00      	nop
 8002c84:	080034fc 	.word	0x080034fc
 8002c88:	0800351c 	.word	0x0800351c
 8002c8c:	080034dc 	.word	0x080034dc

08002c90 <__swsetup_r>:
 8002c90:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <__swsetup_r+0xcc>)
 8002c92:	b570      	push	{r4, r5, r6, lr}
 8002c94:	681d      	ldr	r5, [r3, #0]
 8002c96:	4606      	mov	r6, r0
 8002c98:	460c      	mov	r4, r1
 8002c9a:	b125      	cbz	r5, 8002ca6 <__swsetup_r+0x16>
 8002c9c:	69ab      	ldr	r3, [r5, #24]
 8002c9e:	b913      	cbnz	r3, 8002ca6 <__swsetup_r+0x16>
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	f000 f985 	bl	8002fb0 <__sinit>
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <__swsetup_r+0xd0>)
 8002ca8:	429c      	cmp	r4, r3
 8002caa:	d10f      	bne.n	8002ccc <__swsetup_r+0x3c>
 8002cac:	686c      	ldr	r4, [r5, #4]
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cb4:	0719      	lsls	r1, r3, #28
 8002cb6:	d42c      	bmi.n	8002d12 <__swsetup_r+0x82>
 8002cb8:	06dd      	lsls	r5, r3, #27
 8002cba:	d411      	bmi.n	8002ce0 <__swsetup_r+0x50>
 8002cbc:	2309      	movs	r3, #9
 8002cbe:	6033      	str	r3, [r6, #0]
 8002cc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002cc4:	81a3      	strh	r3, [r4, #12]
 8002cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cca:	e03e      	b.n	8002d4a <__swsetup_r+0xba>
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <__swsetup_r+0xd4>)
 8002cce:	429c      	cmp	r4, r3
 8002cd0:	d101      	bne.n	8002cd6 <__swsetup_r+0x46>
 8002cd2:	68ac      	ldr	r4, [r5, #8]
 8002cd4:	e7eb      	b.n	8002cae <__swsetup_r+0x1e>
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <__swsetup_r+0xd8>)
 8002cd8:	429c      	cmp	r4, r3
 8002cda:	bf08      	it	eq
 8002cdc:	68ec      	ldreq	r4, [r5, #12]
 8002cde:	e7e6      	b.n	8002cae <__swsetup_r+0x1e>
 8002ce0:	0758      	lsls	r0, r3, #29
 8002ce2:	d512      	bpl.n	8002d0a <__swsetup_r+0x7a>
 8002ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ce6:	b141      	cbz	r1, 8002cfa <__swsetup_r+0x6a>
 8002ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cec:	4299      	cmp	r1, r3
 8002cee:	d002      	beq.n	8002cf6 <__swsetup_r+0x66>
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	f7ff fbd3 	bl	800249c <_free_r>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6363      	str	r3, [r4, #52]	; 0x34
 8002cfa:	89a3      	ldrh	r3, [r4, #12]
 8002cfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d00:	81a3      	strh	r3, [r4, #12]
 8002d02:	2300      	movs	r3, #0
 8002d04:	6063      	str	r3, [r4, #4]
 8002d06:	6923      	ldr	r3, [r4, #16]
 8002d08:	6023      	str	r3, [r4, #0]
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	81a3      	strh	r3, [r4, #12]
 8002d12:	6923      	ldr	r3, [r4, #16]
 8002d14:	b94b      	cbnz	r3, 8002d2a <__swsetup_r+0x9a>
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d20:	d003      	beq.n	8002d2a <__swsetup_r+0x9a>
 8002d22:	4621      	mov	r1, r4
 8002d24:	4630      	mov	r0, r6
 8002d26:	f000 fa07 	bl	8003138 <__smakebuf_r>
 8002d2a:	89a0      	ldrh	r0, [r4, #12]
 8002d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d30:	f010 0301 	ands.w	r3, r0, #1
 8002d34:	d00a      	beq.n	8002d4c <__swsetup_r+0xbc>
 8002d36:	2300      	movs	r3, #0
 8002d38:	60a3      	str	r3, [r4, #8]
 8002d3a:	6963      	ldr	r3, [r4, #20]
 8002d3c:	425b      	negs	r3, r3
 8002d3e:	61a3      	str	r3, [r4, #24]
 8002d40:	6923      	ldr	r3, [r4, #16]
 8002d42:	b943      	cbnz	r3, 8002d56 <__swsetup_r+0xc6>
 8002d44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d48:	d1ba      	bne.n	8002cc0 <__swsetup_r+0x30>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	0781      	lsls	r1, r0, #30
 8002d4e:	bf58      	it	pl
 8002d50:	6963      	ldrpl	r3, [r4, #20]
 8002d52:	60a3      	str	r3, [r4, #8]
 8002d54:	e7f4      	b.n	8002d40 <__swsetup_r+0xb0>
 8002d56:	2000      	movs	r0, #0
 8002d58:	e7f7      	b.n	8002d4a <__swsetup_r+0xba>
 8002d5a:	bf00      	nop
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	080034fc 	.word	0x080034fc
 8002d64:	0800351c 	.word	0x0800351c
 8002d68:	080034dc 	.word	0x080034dc

08002d6c <abort>:
 8002d6c:	b508      	push	{r3, lr}
 8002d6e:	2006      	movs	r0, #6
 8002d70:	f000 fa56 	bl	8003220 <raise>
 8002d74:	2001      	movs	r0, #1
 8002d76:	f7fe f911 	bl	8000f9c <_exit>
	...

08002d7c <__sflush_r>:
 8002d7c:	898a      	ldrh	r2, [r1, #12]
 8002d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d82:	4605      	mov	r5, r0
 8002d84:	0710      	lsls	r0, r2, #28
 8002d86:	460c      	mov	r4, r1
 8002d88:	d458      	bmi.n	8002e3c <__sflush_r+0xc0>
 8002d8a:	684b      	ldr	r3, [r1, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	dc05      	bgt.n	8002d9c <__sflush_r+0x20>
 8002d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	dc02      	bgt.n	8002d9c <__sflush_r+0x20>
 8002d96:	2000      	movs	r0, #0
 8002d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d9e:	2e00      	cmp	r6, #0
 8002da0:	d0f9      	beq.n	8002d96 <__sflush_r+0x1a>
 8002da2:	2300      	movs	r3, #0
 8002da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002da8:	682f      	ldr	r7, [r5, #0]
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	d032      	beq.n	8002e14 <__sflush_r+0x98>
 8002dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	075a      	lsls	r2, r3, #29
 8002db4:	d505      	bpl.n	8002dc2 <__sflush_r+0x46>
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	1ac0      	subs	r0, r0, r3
 8002dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dbc:	b10b      	cbz	r3, 8002dc2 <__sflush_r+0x46>
 8002dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dc0:	1ac0      	subs	r0, r0, r3
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dc8:	6a21      	ldr	r1, [r4, #32]
 8002dca:	4628      	mov	r0, r5
 8002dcc:	47b0      	blx	r6
 8002dce:	1c43      	adds	r3, r0, #1
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	d106      	bne.n	8002de2 <__sflush_r+0x66>
 8002dd4:	6829      	ldr	r1, [r5, #0]
 8002dd6:	291d      	cmp	r1, #29
 8002dd8:	d82c      	bhi.n	8002e34 <__sflush_r+0xb8>
 8002dda:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <__sflush_r+0x108>)
 8002ddc:	40ca      	lsrs	r2, r1
 8002dde:	07d6      	lsls	r6, r2, #31
 8002de0:	d528      	bpl.n	8002e34 <__sflush_r+0xb8>
 8002de2:	2200      	movs	r2, #0
 8002de4:	6062      	str	r2, [r4, #4]
 8002de6:	04d9      	lsls	r1, r3, #19
 8002de8:	6922      	ldr	r2, [r4, #16]
 8002dea:	6022      	str	r2, [r4, #0]
 8002dec:	d504      	bpl.n	8002df8 <__sflush_r+0x7c>
 8002dee:	1c42      	adds	r2, r0, #1
 8002df0:	d101      	bne.n	8002df6 <__sflush_r+0x7a>
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	b903      	cbnz	r3, 8002df8 <__sflush_r+0x7c>
 8002df6:	6560      	str	r0, [r4, #84]	; 0x54
 8002df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dfa:	602f      	str	r7, [r5, #0]
 8002dfc:	2900      	cmp	r1, #0
 8002dfe:	d0ca      	beq.n	8002d96 <__sflush_r+0x1a>
 8002e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e04:	4299      	cmp	r1, r3
 8002e06:	d002      	beq.n	8002e0e <__sflush_r+0x92>
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f7ff fb47 	bl	800249c <_free_r>
 8002e0e:	2000      	movs	r0, #0
 8002e10:	6360      	str	r0, [r4, #52]	; 0x34
 8002e12:	e7c1      	b.n	8002d98 <__sflush_r+0x1c>
 8002e14:	6a21      	ldr	r1, [r4, #32]
 8002e16:	2301      	movs	r3, #1
 8002e18:	4628      	mov	r0, r5
 8002e1a:	47b0      	blx	r6
 8002e1c:	1c41      	adds	r1, r0, #1
 8002e1e:	d1c7      	bne.n	8002db0 <__sflush_r+0x34>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0c4      	beq.n	8002db0 <__sflush_r+0x34>
 8002e26:	2b1d      	cmp	r3, #29
 8002e28:	d001      	beq.n	8002e2e <__sflush_r+0xb2>
 8002e2a:	2b16      	cmp	r3, #22
 8002e2c:	d101      	bne.n	8002e32 <__sflush_r+0xb6>
 8002e2e:	602f      	str	r7, [r5, #0]
 8002e30:	e7b1      	b.n	8002d96 <__sflush_r+0x1a>
 8002e32:	89a3      	ldrh	r3, [r4, #12]
 8002e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e38:	81a3      	strh	r3, [r4, #12]
 8002e3a:	e7ad      	b.n	8002d98 <__sflush_r+0x1c>
 8002e3c:	690f      	ldr	r7, [r1, #16]
 8002e3e:	2f00      	cmp	r7, #0
 8002e40:	d0a9      	beq.n	8002d96 <__sflush_r+0x1a>
 8002e42:	0793      	lsls	r3, r2, #30
 8002e44:	680e      	ldr	r6, [r1, #0]
 8002e46:	bf08      	it	eq
 8002e48:	694b      	ldreq	r3, [r1, #20]
 8002e4a:	600f      	str	r7, [r1, #0]
 8002e4c:	bf18      	it	ne
 8002e4e:	2300      	movne	r3, #0
 8002e50:	eba6 0807 	sub.w	r8, r6, r7
 8002e54:	608b      	str	r3, [r1, #8]
 8002e56:	f1b8 0f00 	cmp.w	r8, #0
 8002e5a:	dd9c      	ble.n	8002d96 <__sflush_r+0x1a>
 8002e5c:	6a21      	ldr	r1, [r4, #32]
 8002e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e60:	4643      	mov	r3, r8
 8002e62:	463a      	mov	r2, r7
 8002e64:	4628      	mov	r0, r5
 8002e66:	47b0      	blx	r6
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	dc06      	bgt.n	8002e7a <__sflush_r+0xfe>
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e72:	81a3      	strh	r3, [r4, #12]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	e78e      	b.n	8002d98 <__sflush_r+0x1c>
 8002e7a:	4407      	add	r7, r0
 8002e7c:	eba8 0800 	sub.w	r8, r8, r0
 8002e80:	e7e9      	b.n	8002e56 <__sflush_r+0xda>
 8002e82:	bf00      	nop
 8002e84:	20400001 	.word	0x20400001

08002e88 <_fflush_r>:
 8002e88:	b538      	push	{r3, r4, r5, lr}
 8002e8a:	690b      	ldr	r3, [r1, #16]
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	b913      	cbnz	r3, 8002e98 <_fflush_r+0x10>
 8002e92:	2500      	movs	r5, #0
 8002e94:	4628      	mov	r0, r5
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	b118      	cbz	r0, 8002ea2 <_fflush_r+0x1a>
 8002e9a:	6983      	ldr	r3, [r0, #24]
 8002e9c:	b90b      	cbnz	r3, 8002ea2 <_fflush_r+0x1a>
 8002e9e:	f000 f887 	bl	8002fb0 <__sinit>
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <_fflush_r+0x6c>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d11b      	bne.n	8002ee0 <_fflush_r+0x58>
 8002ea8:	686c      	ldr	r4, [r5, #4]
 8002eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ef      	beq.n	8002e92 <_fflush_r+0xa>
 8002eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002eb4:	07d0      	lsls	r0, r2, #31
 8002eb6:	d404      	bmi.n	8002ec2 <_fflush_r+0x3a>
 8002eb8:	0599      	lsls	r1, r3, #22
 8002eba:	d402      	bmi.n	8002ec2 <_fflush_r+0x3a>
 8002ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ebe:	f000 f915 	bl	80030ec <__retarget_lock_acquire_recursive>
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	f7ff ff59 	bl	8002d7c <__sflush_r>
 8002eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ecc:	07da      	lsls	r2, r3, #31
 8002ece:	4605      	mov	r5, r0
 8002ed0:	d4e0      	bmi.n	8002e94 <_fflush_r+0xc>
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	059b      	lsls	r3, r3, #22
 8002ed6:	d4dd      	bmi.n	8002e94 <_fflush_r+0xc>
 8002ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eda:	f000 f908 	bl	80030ee <__retarget_lock_release_recursive>
 8002ede:	e7d9      	b.n	8002e94 <_fflush_r+0xc>
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <_fflush_r+0x70>)
 8002ee2:	429c      	cmp	r4, r3
 8002ee4:	d101      	bne.n	8002eea <_fflush_r+0x62>
 8002ee6:	68ac      	ldr	r4, [r5, #8]
 8002ee8:	e7df      	b.n	8002eaa <_fflush_r+0x22>
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <_fflush_r+0x74>)
 8002eec:	429c      	cmp	r4, r3
 8002eee:	bf08      	it	eq
 8002ef0:	68ec      	ldreq	r4, [r5, #12]
 8002ef2:	e7da      	b.n	8002eaa <_fflush_r+0x22>
 8002ef4:	080034fc 	.word	0x080034fc
 8002ef8:	0800351c 	.word	0x0800351c
 8002efc:	080034dc 	.word	0x080034dc

08002f00 <std>:
 8002f00:	2300      	movs	r3, #0
 8002f02:	b510      	push	{r4, lr}
 8002f04:	4604      	mov	r4, r0
 8002f06:	e9c0 3300 	strd	r3, r3, [r0]
 8002f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f0e:	6083      	str	r3, [r0, #8]
 8002f10:	8181      	strh	r1, [r0, #12]
 8002f12:	6643      	str	r3, [r0, #100]	; 0x64
 8002f14:	81c2      	strh	r2, [r0, #14]
 8002f16:	6183      	str	r3, [r0, #24]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	305c      	adds	r0, #92	; 0x5c
 8002f1e:	f7ff fa3d 	bl	800239c <memset>
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <std+0x38>)
 8002f24:	6263      	str	r3, [r4, #36]	; 0x24
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <std+0x3c>)
 8002f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <std+0x40>)
 8002f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <std+0x44>)
 8002f30:	6224      	str	r4, [r4, #32]
 8002f32:	6323      	str	r3, [r4, #48]	; 0x30
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	bf00      	nop
 8002f38:	08003259 	.word	0x08003259
 8002f3c:	0800327b 	.word	0x0800327b
 8002f40:	080032b3 	.word	0x080032b3
 8002f44:	080032d7 	.word	0x080032d7

08002f48 <_cleanup_r>:
 8002f48:	4901      	ldr	r1, [pc, #4]	; (8002f50 <_cleanup_r+0x8>)
 8002f4a:	f000 b8af 	b.w	80030ac <_fwalk_reent>
 8002f4e:	bf00      	nop
 8002f50:	08002e89 	.word	0x08002e89

08002f54 <__sfmoreglue>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	1e4a      	subs	r2, r1, #1
 8002f58:	2568      	movs	r5, #104	; 0x68
 8002f5a:	4355      	muls	r5, r2
 8002f5c:	460e      	mov	r6, r1
 8002f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f62:	f7ff faeb 	bl	800253c <_malloc_r>
 8002f66:	4604      	mov	r4, r0
 8002f68:	b140      	cbz	r0, 8002f7c <__sfmoreglue+0x28>
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8002f70:	300c      	adds	r0, #12
 8002f72:	60a0      	str	r0, [r4, #8]
 8002f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f78:	f7ff fa10 	bl	800239c <memset>
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}

08002f80 <__sfp_lock_acquire>:
 8002f80:	4801      	ldr	r0, [pc, #4]	; (8002f88 <__sfp_lock_acquire+0x8>)
 8002f82:	f000 b8b3 	b.w	80030ec <__retarget_lock_acquire_recursive>
 8002f86:	bf00      	nop
 8002f88:	20000098 	.word	0x20000098

08002f8c <__sfp_lock_release>:
 8002f8c:	4801      	ldr	r0, [pc, #4]	; (8002f94 <__sfp_lock_release+0x8>)
 8002f8e:	f000 b8ae 	b.w	80030ee <__retarget_lock_release_recursive>
 8002f92:	bf00      	nop
 8002f94:	20000098 	.word	0x20000098

08002f98 <__sinit_lock_acquire>:
 8002f98:	4801      	ldr	r0, [pc, #4]	; (8002fa0 <__sinit_lock_acquire+0x8>)
 8002f9a:	f000 b8a7 	b.w	80030ec <__retarget_lock_acquire_recursive>
 8002f9e:	bf00      	nop
 8002fa0:	20000093 	.word	0x20000093

08002fa4 <__sinit_lock_release>:
 8002fa4:	4801      	ldr	r0, [pc, #4]	; (8002fac <__sinit_lock_release+0x8>)
 8002fa6:	f000 b8a2 	b.w	80030ee <__retarget_lock_release_recursive>
 8002faa:	bf00      	nop
 8002fac:	20000093 	.word	0x20000093

08002fb0 <__sinit>:
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	f7ff fff0 	bl	8002f98 <__sinit_lock_acquire>
 8002fb8:	69a3      	ldr	r3, [r4, #24]
 8002fba:	b11b      	cbz	r3, 8002fc4 <__sinit+0x14>
 8002fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc0:	f7ff bff0 	b.w	8002fa4 <__sinit_lock_release>
 8002fc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002fc8:	6523      	str	r3, [r4, #80]	; 0x50
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <__sinit+0x68>)
 8002fcc:	4a13      	ldr	r2, [pc, #76]	; (800301c <__sinit+0x6c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002fd2:	42a3      	cmp	r3, r4
 8002fd4:	bf04      	itt	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	61a3      	streq	r3, [r4, #24]
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 f820 	bl	8003020 <__sfp>
 8002fe0:	6060      	str	r0, [r4, #4]
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f000 f81c 	bl	8003020 <__sfp>
 8002fe8:	60a0      	str	r0, [r4, #8]
 8002fea:	4620      	mov	r0, r4
 8002fec:	f000 f818 	bl	8003020 <__sfp>
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60e0      	str	r0, [r4, #12]
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	6860      	ldr	r0, [r4, #4]
 8002ff8:	f7ff ff82 	bl	8002f00 <std>
 8002ffc:	68a0      	ldr	r0, [r4, #8]
 8002ffe:	2201      	movs	r2, #1
 8003000:	2109      	movs	r1, #9
 8003002:	f7ff ff7d 	bl	8002f00 <std>
 8003006:	68e0      	ldr	r0, [r4, #12]
 8003008:	2202      	movs	r2, #2
 800300a:	2112      	movs	r1, #18
 800300c:	f7ff ff78 	bl	8002f00 <std>
 8003010:	2301      	movs	r3, #1
 8003012:	61a3      	str	r3, [r4, #24]
 8003014:	e7d2      	b.n	8002fbc <__sinit+0xc>
 8003016:	bf00      	nop
 8003018:	080033f0 	.word	0x080033f0
 800301c:	08002f49 	.word	0x08002f49

08003020 <__sfp>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	4607      	mov	r7, r0
 8003024:	f7ff ffac 	bl	8002f80 <__sfp_lock_acquire>
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <__sfp+0x84>)
 800302a:	681e      	ldr	r6, [r3, #0]
 800302c:	69b3      	ldr	r3, [r6, #24]
 800302e:	b913      	cbnz	r3, 8003036 <__sfp+0x16>
 8003030:	4630      	mov	r0, r6
 8003032:	f7ff ffbd 	bl	8002fb0 <__sinit>
 8003036:	3648      	adds	r6, #72	; 0x48
 8003038:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800303c:	3b01      	subs	r3, #1
 800303e:	d503      	bpl.n	8003048 <__sfp+0x28>
 8003040:	6833      	ldr	r3, [r6, #0]
 8003042:	b30b      	cbz	r3, 8003088 <__sfp+0x68>
 8003044:	6836      	ldr	r6, [r6, #0]
 8003046:	e7f7      	b.n	8003038 <__sfp+0x18>
 8003048:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800304c:	b9d5      	cbnz	r5, 8003084 <__sfp+0x64>
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <__sfp+0x88>)
 8003050:	60e3      	str	r3, [r4, #12]
 8003052:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003056:	6665      	str	r5, [r4, #100]	; 0x64
 8003058:	f000 f847 	bl	80030ea <__retarget_lock_init_recursive>
 800305c:	f7ff ff96 	bl	8002f8c <__sfp_lock_release>
 8003060:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003064:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003068:	6025      	str	r5, [r4, #0]
 800306a:	61a5      	str	r5, [r4, #24]
 800306c:	2208      	movs	r2, #8
 800306e:	4629      	mov	r1, r5
 8003070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003074:	f7ff f992 	bl	800239c <memset>
 8003078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800307c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003080:	4620      	mov	r0, r4
 8003082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003084:	3468      	adds	r4, #104	; 0x68
 8003086:	e7d9      	b.n	800303c <__sfp+0x1c>
 8003088:	2104      	movs	r1, #4
 800308a:	4638      	mov	r0, r7
 800308c:	f7ff ff62 	bl	8002f54 <__sfmoreglue>
 8003090:	4604      	mov	r4, r0
 8003092:	6030      	str	r0, [r6, #0]
 8003094:	2800      	cmp	r0, #0
 8003096:	d1d5      	bne.n	8003044 <__sfp+0x24>
 8003098:	f7ff ff78 	bl	8002f8c <__sfp_lock_release>
 800309c:	230c      	movs	r3, #12
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	e7ee      	b.n	8003080 <__sfp+0x60>
 80030a2:	bf00      	nop
 80030a4:	080033f0 	.word	0x080033f0
 80030a8:	ffff0001 	.word	0xffff0001

080030ac <_fwalk_reent>:
 80030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030b0:	4606      	mov	r6, r0
 80030b2:	4688      	mov	r8, r1
 80030b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030b8:	2700      	movs	r7, #0
 80030ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030be:	f1b9 0901 	subs.w	r9, r9, #1
 80030c2:	d505      	bpl.n	80030d0 <_fwalk_reent+0x24>
 80030c4:	6824      	ldr	r4, [r4, #0]
 80030c6:	2c00      	cmp	r4, #0
 80030c8:	d1f7      	bne.n	80030ba <_fwalk_reent+0xe>
 80030ca:	4638      	mov	r0, r7
 80030cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030d0:	89ab      	ldrh	r3, [r5, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d907      	bls.n	80030e6 <_fwalk_reent+0x3a>
 80030d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030da:	3301      	adds	r3, #1
 80030dc:	d003      	beq.n	80030e6 <_fwalk_reent+0x3a>
 80030de:	4629      	mov	r1, r5
 80030e0:	4630      	mov	r0, r6
 80030e2:	47c0      	blx	r8
 80030e4:	4307      	orrs	r7, r0
 80030e6:	3568      	adds	r5, #104	; 0x68
 80030e8:	e7e9      	b.n	80030be <_fwalk_reent+0x12>

080030ea <__retarget_lock_init_recursive>:
 80030ea:	4770      	bx	lr

080030ec <__retarget_lock_acquire_recursive>:
 80030ec:	4770      	bx	lr

080030ee <__retarget_lock_release_recursive>:
 80030ee:	4770      	bx	lr

080030f0 <__swhatbuf_r>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	460e      	mov	r6, r1
 80030f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f8:	2900      	cmp	r1, #0
 80030fa:	b096      	sub	sp, #88	; 0x58
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	da07      	bge.n	8003112 <__swhatbuf_r+0x22>
 8003102:	2300      	movs	r3, #0
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	89b3      	ldrh	r3, [r6, #12]
 8003108:	061a      	lsls	r2, r3, #24
 800310a:	d410      	bmi.n	800312e <__swhatbuf_r+0x3e>
 800310c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003110:	e00e      	b.n	8003130 <__swhatbuf_r+0x40>
 8003112:	466a      	mov	r2, sp
 8003114:	f000 f906 	bl	8003324 <_fstat_r>
 8003118:	2800      	cmp	r0, #0
 800311a:	dbf2      	blt.n	8003102 <__swhatbuf_r+0x12>
 800311c:	9a01      	ldr	r2, [sp, #4]
 800311e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003126:	425a      	negs	r2, r3
 8003128:	415a      	adcs	r2, r3
 800312a:	602a      	str	r2, [r5, #0]
 800312c:	e7ee      	b.n	800310c <__swhatbuf_r+0x1c>
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	2000      	movs	r0, #0
 8003132:	6023      	str	r3, [r4, #0]
 8003134:	b016      	add	sp, #88	; 0x58
 8003136:	bd70      	pop	{r4, r5, r6, pc}

08003138 <__smakebuf_r>:
 8003138:	898b      	ldrh	r3, [r1, #12]
 800313a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800313c:	079d      	lsls	r5, r3, #30
 800313e:	4606      	mov	r6, r0
 8003140:	460c      	mov	r4, r1
 8003142:	d507      	bpl.n	8003154 <__smakebuf_r+0x1c>
 8003144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	6123      	str	r3, [r4, #16]
 800314c:	2301      	movs	r3, #1
 800314e:	6163      	str	r3, [r4, #20]
 8003150:	b002      	add	sp, #8
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	ab01      	add	r3, sp, #4
 8003156:	466a      	mov	r2, sp
 8003158:	f7ff ffca 	bl	80030f0 <__swhatbuf_r>
 800315c:	9900      	ldr	r1, [sp, #0]
 800315e:	4605      	mov	r5, r0
 8003160:	4630      	mov	r0, r6
 8003162:	f7ff f9eb 	bl	800253c <_malloc_r>
 8003166:	b948      	cbnz	r0, 800317c <__smakebuf_r+0x44>
 8003168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800316c:	059a      	lsls	r2, r3, #22
 800316e:	d4ef      	bmi.n	8003150 <__smakebuf_r+0x18>
 8003170:	f023 0303 	bic.w	r3, r3, #3
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	81a3      	strh	r3, [r4, #12]
 800317a:	e7e3      	b.n	8003144 <__smakebuf_r+0xc>
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <__smakebuf_r+0x7c>)
 800317e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	6020      	str	r0, [r4, #0]
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	81a3      	strh	r3, [r4, #12]
 800318a:	9b00      	ldr	r3, [sp, #0]
 800318c:	6163      	str	r3, [r4, #20]
 800318e:	9b01      	ldr	r3, [sp, #4]
 8003190:	6120      	str	r0, [r4, #16]
 8003192:	b15b      	cbz	r3, 80031ac <__smakebuf_r+0x74>
 8003194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003198:	4630      	mov	r0, r6
 800319a:	f000 f8d5 	bl	8003348 <_isatty_r>
 800319e:	b128      	cbz	r0, 80031ac <__smakebuf_r+0x74>
 80031a0:	89a3      	ldrh	r3, [r4, #12]
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	81a3      	strh	r3, [r4, #12]
 80031ac:	89a0      	ldrh	r0, [r4, #12]
 80031ae:	4305      	orrs	r5, r0
 80031b0:	81a5      	strh	r5, [r4, #12]
 80031b2:	e7cd      	b.n	8003150 <__smakebuf_r+0x18>
 80031b4:	08002f49 	.word	0x08002f49

080031b8 <__malloc_lock>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__malloc_lock+0x8>)
 80031ba:	f7ff bf97 	b.w	80030ec <__retarget_lock_acquire_recursive>
 80031be:	bf00      	nop
 80031c0:	20000094 	.word	0x20000094

080031c4 <__malloc_unlock>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__malloc_unlock+0x8>)
 80031c6:	f7ff bf92 	b.w	80030ee <__retarget_lock_release_recursive>
 80031ca:	bf00      	nop
 80031cc:	20000094 	.word	0x20000094

080031d0 <_raise_r>:
 80031d0:	291f      	cmp	r1, #31
 80031d2:	b538      	push	{r3, r4, r5, lr}
 80031d4:	4604      	mov	r4, r0
 80031d6:	460d      	mov	r5, r1
 80031d8:	d904      	bls.n	80031e4 <_raise_r+0x14>
 80031da:	2316      	movs	r3, #22
 80031dc:	6003      	str	r3, [r0, #0]
 80031de:	f04f 30ff 	mov.w	r0, #4294967295
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80031e6:	b112      	cbz	r2, 80031ee <_raise_r+0x1e>
 80031e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80031ec:	b94b      	cbnz	r3, 8003202 <_raise_r+0x32>
 80031ee:	4620      	mov	r0, r4
 80031f0:	f000 f830 	bl	8003254 <_getpid_r>
 80031f4:	462a      	mov	r2, r5
 80031f6:	4601      	mov	r1, r0
 80031f8:	4620      	mov	r0, r4
 80031fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031fe:	f000 b817 	b.w	8003230 <_kill_r>
 8003202:	2b01      	cmp	r3, #1
 8003204:	d00a      	beq.n	800321c <_raise_r+0x4c>
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	d103      	bne.n	8003212 <_raise_r+0x42>
 800320a:	2316      	movs	r3, #22
 800320c:	6003      	str	r3, [r0, #0]
 800320e:	2001      	movs	r0, #1
 8003210:	e7e7      	b.n	80031e2 <_raise_r+0x12>
 8003212:	2400      	movs	r4, #0
 8003214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003218:	4628      	mov	r0, r5
 800321a:	4798      	blx	r3
 800321c:	2000      	movs	r0, #0
 800321e:	e7e0      	b.n	80031e2 <_raise_r+0x12>

08003220 <raise>:
 8003220:	4b02      	ldr	r3, [pc, #8]	; (800322c <raise+0xc>)
 8003222:	4601      	mov	r1, r0
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	f7ff bfd3 	b.w	80031d0 <_raise_r>
 800322a:	bf00      	nop
 800322c:	20000004 	.word	0x20000004

08003230 <_kill_r>:
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	4d07      	ldr	r5, [pc, #28]	; (8003250 <_kill_r+0x20>)
 8003234:	2300      	movs	r3, #0
 8003236:	4604      	mov	r4, r0
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	602b      	str	r3, [r5, #0]
 800323e:	f7fd fe9d 	bl	8000f7c <_kill>
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	d102      	bne.n	800324c <_kill_r+0x1c>
 8003246:	682b      	ldr	r3, [r5, #0]
 8003248:	b103      	cbz	r3, 800324c <_kill_r+0x1c>
 800324a:	6023      	str	r3, [r4, #0]
 800324c:	bd38      	pop	{r3, r4, r5, pc}
 800324e:	bf00      	nop
 8003250:	2000009c 	.word	0x2000009c

08003254 <_getpid_r>:
 8003254:	f7fd be8a 	b.w	8000f6c <_getpid>

08003258 <__sread>:
 8003258:	b510      	push	{r4, lr}
 800325a:	460c      	mov	r4, r1
 800325c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003260:	f000 f894 	bl	800338c <_read_r>
 8003264:	2800      	cmp	r0, #0
 8003266:	bfab      	itete	ge
 8003268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800326a:	89a3      	ldrhlt	r3, [r4, #12]
 800326c:	181b      	addge	r3, r3, r0
 800326e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003272:	bfac      	ite	ge
 8003274:	6563      	strge	r3, [r4, #84]	; 0x54
 8003276:	81a3      	strhlt	r3, [r4, #12]
 8003278:	bd10      	pop	{r4, pc}

0800327a <__swrite>:
 800327a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800327e:	461f      	mov	r7, r3
 8003280:	898b      	ldrh	r3, [r1, #12]
 8003282:	05db      	lsls	r3, r3, #23
 8003284:	4605      	mov	r5, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4616      	mov	r6, r2
 800328a:	d505      	bpl.n	8003298 <__swrite+0x1e>
 800328c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003290:	2302      	movs	r3, #2
 8003292:	2200      	movs	r2, #0
 8003294:	f000 f868 	bl	8003368 <_lseek_r>
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800329e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a2:	81a3      	strh	r3, [r4, #12]
 80032a4:	4632      	mov	r2, r6
 80032a6:	463b      	mov	r3, r7
 80032a8:	4628      	mov	r0, r5
 80032aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ae:	f000 b817 	b.w	80032e0 <_write_r>

080032b2 <__sseek>:
 80032b2:	b510      	push	{r4, lr}
 80032b4:	460c      	mov	r4, r1
 80032b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ba:	f000 f855 	bl	8003368 <_lseek_r>
 80032be:	1c43      	adds	r3, r0, #1
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	bf15      	itete	ne
 80032c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80032c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032ce:	81a3      	strheq	r3, [r4, #12]
 80032d0:	bf18      	it	ne
 80032d2:	81a3      	strhne	r3, [r4, #12]
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <__sclose>:
 80032d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032da:	f000 b813 	b.w	8003304 <_close_r>
	...

080032e0 <_write_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4d07      	ldr	r5, [pc, #28]	; (8003300 <_write_r+0x20>)
 80032e4:	4604      	mov	r4, r0
 80032e6:	4608      	mov	r0, r1
 80032e8:	4611      	mov	r1, r2
 80032ea:	2200      	movs	r2, #0
 80032ec:	602a      	str	r2, [r5, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f7fd fe7b 	bl	8000fea <_write>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	d102      	bne.n	80032fe <_write_r+0x1e>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	b103      	cbz	r3, 80032fe <_write_r+0x1e>
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
 8003300:	2000009c 	.word	0x2000009c

08003304 <_close_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4d06      	ldr	r5, [pc, #24]	; (8003320 <_close_r+0x1c>)
 8003308:	2300      	movs	r3, #0
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fd fe87 	bl	8001022 <_close>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_close_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_close_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	2000009c 	.word	0x2000009c

08003324 <_fstat_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4d07      	ldr	r5, [pc, #28]	; (8003344 <_fstat_r+0x20>)
 8003328:	2300      	movs	r3, #0
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	f7fd fe82 	bl	800103a <_fstat>
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	d102      	bne.n	8003340 <_fstat_r+0x1c>
 800333a:	682b      	ldr	r3, [r5, #0]
 800333c:	b103      	cbz	r3, 8003340 <_fstat_r+0x1c>
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	bd38      	pop	{r3, r4, r5, pc}
 8003342:	bf00      	nop
 8003344:	2000009c 	.word	0x2000009c

08003348 <_isatty_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4d06      	ldr	r5, [pc, #24]	; (8003364 <_isatty_r+0x1c>)
 800334c:	2300      	movs	r3, #0
 800334e:	4604      	mov	r4, r0
 8003350:	4608      	mov	r0, r1
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	f7fd fe81 	bl	800105a <_isatty>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d102      	bne.n	8003362 <_isatty_r+0x1a>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	b103      	cbz	r3, 8003362 <_isatty_r+0x1a>
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	2000009c 	.word	0x2000009c

08003368 <_lseek_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4d07      	ldr	r5, [pc, #28]	; (8003388 <_lseek_r+0x20>)
 800336c:	4604      	mov	r4, r0
 800336e:	4608      	mov	r0, r1
 8003370:	4611      	mov	r1, r2
 8003372:	2200      	movs	r2, #0
 8003374:	602a      	str	r2, [r5, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7fd fe7a 	bl	8001070 <_lseek>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	d102      	bne.n	8003386 <_lseek_r+0x1e>
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	b103      	cbz	r3, 8003386 <_lseek_r+0x1e>
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	bd38      	pop	{r3, r4, r5, pc}
 8003388:	2000009c 	.word	0x2000009c

0800338c <_read_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	4d07      	ldr	r5, [pc, #28]	; (80033ac <_read_r+0x20>)
 8003390:	4604      	mov	r4, r0
 8003392:	4608      	mov	r0, r1
 8003394:	4611      	mov	r1, r2
 8003396:	2200      	movs	r2, #0
 8003398:	602a      	str	r2, [r5, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	f7fd fe08 	bl	8000fb0 <_read>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d102      	bne.n	80033aa <_read_r+0x1e>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	b103      	cbz	r3, 80033aa <_read_r+0x1e>
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	2000009c 	.word	0x2000009c

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
