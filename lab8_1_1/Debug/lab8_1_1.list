
lab8_1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f24  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080020b8  080020b8  000120b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e0  080020e0  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020e8  080020e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e8  080020e8  000120e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020ec  080020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080020f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080020f4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080020f4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050e0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010c2  00000000  00000000  00025114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  000261d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00026858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011042  00000000  00000000  00026e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000485c  00000000  00000000  00037e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060684  00000000  00000000  0003c6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009cd62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a80  00000000  00000000  0009cdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080020a0 	.word	0x080020a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080020a0 	.word	0x080020a0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f003 0307 	and.w	r3, r3, #7
 80004da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <__NVIC_SetPriorityGrouping+0x44>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004e8:	4013      	ands	r3, r2
 80004ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <__NVIC_SetPriorityGrouping+0x44>)
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	60d3      	str	r3, [r2, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <LL_RCC_HSI_Enable+0x1c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <LL_RCC_HSI_Enable+0x1c>)
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40023800 	.word	0x40023800

08000534 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_RCC_HSI_IsReady+0x20>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 0302 	and.w	r3, r3, #2
 8000540:	2b02      	cmp	r3, #2
 8000542:	bf0c      	ite	eq
 8000544:	2301      	moveq	r3, #1
 8000546:	2300      	movne	r3, #0
 8000548:	b2db      	uxtb	r3, r3
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40023800 	.word	0x40023800

08000558 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	4904      	ldr	r1, [pc, #16]	; (8000580 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800056e:	4313      	orrs	r3, r2
 8000570:	600b      	str	r3, [r1, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_RCC_SetSysClkSource+0x24>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f023 0203 	bic.w	r2, r3, #3
 8000594:	4904      	ldr	r1, [pc, #16]	; (80005a8 <LL_RCC_SetSysClkSource+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40023800 	.word	0x40023800

080005ac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <LL_RCC_GetSysClkSource+0x18>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f003 030c 	and.w	r3, r3, #12
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800

080005c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LL_RCC_SetAHBPrescaler+0x24>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005d8:	4904      	ldr	r1, [pc, #16]	; (80005ec <LL_RCC_SetAHBPrescaler+0x24>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4313      	orrs	r3, r2
 80005de:	608b      	str	r3, [r1, #8]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40023800 	.word	0x40023800

080005f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000600:	4904      	ldr	r1, [pc, #16]	; (8000614 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4313      	orrs	r3, r2
 8000606:	608b      	str	r3, [r1, #8]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40023800 	.word	0x40023800

08000618 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <LL_RCC_SetAPB2Prescaler+0x24>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	608b      	str	r3, [r1, #8]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40023800 	.word	0x40023800

08000640 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <LL_RCC_SetTIMPrescaler+0x28>)
 800064a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800064e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000652:	4905      	ldr	r1, [pc, #20]	; (8000668 <LL_RCC_SetTIMPrescaler+0x28>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4313      	orrs	r3, r2
 8000658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40023800 	.word	0x40023800

0800066c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <LL_RCC_PLL_Enable+0x1c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <LL_RCC_PLL_Enable+0x1c>)
 8000676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <LL_RCC_PLL_IsReady+0x24>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800069c:	bf0c      	ite	eq
 800069e:	2301      	moveq	r3, #1
 80006a0:	2300      	movne	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	68f9      	ldr	r1, [r7, #12]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	4311      	orrs	r1, r2
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	430a      	orrs	r2, r1
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006d8:	4313      	orrs	r3, r2
 80006da:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006e4:	4904      	ldr	r1, [pc, #16]	; (80006f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	40023800 	.word	0x40023800
 80006fc:	ffbf8000 	.word	0xffbf8000

08000700 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800070a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4313      	orrs	r3, r2
 8000712:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4013      	ands	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800

08000730 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <LL_APB1_GRP1_EnableClock+0x2c>)
 800073a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <LL_APB1_GRP1_EnableClock+0x2c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4013      	ands	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <LL_APB2_GRP1_EnableClock+0x2c>)
 800076a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800076c:	4907      	ldr	r1, [pc, #28]	; (800078c <LL_APB2_GRP1_EnableClock+0x2c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4313      	orrs	r3, r2
 8000772:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4013      	ands	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40023800 	.word	0x40023800

08000790 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <LL_SYSCFG_SetEXTISource+0x58>)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	3302      	adds	r3, #2
 80007a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	0c1b      	lsrs	r3, r3, #16
 80007aa:	43db      	mvns	r3, r3
 80007ac:	ea02 0103 	and.w	r1, r2, r3
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	fa93 f3a3 	rbit	r3, r3
 80007bc:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	fab3 f383 	clz	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	fa03 f202 	lsl.w	r2, r3, r2
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <LL_SYSCFG_SetEXTISource+0x58>)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	430a      	orrs	r2, r1
 80007d6:	3302      	adds	r3, #2
 80007d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40013800 	.word	0x40013800

080007ec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <LL_FLASH_SetLatency+0x24>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f023 0207 	bic.w	r2, r3, #7
 80007fc:	4904      	ldr	r1, [pc, #16]	; (8000810 <LL_FLASH_SetLatency+0x24>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4313      	orrs	r3, r2
 8000802:	600b      	str	r3, [r1, #0]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40023c00 	.word	0x40023c00

08000814 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <LL_FLASH_GetLatency+0x18>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 0307 	and.w	r3, r3, #7
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023c00 	.word	0x40023c00

08000830 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000840:	4904      	ldr	r1, [pc, #16]	; (8000854 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	600b      	str	r3, [r1, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40007000 	.word	0x40007000

08000858 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	601a      	str	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d01c      	beq.n	80008c2 <LL_TIM_OC_DisableFast+0x4a>
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d017      	beq.n	80008be <LL_TIM_OC_DisableFast+0x46>
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b10      	cmp	r3, #16
 8000892:	d012      	beq.n	80008ba <LL_TIM_OC_DisableFast+0x42>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	2b40      	cmp	r3, #64	; 0x40
 8000898:	d00d      	beq.n	80008b6 <LL_TIM_OC_DisableFast+0x3e>
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a0:	d007      	beq.n	80008b2 <LL_TIM_OC_DisableFast+0x3a>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008a8:	d101      	bne.n	80008ae <LL_TIM_OC_DisableFast+0x36>
 80008aa:	2305      	movs	r3, #5
 80008ac:	e00a      	b.n	80008c4 <LL_TIM_OC_DisableFast+0x4c>
 80008ae:	2306      	movs	r3, #6
 80008b0:	e008      	b.n	80008c4 <LL_TIM_OC_DisableFast+0x4c>
 80008b2:	2304      	movs	r3, #4
 80008b4:	e006      	b.n	80008c4 <LL_TIM_OC_DisableFast+0x4c>
 80008b6:	2303      	movs	r3, #3
 80008b8:	e004      	b.n	80008c4 <LL_TIM_OC_DisableFast+0x4c>
 80008ba:	2302      	movs	r3, #2
 80008bc:	e002      	b.n	80008c4 <LL_TIM_OC_DisableFast+0x4c>
 80008be:	2301      	movs	r3, #1
 80008c0:	e000      	b.n	80008c4 <LL_TIM_OC_DisableFast+0x4c>
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3318      	adds	r3, #24
 80008ca:	4619      	mov	r1, r3
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LL_TIM_OC_DisableFast+0x84>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	440b      	add	r3, r1
 80008d4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	4908      	ldr	r1, [pc, #32]	; (8000900 <LL_TIM_OC_DisableFast+0x88>)
 80008de:	5ccb      	ldrb	r3, [r1, r3]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2304      	movs	r3, #4
 80008e4:	408b      	lsls	r3, r1
 80008e6:	43db      	mvns	r3, r3
 80008e8:	401a      	ands	r2, r3
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]

}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	080020b8 	.word	0x080020b8
 8000900:	080020c0 	.word	0x080020c0

08000904 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000916:	f023 0307 	bic.w	r3, r3, #7
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	431a      	orrs	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	609a      	str	r2, [r3, #8]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	431a      	orrs	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	605a      	str	r2, [r3, #4]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	609a      	str	r2, [r3, #8]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60da      	str	r2, [r3, #12]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	615a      	str	r2, [r3, #20]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa93 f3a3 	rbit	r3, r3
 80009da:	613b      	str	r3, [r7, #16]
  return result;
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2103      	movs	r1, #3
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	401a      	ands	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	fa93 f3a3 	rbit	r3, r3
 80009fa:	61bb      	str	r3, [r7, #24]
  return result;
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fab3 f383 	clz	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	601a      	str	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b089      	sub	sp, #36	; 0x24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	fa93 f3a3 	rbit	r3, r3
 8000a38:	613b      	str	r3, [r7, #16]
  return result;
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	fab3 f383 	clz	r3, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2103      	movs	r1, #3
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	fa93 f3a3 	rbit	r3, r3
 8000a58:	61bb      	str	r3, [r7, #24]
  return result;
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	fab3 f383 	clz	r3, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	60da      	str	r2, [r3, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3724      	adds	r7, #36	; 0x24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	041a      	lsls	r2, r3, #16
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	619a      	str	r2, [r3, #24]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000aa0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000aa4:	f7ff fe5c 	bl	8000760 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000aa8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000aac:	f7ff fe40 	bl	8000730 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab0:	2007      	movs	r0, #7
 8000ab2:	f7ff fd0b 	bl	80004cc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f815 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 f919 	bl	8000cf0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000abe:	f000 f8c7 	bl	8000c50 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ac2:	f000 f859 	bl	8000b78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_WriteReg(TIM3, CR1, LL_TIM_ReadReg(TIM3, CR1) | 0x01);
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <main+0x44>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <main+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6013      	str	r3, [r2, #0]
  LL_TIM_WriteReg(TIM3, CCER, LL_TIM_ReadReg(TIM3, CCER) | 0x01);
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <main+0x44>)
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	4a02      	ldr	r2, [pc, #8]	; (8000ae0 <main+0x44>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6213      	str	r3, [r2, #32]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x42>
 8000ae0:	40000400 	.word	0x40000400

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fe7f 	bl	80007ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000aee:	bf00      	nop
 8000af0:	f7ff fe90 	bl	8000814 <LL_FLASH_GetLatency>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d1fa      	bne.n	8000af0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000afa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000afe:	f7ff fe97 	bl	8000830 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000b02:	2010      	movs	r0, #16
 8000b04:	f7ff fd28 	bl	8000558 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000b08:	f7ff fd04 	bl	8000514 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000b0c:	bf00      	nop
 8000b0e:	f7ff fd11 	bl	8000534 <LL_RCC_HSI_IsReady>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d1fa      	bne.n	8000b0e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000b20:	2110      	movs	r1, #16
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fdc6 	bl	80006b4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b28:	f7ff fda0 	bl	800066c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b2c:	bf00      	nop
 8000b2e:	f7ff fdad 	bl	800068c <LL_RCC_PLL_IsReady>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d1fa      	bne.n	8000b2e <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fd45 	bl	80005c8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000b3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b42:	f7ff fd55 	bl	80005f0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fd66 	bl	8000618 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f7ff fd19 	bl	8000584 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b52:	bf00      	nop
 8000b54:	f7ff fd2a 	bl	80005ac <LL_RCC_GetSysClkSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d1fa      	bne.n	8000b54 <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <SystemClock_Config+0x90>)
 8000b60:	f001 fa54 	bl	800200c <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <SystemClock_Config+0x90>)
 8000b66:	f001 fa5f 	bl	8002028 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fd68 	bl	8000640 <LL_RCC_SetTIMPrescaler>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	0501bd00 	.word	0x0501bd00

08000b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	; 0x50
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fa7a 	bl	8002090 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
 8000baa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f7ff fdbf 	bl	8000730 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 16799;
 8000bba:	f244 139f 	movw	r3, #16799	; 0x419f
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000bc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481f      	ldr	r0, [pc, #124]	; (8000c48 <MX_TIM3_Init+0xd0>)
 8000bcc:	f000 fd8e 	bl	80016ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000bd0:	481d      	ldr	r0, [pc, #116]	; (8000c48 <MX_TIM3_Init+0xd0>)
 8000bd2:	f7ff fe41 	bl	8000858 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	481b      	ldr	r0, [pc, #108]	; (8000c48 <MX_TIM3_Init+0xd0>)
 8000bda:	f7ff fe93 	bl	8000904 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8000bde:	2330      	movs	r3, #48	; 0x30
 8000be0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4813      	ldr	r0, [pc, #76]	; (8000c48 <MX_TIM3_Init+0xd0>)
 8000bfc:	f000 fdf0 	bl	80017e0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000c00:	2101      	movs	r1, #1
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_TIM3_Init+0xd0>)
 8000c04:	f7ff fe38 	bl	8000878 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480f      	ldr	r0, [pc, #60]	; (8000c48 <MX_TIM3_Init+0xd0>)
 8000c0c:	f7ff fe8f 	bl	800092e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_TIM3_Init+0xd0>)
 8000c12:	f7ff fe9f 	bl	8000954 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000c16:	2004      	movs	r0, #4
 8000c18:	f7ff fd72 	bl	8000700 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000c1c:	2340      	movs	r3, #64	; 0x40
 8000c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c20:	2302      	movs	r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_TIM3_Init+0xd4>)
 8000c3a:	f000 fb37 	bl	80012ac <LL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	; 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40000400 	.word	0x40000400
 8000c4c:	40020800 	.word	0x40020800

08000c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	615a      	str	r2, [r3, #20]
 8000c68:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c7e:	f7ff fd57 	bl	8000730 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fd3c 	bl	8000700 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <MX_USART2_UART_Init+0x98>)
 8000ca6:	f000 fb01 	bl	80012ac <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000caa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_USART2_UART_Init+0x9c>)
 8000cd0:	f001 f91e 	bl	8001f10 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART2_UART_Init+0x9c>)
 8000cd6:	f7ff fe5d 	bl	8000994 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_USART2_UART_Init+0x9c>)
 8000cdc:	f7ff fe4a 	bl	8000974 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d10:	2004      	movs	r0, #4
 8000d12:	f7ff fcf5 	bl	8000700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000d16:	2080      	movs	r0, #128	; 0x80
 8000d18:	f7ff fcf2 	bl	8000700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fcef 	bl	8000700 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff fcec 	bl	8000700 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000d28:	2120      	movs	r1, #32
 8000d2a:	481a      	ldr	r0, [pc, #104]	; (8000d94 <MX_GPIO_Init+0xa4>)
 8000d2c:	f7ff fea6 	bl	8000a7c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000d30:	4919      	ldr	r1, [pc, #100]	; (8000d98 <MX_GPIO_Init+0xa8>)
 8000d32:	2002      	movs	r0, #2
 8000d34:	f7ff fd2c 	bl	8000790 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d46:	2302      	movs	r3, #2
 8000d48:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f926 	bl	8000fa0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	4810      	ldr	r0, [pc, #64]	; (8000d9c <MX_GPIO_Init+0xac>)
 8000d5c:	f7ff fe5f 	bl	8000a1e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_GPIO_Init+0xac>)
 8000d68:	f7ff fe2a 	bl	80009c0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d70:	2301      	movs	r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_GPIO_Init+0xa4>)
 8000d86:	f000 fa91 	bl	80012ac <LL_GPIO_Init>

}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	00f00003 	.word	0x00f00003
 8000d9c:	40020800 	.word	0x40020800

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f001 f8fd 	bl	8002048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fe25 	bl	8000a9c <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000e60:	080020f0 	.word	0x080020f0
  ldr r2, =_sbss
 8000e64:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000e68:	20000020 	.word	0x20000020

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <LL_EXTI_EnableIT_0_31+0x20>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4904      	ldr	r1, [pc, #16]	; (8000e90 <LL_EXTI_EnableIT_0_31+0x20>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40013c00 	.word	0x40013c00

08000e94 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4904      	ldr	r1, [pc, #16]	; (8000eb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40013c00 	.word	0x40013c00

08000ebc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <LL_EXTI_EnableEvent_0_31+0x20>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4904      	ldr	r1, [pc, #16]	; (8000edc <LL_EXTI_EnableEvent_0_31+0x20>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]

}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40013c00 	.word	0x40013c00

08000ee0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4904      	ldr	r1, [pc, #16]	; (8000f04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	604b      	str	r3, [r1, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4904      	ldr	r1, [pc, #16]	; (8000f28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]

}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40013c00 	.word	0x40013c00

08000f2c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	4904      	ldr	r1, [pc, #16]	; (8000f50 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	608b      	str	r3, [r1, #8]

}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40013c00 	.word	0x40013c00

08000f54 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	4904      	ldr	r1, [pc, #16]	; (8000f74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60cb      	str	r3, [r1, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40013c00 	.word	0x40013c00

08000f78 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	4904      	ldr	r1, [pc, #16]	; (8000f9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60cb      	str	r3, [r1, #12]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d065      	beq.n	8001080 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d06c      	beq.n	8001096 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d01c      	beq.n	8000ffe <LL_EXTI_Init+0x5e>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	dc25      	bgt.n	8001014 <LL_EXTI_Init+0x74>
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <LL_EXTI_Init+0x32>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d00b      	beq.n	8000fe8 <LL_EXTI_Init+0x48>
 8000fd0:	e020      	b.n	8001014 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff82 	bl	8000ee0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff45 	bl	8000e70 <LL_EXTI_EnableIT_0_31>
          break;
 8000fe6:	e018      	b.n	800101a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff51 	bl	8000e94 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff60 	bl	8000ebc <LL_EXTI_EnableEvent_0_31>
          break;
 8000ffc:	e00d      	b.n	800101a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff34 	bl	8000e70 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff55 	bl	8000ebc <LL_EXTI_EnableEvent_0_31>
          break;
 8001012:	e002      	b.n	800101a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
          break;
 8001018:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	799b      	ldrb	r3, [r3, #6]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d039      	beq.n	8001096 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	799b      	ldrb	r3, [r3, #6]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d01c      	beq.n	8001064 <LL_EXTI_Init+0xc4>
 800102a:	2b03      	cmp	r3, #3
 800102c:	dc25      	bgt.n	800107a <LL_EXTI_Init+0xda>
 800102e:	2b01      	cmp	r3, #1
 8001030:	d002      	beq.n	8001038 <LL_EXTI_Init+0x98>
 8001032:	2b02      	cmp	r3, #2
 8001034:	d00b      	beq.n	800104e <LL_EXTI_Init+0xae>
 8001036:	e020      	b.n	800107a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff9b 	bl	8000f78 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff5e 	bl	8000f08 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800104c:	e024      	b.n	8001098 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff6a 	bl	8000f2c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff79 	bl	8000f54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001062:	e019      	b.n	8001098 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff4d 	bl	8000f08 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff6e 	bl	8000f54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001078:	e00e      	b.n	8001098 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
            break;
 800107e:	e00b      	b.n	8001098 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff05 	bl	8000e94 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff26 	bl	8000ee0 <LL_EXTI_DisableEvent_0_31>
 8001094:	e000      	b.n	8001098 <LL_EXTI_Init+0xf8>
      }
 8001096:	bf00      	nop
  }
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <LL_GPIO_SetPinMode>:
{
 80010a2:	b480      	push	{r7}
 80010a4:	b089      	sub	sp, #36	; 0x24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	613b      	str	r3, [r7, #16]
  return result;
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	fab3 f383 	clz	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2103      	movs	r1, #3
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	61bb      	str	r3, [r7, #24]
  return result;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	fab3 f383 	clz	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	431a      	orrs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3724      	adds	r7, #36	; 0x24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_GPIO_SetPinOutputType>:
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	43db      	mvns	r3, r3
 8001114:	401a      	ands	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	fb01 f303 	mul.w	r3, r1, r3
 800111e:	431a      	orrs	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	605a      	str	r2, [r3, #4]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_GPIO_SetPinSpeed>:
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	613b      	str	r3, [r7, #16]
  return result;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2103      	movs	r1, #3
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	61bb      	str	r3, [r7, #24]
  return result;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	431a      	orrs	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	609a      	str	r2, [r3, #8]
}
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_GPIO_SetPinPull>:
{
 800118e:	b480      	push	{r7}
 8001190:	b089      	sub	sp, #36	; 0x24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	613b      	str	r3, [r7, #16]
  return result;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2103      	movs	r1, #3
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	401a      	ands	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	61bb      	str	r3, [r7, #24]
  return result;
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	60da      	str	r2, [r3, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3724      	adds	r7, #36	; 0x24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_GPIO_SetAFPin_0_7>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	613b      	str	r3, [r7, #16]
  return result;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	fab3 f383 	clz	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	210f      	movs	r1, #15
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	401a      	ands	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	61bb      	str	r3, [r7, #24]
  return result;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	431a      	orrs	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	621a      	str	r2, [r3, #32]
}
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_GPIO_SetAFPin_8_15>:
{
 800124a:	b480      	push	{r7}
 800124c:	b089      	sub	sp, #36	; 0x24
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	613b      	str	r3, [r7, #16]
  return result;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	210f      	movs	r1, #15
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	61bb      	str	r3, [r7, #24]
  return result;
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012a0:	bf00      	nop
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	613b      	str	r3, [r7, #16]
  return result;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012d6:	e050      	b.n	800137a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d042      	beq.n	8001374 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d003      	beq.n	80012fe <LL_GPIO_Init+0x52>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d10d      	bne.n	800131a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	461a      	mov	r2, r3
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff12 	bl	8001130 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	461a      	mov	r2, r3
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fef3 	bl	8001100 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	461a      	mov	r2, r3
 8001320:	69b9      	ldr	r1, [r7, #24]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff33 	bl	800118e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d11a      	bne.n	8001366 <LL_GPIO_Init+0xba>
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	60bb      	str	r3, [r7, #8]
  return result;
 800133c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b07      	cmp	r3, #7
 8001346:	d807      	bhi.n	8001358 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	461a      	mov	r2, r3
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff4b 	bl	80011ec <LL_GPIO_SetAFPin_0_7>
 8001356:	e006      	b.n	8001366 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	461a      	mov	r2, r3
 800135e:	69b9      	ldr	r1, [r7, #24]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff72 	bl	800124a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	461a      	mov	r2, r3
 800136c:	69b9      	ldr	r1, [r7, #24]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fe97 	bl	80010a2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1a7      	bne.n	80012d8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <LL_RCC_GetSysClkSource>:
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <LL_RCC_GetSysClkSource+0x18>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <LL_RCC_GetAHBPrescaler>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <LL_RCC_GetAHBPrescaler+0x18>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <LL_RCC_GetAPB1Prescaler>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <LL_RCC_GetAPB2Prescaler>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <LL_RCC_GetAPB2Prescaler+0x18>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <LL_RCC_PLL_GetMainSource+0x18>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <LL_RCC_PLL_GetN+0x18>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40023800 	.word	0x40023800

0800143c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <LL_RCC_PLL_GetP+0x18>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <LL_RCC_PLL_GetDivider+0x18>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800147c:	f000 f820 	bl	80014c0 <RCC_GetSystemClockFreq>
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f840 	bl	8001510 <RCC_GetHCLKClockFreq>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f84e 	bl	800153c <RCC_GetPCLK1ClockFreq>
 80014a0:	4602      	mov	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f85a 	bl	8001564 <RCC_GetPCLK2ClockFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60da      	str	r2, [r3, #12]
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80014ca:	f7ff ff63 	bl	8001394 <LL_RCC_GetSysClkSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d00c      	beq.n	80014ee <RCC_GetSystemClockFreq+0x2e>
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d80f      	bhi.n	80014f8 <RCC_GetSystemClockFreq+0x38>
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <RCC_GetSystemClockFreq+0x22>
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d003      	beq.n	80014e8 <RCC_GetSystemClockFreq+0x28>
 80014e0:	e00a      	b.n	80014f8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <RCC_GetSystemClockFreq+0x48>)
 80014e4:	607b      	str	r3, [r7, #4]
      break;
 80014e6:	e00a      	b.n	80014fe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <RCC_GetSystemClockFreq+0x4c>)
 80014ea:	607b      	str	r3, [r7, #4]
      break;
 80014ec:	e007      	b.n	80014fe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80014ee:	2008      	movs	r0, #8
 80014f0:	f000 f84c 	bl	800158c <RCC_PLL_GetFreqDomain_SYS>
 80014f4:	6078      	str	r0, [r7, #4]
      break;
 80014f6:	e002      	b.n	80014fe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <RCC_GetSystemClockFreq+0x48>)
 80014fa:	607b      	str	r3, [r7, #4]
      break;
 80014fc:	bf00      	nop
  }

  return frequency;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	00f42400 	.word	0x00f42400
 800150c:	007a1200 	.word	0x007a1200

08001510 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001518:	f7ff ff4a 	bl	80013b0 <LL_RCC_GetAHBPrescaler>
 800151c:	4603      	mov	r3, r0
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <RCC_GetHCLKClockFreq+0x28>)
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	40d3      	lsrs	r3, r2
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	080020c8 	.word	0x080020c8

0800153c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001544:	f7ff ff42 	bl	80013cc <LL_RCC_GetAPB1Prescaler>
 8001548:	4603      	mov	r3, r0
 800154a:	0a9b      	lsrs	r3, r3, #10
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <RCC_GetPCLK1ClockFreq+0x24>)
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	461a      	mov	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	40d3      	lsrs	r3, r2
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	080020d8 	.word	0x080020d8

08001564 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800156c:	f7ff ff3c 	bl	80013e8 <LL_RCC_GetAPB2Prescaler>
 8001570:	4603      	mov	r3, r0
 8001572:	0b5b      	lsrs	r3, r3, #13
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <RCC_GetPCLK2ClockFreq+0x24>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	40d3      	lsrs	r3, r2
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	080020d8 	.word	0x080020d8

0800158c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80015a0:	f7ff ff30 	bl	8001404 <LL_RCC_PLL_GetMainSource>
 80015a4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b2:	d003      	beq.n	80015bc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80015b4:	e005      	b.n	80015c2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80015b8:	617b      	str	r3, [r7, #20]
      break;
 80015ba:	e005      	b.n	80015c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80015be:	617b      	str	r3, [r7, #20]
      break;
 80015c0:	e002      	b.n	80015c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80015c4:	617b      	str	r3, [r7, #20]
      break;
 80015c6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d113      	bne.n	80015f6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80015ce:	f7ff ff43 	bl	8001458 <LL_RCC_PLL_GetDivider>
 80015d2:	4602      	mov	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fbb3 f4f2 	udiv	r4, r3, r2
 80015da:	f7ff ff21 	bl	8001420 <LL_RCC_PLL_GetN>
 80015de:	4603      	mov	r3, r0
 80015e0:	fb03 f404 	mul.w	r4, r3, r4
 80015e4:	f7ff ff2a 	bl	800143c <LL_RCC_PLL_GetP>
 80015e8:	4603      	mov	r3, r0
 80015ea:	0c1b      	lsrs	r3, r3, #16
 80015ec:	3301      	adds	r3, #1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fbb4 f3f3 	udiv	r3, r4, r3
 80015f4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80015f6:	693b      	ldr	r3, [r7, #16]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	00f42400 	.word	0x00f42400
 8001604:	007a1200 	.word	0x007a1200

08001608 <LL_TIM_SetPrescaler>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_TIM_SetAutoReload>:
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_TIM_SetRepetitionCounter>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_TIM_OC_SetCompareCH1>:
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_TIM_OC_SetCompareCH2>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_TIM_OC_SetCompareCH3>:
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_TIM_OC_SetCompareCH4>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	615a      	str	r2, [r3, #20]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <LL_TIM_Init+0xd8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d00f      	beq.n	8001724 <LL_TIM_Init+0x38>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170a:	d00b      	beq.n	8001724 <LL_TIM_Init+0x38>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a2e      	ldr	r2, [pc, #184]	; (80017c8 <LL_TIM_Init+0xdc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <LL_TIM_Init+0x38>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <LL_TIM_Init+0xe0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d003      	beq.n	8001724 <LL_TIM_Init+0x38>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <LL_TIM_Init+0xe4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d106      	bne.n	8001732 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <LL_TIM_Init+0xd8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01b      	beq.n	8001772 <LL_TIM_Init+0x86>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d017      	beq.n	8001772 <LL_TIM_Init+0x86>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <LL_TIM_Init+0xdc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <LL_TIM_Init+0x86>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <LL_TIM_Init+0xe0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00f      	beq.n	8001772 <LL_TIM_Init+0x86>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <LL_TIM_Init+0xe4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00b      	beq.n	8001772 <LL_TIM_Init+0x86>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <LL_TIM_Init+0xe8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <LL_TIM_Init+0x86>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <LL_TIM_Init+0xec>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d003      	beq.n	8001772 <LL_TIM_Init+0x86>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <LL_TIM_Init+0xf0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d106      	bne.n	8001780 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff49 	bl	8001624 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff35 	bl	8001608 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <LL_TIM_Init+0xd8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d105      	bne.n	80017b2 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff47 	bl	8001640 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ff8a 	bl	80016cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40000400 	.word	0x40000400
 80017cc:	40000800 	.word	0x40000800
 80017d0:	40000c00 	.word	0x40000c00
 80017d4:	40014000 	.word	0x40014000
 80017d8:	40014400 	.word	0x40014400
 80017dc:	40014800 	.word	0x40014800

080017e0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f6:	d027      	beq.n	8001848 <LL_TIM_OC_Init+0x68>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017fe:	d82a      	bhi.n	8001856 <LL_TIM_OC_Init+0x76>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001806:	d018      	beq.n	800183a <LL_TIM_OC_Init+0x5a>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d822      	bhi.n	8001856 <LL_TIM_OC_Init+0x76>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d003      	beq.n	800181e <LL_TIM_OC_Init+0x3e>
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b10      	cmp	r3, #16
 800181a:	d007      	beq.n	800182c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800181c:	e01b      	b.n	8001856 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f81f 	bl	8001864 <OC1Config>
 8001826:	4603      	mov	r3, r0
 8001828:	75fb      	strb	r3, [r7, #23]
      break;
 800182a:	e015      	b.n	8001858 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f87e 	bl	8001930 <OC2Config>
 8001834:	4603      	mov	r3, r0
 8001836:	75fb      	strb	r3, [r7, #23]
      break;
 8001838:	e00e      	b.n	8001858 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f8e1 	bl	8001a04 <OC3Config>
 8001842:	4603      	mov	r3, r0
 8001844:	75fb      	strb	r3, [r7, #23]
      break;
 8001846:	e007      	b.n	8001858 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f944 	bl	8001ad8 <OC4Config>
 8001850:	4603      	mov	r3, r0
 8001852:	75fb      	strb	r3, [r7, #23]
      break;
 8001854:	e000      	b.n	8001858 <LL_TIM_OC_Init+0x78>
      break;
 8001856:	bf00      	nop
  }

  return result;
 8001858:	7dfb      	ldrb	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	f023 0201 	bic.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f023 0202 	bic.w	r2, r3, #2
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f023 0201 	bic.w	r2, r3, #1
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a1a      	ldr	r2, [pc, #104]	; (800192c <OC1Config+0xc8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11e      	bne.n	8001904 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f023 0208 	bic.w	r2, r3, #8
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f023 0204 	bic.w	r2, r3, #4
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4313      	orrs	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fea0 	bl	800165c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40010000 	.word	0x40010000

08001930 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	f023 0210 	bic.w	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0220 	bic.w	r2, r3, #32
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f023 0210 	bic.w	r2, r3, #16
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <OC2Config+0xd0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d11f      	bne.n	80019d8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	019b      	lsls	r3, r3, #6
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	019b      	lsls	r3, r3, #6
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe44 	bl	8001678 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010000 	.word	0x40010000

08001a04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <OC3Config+0xd0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11f      	bne.n	8001aaa <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	029b      	lsls	r3, r3, #10
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	015b      	lsls	r3, r3, #5
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fde9 	bl	8001694 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000

08001ad8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	031b      	lsls	r3, r3, #12
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	031b      	lsls	r3, r3, #12
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <OC4Config+0xa0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d107      	bne.n	8001b50 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	019b      	lsls	r3, r3, #6
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fda4 	bl	80016b0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40010000 	.word	0x40010000

08001b7c <LL_USART_IsEnabled>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b90:	bf0c      	ite	eq
 8001b92:	2301      	moveq	r3, #1
 8001b94:	2300      	movne	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_USART_SetStopBitsLength>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_USART_SetHWFlowCtrl>:
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	615a      	str	r2, [r3, #20]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_USART_SetBaudRate>:
{
 8001bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf4:	b09f      	sub	sp, #124	; 0x7c
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6778      	str	r0, [r7, #116]	; 0x74
 8001bfa:	6739      	str	r1, [r7, #112]	; 0x70
 8001bfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bfe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c06:	f040 80bc 	bne.w	8001d82 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c0c:	461c      	mov	r4, r3
 8001c0e:	f04f 0500 	mov.w	r5, #0
 8001c12:	4622      	mov	r2, r4
 8001c14:	462b      	mov	r3, r5
 8001c16:	eb12 0a02 	adds.w	sl, r2, r2
 8001c1a:	eb43 0b03 	adc.w	fp, r3, r3
 8001c1e:	4652      	mov	r2, sl
 8001c20:	465b      	mov	r3, fp
 8001c22:	1912      	adds	r2, r2, r4
 8001c24:	eb45 0303 	adc.w	r3, r5, r3
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	00d9      	lsls	r1, r3, #3
 8001c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c36:	00d0      	lsls	r0, r2, #3
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	1911      	adds	r1, r2, r4
 8001c3e:	6639      	str	r1, [r7, #96]	; 0x60
 8001c40:	416b      	adcs	r3, r5
 8001c42:	667b      	str	r3, [r7, #100]	; 0x64
 8001c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c46:	461a      	mov	r2, r3
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	1891      	adds	r1, r2, r2
 8001c4e:	6339      	str	r1, [r7, #48]	; 0x30
 8001c50:	415b      	adcs	r3, r3
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
 8001c54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c5c:	f7fe faba 	bl	80001d4 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4ba9      	ldr	r3, [pc, #676]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001c66:	fba3 2302 	umull	r2, r3, r3, r2
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	b29e      	uxth	r6, r3
 8001c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c74:	461c      	mov	r4, r3
 8001c76:	f04f 0500 	mov.w	r5, #0
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	1891      	adds	r1, r2, r2
 8001c80:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c82:	415b      	adcs	r3, r3
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c8a:	1912      	adds	r2, r2, r4
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	00d9      	lsls	r1, r3, #3
 8001c9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c9e:	00d0      	lsls	r0, r2, #3
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	1911      	adds	r1, r2, r4
 8001ca6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ca8:	416b      	adcs	r3, r5
 8001caa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	1891      	adds	r1, r2, r2
 8001cb6:	6239      	str	r1, [r7, #32]
 8001cb8:	415b      	adcs	r3, r3
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cc0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cc4:	f7fe fa86 	bl	80001d4 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4b8f      	ldr	r3, [pc, #572]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001cce:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2164      	movs	r1, #100	; 0x64
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	3332      	adds	r3, #50	; 0x32
 8001ce0:	4a8a      	ldr	r2, [pc, #552]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4433      	add	r3, r6
 8001cf6:	b29e      	uxth	r6, r3
 8001cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	1894      	adds	r4, r2, r2
 8001d06:	61bc      	str	r4, [r7, #24]
 8001d08:	415b      	adcs	r3, r3
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d10:	1812      	adds	r2, r2, r0
 8001d12:	eb41 0303 	adc.w	r3, r1, r3
 8001d16:	f04f 0400 	mov.w	r4, #0
 8001d1a:	f04f 0500 	mov.w	r5, #0
 8001d1e:	00dd      	lsls	r5, r3, #3
 8001d20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001d24:	00d4      	lsls	r4, r2, #3
 8001d26:	4622      	mov	r2, r4
 8001d28:	462b      	mov	r3, r5
 8001d2a:	1814      	adds	r4, r2, r0
 8001d2c:	653c      	str	r4, [r7, #80]	; 0x50
 8001d2e:	414b      	adcs	r3, r1
 8001d30:	657b      	str	r3, [r7, #84]	; 0x54
 8001d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d34:	461a      	mov	r2, r3
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	1891      	adds	r1, r2, r2
 8001d3c:	6139      	str	r1, [r7, #16]
 8001d3e:	415b      	adcs	r3, r3
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d4a:	f7fe fa43 	bl	80001d4 <__aeabi_uldivmod>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4b6e      	ldr	r3, [pc, #440]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001d54:	fba3 1302 	umull	r1, r3, r3, r2
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	2164      	movs	r1, #100	; 0x64
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	3332      	adds	r3, #50	; 0x32
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4433      	add	r3, r6
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7e:	609a      	str	r2, [r3, #8]
}
 8001d80:	e0be      	b.n	8001f00 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d84:	461c      	mov	r4, r3
 8001d86:	f04f 0500 	mov.w	r5, #0
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	eb12 0802 	adds.w	r8, r2, r2
 8001d92:	eb43 0903 	adc.w	r9, r3, r3
 8001d96:	4642      	mov	r2, r8
 8001d98:	464b      	mov	r3, r9
 8001d9a:	1912      	adds	r2, r2, r4
 8001d9c:	eb45 0303 	adc.w	r3, r5, r3
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	00d9      	lsls	r1, r3, #3
 8001daa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dae:	00d0      	lsls	r0, r2, #3
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	1911      	adds	r1, r2, r4
 8001db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001db8:	416b      	adcs	r3, r5
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	008b      	lsls	r3, r1, #2
 8001dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001dd2:	0082      	lsls	r2, r0, #2
 8001dd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dd8:	f7fe f9fc 	bl	80001d4 <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001de2:	fba3 2302 	umull	r2, r3, r3, r2
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	b29e      	uxth	r6, r3
 8001dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df0:	4618      	mov	r0, r3
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	1894      	adds	r4, r2, r2
 8001dfc:	60bc      	str	r4, [r7, #8]
 8001dfe:	415b      	adcs	r3, r3
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e06:	1812      	adds	r2, r2, r0
 8001e08:	eb41 0303 	adc.w	r3, r1, r3
 8001e0c:	f04f 0400 	mov.w	r4, #0
 8001e10:	f04f 0500 	mov.w	r5, #0
 8001e14:	00dd      	lsls	r5, r3, #3
 8001e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e1a:	00d4      	lsls	r4, r2, #3
 8001e1c:	4622      	mov	r2, r4
 8001e1e:	462b      	mov	r3, r5
 8001e20:	1814      	adds	r4, r2, r0
 8001e22:	643c      	str	r4, [r7, #64]	; 0x40
 8001e24:	414b      	adcs	r3, r1
 8001e26:	647b      	str	r3, [r7, #68]	; 0x44
 8001e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	008b      	lsls	r3, r1, #2
 8001e3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001e3e:	0082      	lsls	r2, r0, #2
 8001e40:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e44:	f7fe f9c6 	bl	80001d4 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2164      	movs	r1, #100	; 0x64
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	3332      	adds	r3, #50	; 0x32
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4433      	add	r3, r6
 8001e72:	b29e      	uxth	r6, r3
 8001e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e76:	4618      	mov	r0, r3
 8001e78:	f04f 0100 	mov.w	r1, #0
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	1894      	adds	r4, r2, r2
 8001e82:	603c      	str	r4, [r7, #0]
 8001e84:	415b      	adcs	r3, r3
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e8c:	1812      	adds	r2, r2, r0
 8001e8e:	eb41 0303 	adc.w	r3, r1, r3
 8001e92:	f04f 0400 	mov.w	r4, #0
 8001e96:	f04f 0500 	mov.w	r5, #0
 8001e9a:	00dd      	lsls	r5, r3, #3
 8001e9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001ea0:	00d4      	lsls	r4, r2, #3
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	462b      	mov	r3, r5
 8001ea6:	1814      	adds	r4, r2, r0
 8001ea8:	63bc      	str	r4, [r7, #56]	; 0x38
 8001eaa:	414b      	adcs	r3, r1
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f04f 0100 	mov.w	r1, #0
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	008b      	lsls	r3, r1, #2
 8001ec0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001ec4:	0082      	lsls	r2, r0, #2
 8001ec6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001eca:	f7fe f983 	bl	80001d4 <__aeabi_uldivmod>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	2164      	movs	r1, #100	; 0x64
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	3332      	adds	r3, #50	; 0x32
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <LL_USART_SetBaudRate+0x31c>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4433      	add	r3, r6
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001efe:	609a      	str	r2, [r3, #8]
}
 8001f00:	bf00      	nop
 8001f02:	377c      	adds	r7, #124	; 0x7c
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0a:	bf00      	nop
 8001f0c:	51eb851f 	.word	0x51eb851f

08001f10 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fe2a 	bl	8001b7c <LL_USART_IsEnabled>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d149      	bne.n	8001fc2 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f36:	f023 030c 	bic.w	r3, r3, #12
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	6851      	ldr	r1, [r2, #4]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	4311      	orrs	r1, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	6912      	ldr	r2, [r2, #16]
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	6992      	ldr	r2, [r2, #24]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fe21 	bl	8001ba4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fe2e 	bl	8001bca <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fa7e 	bl	8001474 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <LL_USART_Init+0xbc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d102      	bne.n	8001f86 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e00c      	b.n	8001fa0 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <LL_USART_Init+0xc0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d102      	bne.n	8001f94 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	e005      	b.n	8001fa0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <LL_USART_Init+0xc4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fe17 	bl	8001bf0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40011000 	.word	0x40011000
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40011400 	.word	0x40011400

08001fd8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <LL_InitTick+0x30>)
 8001fec:	3b01      	subs	r3, #1
 8001fee:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <LL_InitTick+0x30>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <LL_InitTick+0x30>)
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e010 	.word	0xe000e010

0800200c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002014:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffdd 	bl	8001fd8 <LL_InitTick>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <LL_SetSystemCoreClock+0x1c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000

08002048 <__libc_init_array>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	4d0d      	ldr	r5, [pc, #52]	; (8002080 <__libc_init_array+0x38>)
 800204c:	4c0d      	ldr	r4, [pc, #52]	; (8002084 <__libc_init_array+0x3c>)
 800204e:	1b64      	subs	r4, r4, r5
 8002050:	10a4      	asrs	r4, r4, #2
 8002052:	2600      	movs	r6, #0
 8002054:	42a6      	cmp	r6, r4
 8002056:	d109      	bne.n	800206c <__libc_init_array+0x24>
 8002058:	4d0b      	ldr	r5, [pc, #44]	; (8002088 <__libc_init_array+0x40>)
 800205a:	4c0c      	ldr	r4, [pc, #48]	; (800208c <__libc_init_array+0x44>)
 800205c:	f000 f820 	bl	80020a0 <_init>
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	2600      	movs	r6, #0
 8002066:	42a6      	cmp	r6, r4
 8002068:	d105      	bne.n	8002076 <__libc_init_array+0x2e>
 800206a:	bd70      	pop	{r4, r5, r6, pc}
 800206c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002070:	4798      	blx	r3
 8002072:	3601      	adds	r6, #1
 8002074:	e7ee      	b.n	8002054 <__libc_init_array+0xc>
 8002076:	f855 3b04 	ldr.w	r3, [r5], #4
 800207a:	4798      	blx	r3
 800207c:	3601      	adds	r6, #1
 800207e:	e7f2      	b.n	8002066 <__libc_init_array+0x1e>
 8002080:	080020e8 	.word	0x080020e8
 8002084:	080020e8 	.word	0x080020e8
 8002088:	080020e8 	.word	0x080020e8
 800208c:	080020ec 	.word	0x080020ec

08002090 <memset>:
 8002090:	4402      	add	r2, r0
 8002092:	4603      	mov	r3, r0
 8002094:	4293      	cmp	r3, r2
 8002096:	d100      	bne.n	800209a <memset+0xa>
 8002098:	4770      	bx	lr
 800209a:	f803 1b01 	strb.w	r1, [r3], #1
 800209e:	e7f9      	b.n	8002094 <memset+0x4>

080020a0 <_init>:
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	bf00      	nop
 80020a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a6:	bc08      	pop	{r3}
 80020a8:	469e      	mov	lr, r3
 80020aa:	4770      	bx	lr

080020ac <_fini>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	bf00      	nop
 80020b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b2:	bc08      	pop	{r3}
 80020b4:	469e      	mov	lr, r3
 80020b6:	4770      	bx	lr
