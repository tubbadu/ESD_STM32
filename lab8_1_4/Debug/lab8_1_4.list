
lab8_1_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d64  08002d64  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d6c  08002d6c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002d78  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002d78  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ed1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a0  00000000  00000000  00025f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  000271a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b99  00000000  00000000  00027fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f9f  00000000  00000000  00039b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006942b  00000000  00000000  0003ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a7f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f30  00000000  00000000  000a7f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d24 	.word	0x08002d24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08002d24 	.word	0x08002d24

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d8:	f000 b96e 	b.w	8000cb8 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468c      	mov	ip, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f040 8083 	bne.w	8000b0a <__udivmoddi4+0x116>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d947      	bls.n	8000a9a <__udivmoddi4+0xa6>
 8000a0a:	fab2 f282 	clz	r2, r2
 8000a0e:	b142      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	f1c2 0020 	rsb	r0, r2, #32
 8000a14:	fa24 f000 	lsr.w	r0, r4, r0
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	4097      	lsls	r7, r2
 8000a1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbbc f6f8 	udiv	r6, ip, r8
 8000a2c:	fa1f fe87 	uxth.w	lr, r7
 8000a30:	fb08 c116 	mls	r1, r8, r6, ip
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f10e 	mul.w	r1, r6, lr
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a46:	f080 8119 	bcs.w	8000c7c <__udivmoddi4+0x288>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8116 	bls.w	8000c7c <__udivmoddi4+0x288>
 8000a50:	3e02      	subs	r6, #2
 8000a52:	443b      	add	r3, r7
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a72:	f080 8105 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	f240 8102 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	443c      	add	r4, r7
 8000a80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a84:	eba4 040e 	sub.w	r4, r4, lr
 8000a88:	2600      	movs	r6, #0
 8000a8a:	b11d      	cbz	r5, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c5 4300 	strd	r4, r3, [r5]
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	b902      	cbnz	r2, 8000a9e <__udivmoddi4+0xaa>
 8000a9c:	deff      	udf	#255	; 0xff
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d150      	bne.n	8000b48 <__udivmoddi4+0x154>
 8000aa6:	1bcb      	subs	r3, r1, r7
 8000aa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aac:	fa1f f887 	uxth.w	r8, r7
 8000ab0:	2601      	movs	r6, #1
 8000ab2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ab6:	0c21      	lsrs	r1, r4, #16
 8000ab8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000abc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000ac8:	1879      	adds	r1, r7, r1
 8000aca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0xe2>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	f200 80e9 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000ad6:	4684      	mov	ip, r0
 8000ad8:	1ac9      	subs	r1, r1, r3
 8000ada:	b2a3      	uxth	r3, r4
 8000adc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ae4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ae8:	fb08 f800 	mul.w	r8, r8, r0
 8000aec:	45a0      	cmp	r8, r4
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x10c>
 8000af0:	193c      	adds	r4, r7, r4
 8000af2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x10a>
 8000af8:	45a0      	cmp	r8, r4
 8000afa:	f200 80d9 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000afe:	4618      	mov	r0, r3
 8000b00:	eba4 0408 	sub.w	r4, r4, r8
 8000b04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b08:	e7bf      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d909      	bls.n	8000b22 <__udivmoddi4+0x12e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	f000 80b1 	beq.w	8000c76 <__udivmoddi4+0x282>
 8000b14:	2600      	movs	r6, #0
 8000b16:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	4631      	mov	r1, r6
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	fab3 f683 	clz	r6, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d14a      	bne.n	8000bc0 <__udivmoddi4+0x1cc>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0x140>
 8000b2e:	4282      	cmp	r2, r0
 8000b30:	f200 80b8 	bhi.w	8000ca4 <__udivmoddi4+0x2b0>
 8000b34:	1a84      	subs	r4, r0, r2
 8000b36:	eb61 0103 	sbc.w	r1, r1, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d0a8      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000b42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b46:	e7a5      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000b48:	f1c2 0320 	rsb	r3, r2, #32
 8000b4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b50:	4097      	lsls	r7, r2
 8000b52:	fa01 f002 	lsl.w	r0, r1, r2
 8000b56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b5a:	40d9      	lsrs	r1, r3
 8000b5c:	4330      	orrs	r0, r6
 8000b5e:	0c03      	lsrs	r3, r0, #16
 8000b60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f108 	mul.w	r1, r6, r8
 8000b74:	4299      	cmp	r1, r3
 8000b76:	fa04 f402 	lsl.w	r4, r4, r2
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x19c>
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b82:	f080 808d 	bcs.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 808a 	bls.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	443b      	add	r3, r7
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b281      	uxth	r1, r0
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba0:	fb00 f308 	mul.w	r3, r0, r8
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x1c4>
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bae:	d273      	bcs.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d971      	bls.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	4439      	add	r1, r7
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bbe:	e778      	b.n	8000ab2 <__udivmoddi4+0xbe>
 8000bc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bcc:	431c      	orrs	r4, r3
 8000bce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bde:	431f      	orrs	r7, r3
 8000be0:	0c3b      	lsrs	r3, r7, #16
 8000be2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000be6:	fa1f f884 	uxth.w	r8, r4
 8000bea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bf2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bf6:	458a      	cmp	sl, r1
 8000bf8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bfc:	fa00 f306 	lsl.w	r3, r0, r6
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x220>
 8000c02:	1861      	adds	r1, r4, r1
 8000c04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c08:	d248      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0a:	458a      	cmp	sl, r1
 8000c0c:	d946      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c12:	4421      	add	r1, r4
 8000c14:	eba1 010a 	sub.w	r1, r1, sl
 8000c18:	b2bf      	uxth	r7, r7
 8000c1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c26:	fb00 f808 	mul.w	r8, r0, r8
 8000c2a:	45b8      	cmp	r8, r7
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x24a>
 8000c2e:	19e7      	adds	r7, r4, r7
 8000c30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c34:	d22e      	bcs.n	8000c94 <__udivmoddi4+0x2a0>
 8000c36:	45b8      	cmp	r8, r7
 8000c38:	d92c      	bls.n	8000c94 <__udivmoddi4+0x2a0>
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	4427      	add	r7, r4
 8000c3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c42:	eba7 0708 	sub.w	r7, r7, r8
 8000c46:	fba0 8902 	umull	r8, r9, r0, r2
 8000c4a:	454f      	cmp	r7, r9
 8000c4c:	46c6      	mov	lr, r8
 8000c4e:	4649      	mov	r1, r9
 8000c50:	d31a      	bcc.n	8000c88 <__udivmoddi4+0x294>
 8000c52:	d017      	beq.n	8000c84 <__udivmoddi4+0x290>
 8000c54:	b15d      	cbz	r5, 8000c6e <__udivmoddi4+0x27a>
 8000c56:	ebb3 020e 	subs.w	r2, r3, lr
 8000c5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c62:	40f2      	lsrs	r2, r6
 8000c64:	ea4c 0202 	orr.w	r2, ip, r2
 8000c68:	40f7      	lsrs	r7, r6
 8000c6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e70b      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e9      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6fd      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c84:	4543      	cmp	r3, r8
 8000c86:	d2e5      	bcs.n	8000c54 <__udivmoddi4+0x260>
 8000c88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7df      	b.n	8000c54 <__udivmoddi4+0x260>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7d2      	b.n	8000c3e <__udivmoddi4+0x24a>
 8000c98:	4660      	mov	r0, ip
 8000c9a:	e78d      	b.n	8000bb8 <__udivmoddi4+0x1c4>
 8000c9c:	4681      	mov	r9, r0
 8000c9e:	e7b9      	b.n	8000c14 <__udivmoddi4+0x220>
 8000ca0:	4666      	mov	r6, ip
 8000ca2:	e775      	b.n	8000b90 <__udivmoddi4+0x19c>
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	e74a      	b.n	8000b3e <__udivmoddi4+0x14a>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	4439      	add	r1, r7
 8000cae:	e713      	b.n	8000ad8 <__udivmoddi4+0xe4>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	e724      	b.n	8000b00 <__udivmoddi4+0x10c>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	332c      	adds	r3, #44	; 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d1c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d20:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	fa92 f2a2 	rbit	r2, r2
 8000d28:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	40d3      	lsrs	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	f003 031f 	and.w	r3, r3, #31
 8000d44:	211f      	movs	r1, #31
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f003 011f 	and.w	r1, r3, #31
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d64:	bf00      	nop
 8000d66:	3724      	adds	r7, #36	; 0x24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b08d      	sub	sp, #52	; 0x34
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	330c      	adds	r3, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000db2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	fa92 f2a2 	rbit	r2, r2
 8000dba:	617a      	str	r2, [r7, #20]
  return result;
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	fab2 f282 	clz	r2, r2
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	40d3      	lsrs	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000dd6:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000dda:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ddc:	6a39      	ldr	r1, [r7, #32]
 8000dde:	fa91 f1a1 	rbit	r1, r1
 8000de2:	61f9      	str	r1, [r7, #28]
  return result;
 8000de4:	69f9      	ldr	r1, [r7, #28]
 8000de6:	fab1 f181 	clz	r1, r1
 8000dea:	b2c9      	uxtb	r1, r1
 8000dec:	40cb      	lsrs	r3, r1
 8000dee:	2107      	movs	r1, #7
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000dfe:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000e02:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e06:	fa91 f1a1 	rbit	r1, r1
 8000e0a:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e0e:	fab1 f181 	clz	r1, r1
 8000e12:	b2c9      	uxtb	r1, r1
 8000e14:	40cb      	lsrs	r3, r1
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e20:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000e22:	bf00      	nop
 8000e24:	3734      	adds	r7, #52	; 0x34
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <LL_RCC_HSI_Enable+0x1c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <LL_RCC_HSI_Enable+0x1c>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <LL_RCC_HSI_IsReady+0x20>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	bf0c      	ite	eq
 8000e60:	2301      	moveq	r3, #1
 8000e62:	2300      	movne	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40023800 	.word	0x40023800

08000e74 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4904      	ldr	r1, [pc, #16]	; (8000e9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <LL_RCC_SetSysClkSource+0x24>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f023 0203 	bic.w	r2, r3, #3
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <LL_RCC_SetSysClkSource+0x24>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	608b      	str	r3, [r1, #8]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <LL_RCC_GetSysClkSource+0x18>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <LL_RCC_SetAHBPrescaler+0x24>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	608b      	str	r3, [r1, #8]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40023800 	.word	0x40023800

08000f0c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f1c:	4904      	ldr	r1, [pc, #16]	; (8000f30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	608b      	str	r3, [r1, #8]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40023800 	.word	0x40023800

08000f34 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f44:	4904      	ldr	r1, [pc, #16]	; (8000f58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	608b      	str	r3, [r1, #8]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40023800 	.word	0x40023800

08000f5c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <LL_RCC_SetTIMPrescaler+0x28>)
 8000f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f6e:	4905      	ldr	r1, [pc, #20]	; (8000f84 <LL_RCC_SetTIMPrescaler+0x28>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40023800 	.word	0x40023800

08000f88 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <LL_RCC_PLL_Enable+0x1c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <LL_RCC_PLL_Enable+0x1c>)
 8000f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <LL_RCC_PLL_IsReady+0x24>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fb8:	bf0c      	ite	eq
 8000fba:	2301      	moveq	r3, #1
 8000fbc:	2300      	movne	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	4311      	orrs	r1, r2
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	0192      	lsls	r2, r2, #6
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001000:	4904      	ldr	r1, [pc, #16]	; (8001014 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40023800 	.word	0x40023800
 8001018:	ffbf8000 	.word	0xffbf8000

0800101c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4313      	orrs	r3, r2
 800102e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40023800 	.word	0x40023800

0800104c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <LL_APB1_GRP1_EnableClock+0x2c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4313      	orrs	r3, r2
 800105e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4013      	ands	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40023800 	.word	0x40023800

0800107c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4013      	ands	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40023800 	.word	0x40023800

080010ac <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <LL_SYSCFG_SetEXTISource+0x58>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	0c1b      	lsrs	r3, r3, #16
 80010c6:	43db      	mvns	r3, r3
 80010c8:	ea02 0103 	and.w	r1, r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	60bb      	str	r3, [r7, #8]
  return result;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	fa03 f202 	lsl.w	r2, r3, r2
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <LL_SYSCFG_SetEXTISource+0x58>)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	430a      	orrs	r2, r1
 80010f2:	3302      	adds	r3, #2
 80010f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40013800 	.word	0x40013800

08001108 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <LL_FLASH_SetLatency+0x24>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 0207 	bic.w	r2, r3, #7
 8001118:	4904      	ldr	r1, [pc, #16]	; (800112c <LL_FLASH_SetLatency+0x24>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40023c00 	.word	0x40023c00

08001130 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <LL_FLASH_GetLatency+0x18>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0307 	and.w	r3, r3, #7
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023c00 	.word	0x40023c00

0800114c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800115c:	4904      	ldr	r1, [pc, #16]	; (8001170 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40007000 	.word	0x40007000

08001174 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d01c      	beq.n	80011de <LL_TIM_OC_DisableFast+0x4a>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d017      	beq.n	80011da <LL_TIM_OC_DisableFast+0x46>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b10      	cmp	r3, #16
 80011ae:	d012      	beq.n	80011d6 <LL_TIM_OC_DisableFast+0x42>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b40      	cmp	r3, #64	; 0x40
 80011b4:	d00d      	beq.n	80011d2 <LL_TIM_OC_DisableFast+0x3e>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011bc:	d007      	beq.n	80011ce <LL_TIM_OC_DisableFast+0x3a>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c4:	d101      	bne.n	80011ca <LL_TIM_OC_DisableFast+0x36>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e00a      	b.n	80011e0 <LL_TIM_OC_DisableFast+0x4c>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e008      	b.n	80011e0 <LL_TIM_OC_DisableFast+0x4c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <LL_TIM_OC_DisableFast+0x4c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <LL_TIM_OC_DisableFast+0x4c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <LL_TIM_OC_DisableFast+0x4c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_TIM_OC_DisableFast+0x4c>
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3318      	adds	r3, #24
 80011e6:	4619      	mov	r1, r3
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LL_TIM_OC_DisableFast+0x84>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	440b      	add	r3, r1
 80011f0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4908      	ldr	r1, [pc, #32]	; (800121c <LL_TIM_OC_DisableFast+0x88>)
 80011fa:	5ccb      	ldrb	r3, [r1, r3]
 80011fc:	4619      	mov	r1, r3
 80011fe:	2304      	movs	r3, #4
 8001200:	408b      	lsls	r3, r1
 8001202:	43db      	mvns	r3, r3
 8001204:	401a      	ands	r2, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	601a      	str	r2, [r3, #0]

}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	08002d3c 	.word	0x08002d3c
 800121c:	08002d44 	.word	0x08002d44

08001220 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001232:	f023 0307 	bic.w	r3, r3, #7
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	60da      	str	r2, [r3, #12]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	613b      	str	r3, [r7, #16]
  return result;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2103      	movs	r1, #3
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	61bb      	str	r3, [r7, #24]
  return result;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800133a:	b480      	push	{r7}
 800133c:	b089      	sub	sp, #36	; 0x24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa93 f3a3 	rbit	r3, r3
 8001354:	613b      	str	r3, [r7, #16]
  return result;
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2103      	movs	r1, #3
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	401a      	ands	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	61bb      	str	r3, [r7, #24]
  return result;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80013be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013c2:	f7ff fe5b 	bl	800107c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80013c6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80013ca:	f7ff fe3f 	bl	800104c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ce:	2007      	movs	r0, #7
 80013d0:	f7ff fc74 	bl	8000cbc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f882 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f000 f9fe 	bl	80017d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013dc:	f000 f9ac 	bl	8001738 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013e0:	f000 f934 	bl	800164c <MX_TIM3_Init>
  MX_ADC1_Init();
 80013e4:	f000 f8c4 	bl	8001570 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LL_ADC_WriteReg(ADC1, CR2, LL_ADC_ReadReg(ADC1, CR2) | ((1 << 30) + (1))); // set ADON and SWSTART to 1 in order to enable ADC
 80013e8:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <main+0x110>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a36      	ldr	r2, [pc, #216]	; (80014c8 <main+0x110>)
 80013ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6093      	str	r3, [r2, #8]
  LL_ADC_WriteReg(ADC1, CR2, LL_ADC_ReadReg(ADC1, CR2) | ((1 << 30) + (1))); // don't know why, I need to set it TWO times in order to make it work... boh...
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <main+0x110>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a32      	ldr	r2, [pc, #200]	; (80014c8 <main+0x110>)
 80013fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6093      	str	r3, [r2, #8]

  LL_TIM_WriteReg(TIM3, CCR1, 0x20D0);  // set initial threshold
 8001408:	4b30      	ldr	r3, [pc, #192]	; (80014cc <main+0x114>)
 800140a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
  LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2);   // delete OC flag channel 1
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <main+0x114>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <main+0x114>)
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	6113      	str	r3, [r2, #16]
  LL_TIM_WriteReg(TIM3, CR1, LL_TIM_ReadReg(TIM3, CR1) | 0x1);  // counter enable channel 1
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <main+0x114>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <main+0x114>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){ // if timer reaches threshold
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <main+0x114>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f9      	beq.n	8001428 <main+0x70>
		LL_TIM_WriteReg(TIM3, SR, LL_TIM_ReadReg(TIM3, SR) & ~0x2); // turn off flag channel 1
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <main+0x114>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a24      	ldr	r2, [pc, #144]	; (80014cc <main+0x114>)
 800143a:	f023 0302 	bic.w	r3, r3, #2
 800143e:	6113      	str	r3, [r2, #16]
		if(LL_ADC_ReadReg(ADC1, SR) & (1 << 1)){ // read EOC bit: if ADC finishes conversion
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <main+0x110>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ed      	beq.n	8001428 <main+0x70>
			LL_ADC_WriteReg(ADC1, SR, LL_ADC_ReadReg(ADC1, SR) & ~(1 << 1)); // reset EOC bit
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <main+0x110>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <main+0x110>)
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	6013      	str	r3, [r2, #0]
			int pot = LL_ADC_ReadReg(ADC1, DR); // read pot current value
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <main+0x110>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	60fb      	str	r3, [r7, #12]
			float f = fmin + (pot/((float)potmax))*(fmax-fmin);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001468:	eddf 6a19 	vldr	s13, [pc, #100]	; 80014d0 <main+0x118>
 800146c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001470:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80014d4 <main+0x11c>
 8001474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001478:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80014d8 <main+0x120>
 800147c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001480:	edc7 7a02 	vstr	s15, [r7, #8]
			int val = fclk / (2*f);
 8001484:	edd7 7a02 	vldr	s15, [r7, #8]
 8001488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800148c:	ee17 0a90 	vmov	r0, s15
 8001490:	f7ff f806 	bl	80004a0 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	a109      	add	r1, pc, #36	; (adr r1, 80014c0 <main+0x108>)
 800149a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800149e:	f7ff f981 	bl	80007a4 <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fa63 	bl	8000974 <__aeabi_d2iz>
 80014ae:	4603      	mov	r3, r0
 80014b0:	607b      	str	r3, [r7, #4]
			// for 200K pot:
			//	min: 0
			//	max: 65
			LL_TIM_WriteReg(TIM3, CCR1, LL_TIM_ReadReg(TIM3, CCR1) + val); // set next threshold
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <main+0x114>)
 80014b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4904      	ldr	r1, [pc, #16]	; (80014cc <main+0x114>)
 80014ba:	4413      	add	r3, r2
 80014bc:	634b      	str	r3, [r1, #52]	; 0x34
	  if (LL_TIM_ReadReg(TIM3, SR) & 0x2){ // if timer reaches threshold
 80014be:	e7b3      	b.n	8001428 <main+0x70>
 80014c0:	00000000 	.word	0x00000000
 80014c4:	419406f4 	.word	0x419406f4
 80014c8:	40012000 	.word	0x40012000
 80014cc:	40000400 	.word	0x40000400
 80014d0:	42820000 	.word	0x42820000
 80014d4:	45674000 	.word	0x45674000
 80014d8:	44480000 	.word	0x44480000

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f7ff fe11 	bl	8001108 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80014e6:	bf00      	nop
 80014e8:	f7ff fe22 	bl	8001130 <LL_FLASH_GetLatency>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d1fa      	bne.n	80014e8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 80014f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014f6:	f7ff fe29 	bl	800114c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80014fa:	2010      	movs	r0, #16
 80014fc:	f7ff fcba 	bl	8000e74 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001500:	f7ff fc96 	bl	8000e30 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001504:	bf00      	nop
 8001506:	f7ff fca3 	bl	8000e50 <LL_RCC_HSI_IsReady>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d1fa      	bne.n	8001506 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001518:	2110      	movs	r1, #16
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fd58 	bl	8000fd0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001520:	f7ff fd32 	bl	8000f88 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001524:	bf00      	nop
 8001526:	f7ff fd3f 	bl	8000fa8 <LL_RCC_PLL_IsReady>
 800152a:	4603      	mov	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1fa      	bne.n	8001526 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fcd7 	bl	8000ee4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001536:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800153a:	f7ff fce7 	bl	8000f0c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff fcf8 	bl	8000f34 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001544:	2002      	movs	r0, #2
 8001546:	f7ff fcab 	bl	8000ea0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800154a:	bf00      	nop
 800154c:	f7ff fcbc 	bl	8000ec8 <LL_RCC_GetSysClkSource>
 8001550:	4603      	mov	r3, r0
 8001552:	2b08      	cmp	r3, #8
 8001554:	d1fa      	bne.n	800154c <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <SystemClock_Config+0x90>)
 8001558:	f001 fb9a 	bl	8002c90 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <SystemClock_Config+0x90>)
 800155e:	f001 fba5 	bl	8002cac <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fcfa 	bl	8000f5c <LL_RCC_SetTIMPrescaler>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	0501bd00 	.word	0x0501bd00

08001570 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b090      	sub	sp, #64	; 0x40
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001576:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80015a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015aa:	f7ff fd67 	bl	800107c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fd34 	bl	800101c <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80015b4:	2301      	movs	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <MX_ADC1_Init+0xd0>)
 80015c6:	f000 fcb3 	bl	8001f30 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 80015ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80015d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015dc:	4619      	mov	r1, r3
 80015de:	4819      	ldr	r0, [pc, #100]	; (8001644 <MX_ADC1_Init+0xd4>)
 80015e0:	f000 fa1a 	bl	8001a18 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	4619      	mov	r1, r3
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_ADC1_Init+0xd4>)
 8001600:	f000 fa36 	bl	8001a70 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8001604:	2100      	movs	r1, #0
 8001606:	480f      	ldr	r0, [pc, #60]	; (8001644 <MX_ADC1_Init+0xd4>)
 8001608:	f7ff fbb2 	bl	8000d70 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800160c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001610:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <MX_ADC1_Init+0xd8>)
 800161a:	f000 f9df 	bl	80019dc <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 800161e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_ADC1_Init+0xd4>)
 8001628:	f7ff fb6c 	bl	8000d04 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 800162c:	2200      	movs	r2, #0
 800162e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001632:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_ADC1_Init+0xd4>)
 8001634:	f7ff fbaf 	bl	8000d96 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3740      	adds	r7, #64	; 0x40
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020000 	.word	0x40020000
 8001644:	40012000 	.word	0x40012000
 8001648:	40012300 	.word	0x40012300

0800164c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001652:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	2220      	movs	r2, #32
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fb52 	bl	8002d14 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff fce3 	bl	800104c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800168a:	2300      	movs	r3, #0
 800168c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 800168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001698:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800169c:	4619      	mov	r1, r3
 800169e:	4824      	ldr	r0, [pc, #144]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016a0:	f000 fe66 	bl	8002370 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80016a4:	4822      	ldr	r0, [pc, #136]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016a6:	f7ff fd65 	bl	8001174 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80016aa:	2100      	movs	r1, #0
 80016ac:	4820      	ldr	r0, [pc, #128]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016ae:	f7ff fdb7 	bl	8001220 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 80016b2:	2330      	movs	r3, #48	; 0x30
 80016b4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	461a      	mov	r2, r3
 80016cc:	2101      	movs	r1, #1
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016d0:	f000 fec8 	bl	8002464 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80016d4:	2101      	movs	r1, #1
 80016d6:	4816      	ldr	r0, [pc, #88]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016d8:	f7ff fd5c 	bl	8001194 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	461a      	mov	r2, r3
 80016e2:	2110      	movs	r1, #16
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016e6:	f000 febd 	bl	8002464 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 80016ea:	2110      	movs	r1, #16
 80016ec:	4810      	ldr	r0, [pc, #64]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016ee:	f7ff fd51 	bl	8001194 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80016f2:	2100      	movs	r1, #0
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016f6:	f7ff fda8 	bl	800124a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM3_Init+0xe4>)
 80016fc:	f7ff fdb8 	bl	8001270 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001700:	2004      	movs	r0, #4
 8001702:	f7ff fc8b 	bl	800101c <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001706:	23c0      	movs	r3, #192	; 0xc0
 8001708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800170a:	2302      	movs	r3, #2
 800170c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_TIM3_Init+0xe8>)
 8001724:	f000 fc04 	bl	8001f30 <LL_GPIO_Init>

}
 8001728:	bf00      	nop
 800172a:	3750      	adds	r7, #80	; 0x50
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40000400 	.word	0x40000400
 8001734:	40020800 	.word	0x40020800

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001762:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001766:	f7ff fc71 	bl	800104c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fc56 	bl	800101c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001770:	230c      	movs	r3, #12
 8001772:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001774:	2302      	movs	r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001784:	2307      	movs	r3, #7
 8001786:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4619      	mov	r1, r3
 800178c:	4810      	ldr	r0, [pc, #64]	; (80017d0 <MX_USART2_UART_Init+0x98>)
 800178e:	f000 fbcf 	bl	8001f30 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001792:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001796:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80017a4:	230c      	movs	r3, #12
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <MX_USART2_UART_Init+0x9c>)
 80017b8:	f001 f9ec 	bl	8002b94 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART2_UART_Init+0x9c>)
 80017be:	f7ff fd77 	bl	80012b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_USART2_UART_Init+0x9c>)
 80017c4:	f7ff fd64 	bl	8001290 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3738      	adds	r7, #56	; 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40004400 	.word	0x40004400

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
 80017f6:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80017f8:	2004      	movs	r0, #4
 80017fa:	f7ff fc0f 	bl	800101c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80017fe:	2080      	movs	r0, #128	; 0x80
 8001800:	f7ff fc0c 	bl	800101c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff fc09 	bl	800101c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800180a:	2002      	movs	r0, #2
 800180c:	f7ff fc06 	bl	800101c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001810:	2120      	movs	r1, #32
 8001812:	481f      	ldr	r0, [pc, #124]	; (8001890 <MX_GPIO_Init+0xb8>)
 8001814:	f7ff fdc0 	bl	8001398 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001818:	491e      	ldr	r1, [pc, #120]	; (8001894 <MX_GPIO_Init+0xbc>)
 800181a:	2002      	movs	r0, #2
 800181c:	f7ff fc46 	bl	80010ac <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001824:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001826:	2301      	movs	r3, #1
 8001828:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800182a:	2300      	movs	r3, #0
 800182c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800182e:	2302      	movs	r3, #2
 8001830:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f9f4 	bl	8001c24 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001842:	4815      	ldr	r0, [pc, #84]	; (8001898 <MX_GPIO_Init+0xc0>)
 8001844:	f7ff fd79 	bl	800133a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <MX_GPIO_Init+0xc0>)
 8001850:	f7ff fd44 	bl	80012dc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001854:	2302      	movs	r3, #2
 8001856:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	463b      	mov	r3, r7
 8001862:	4619      	mov	r1, r3
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <MX_GPIO_Init+0xb8>)
 8001866:	f000 fb63 	bl	8001f30 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800186a:	2320      	movs	r3, #32
 800186c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800186e:	2301      	movs	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800187e:	463b      	mov	r3, r7
 8001880:	4619      	mov	r1, r3
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <MX_GPIO_Init+0xb8>)
 8001884:	f000 fb54 	bl	8001f30 <LL_GPIO_Init>

}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40020000 	.word	0x40020000
 8001894:	00f00003 	.word	0x00f00003
 8001898:	40020800 	.word	0x40020800

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001934:	4c0b      	ldr	r4, [pc, #44]	; (8001964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001942:	f7ff ffd7 	bl	80018f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f001 f9c1 	bl	8002ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fd35 	bl	80013b8 <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001950:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800195c:	08002d74 	.word	0x08002d74
  ldr r2, =_sbss
 8001960:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001964:	20000020 	.word	0x20000020

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>

0800196a <LL_ADC_SetCommonClock>:
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	605a      	str	r2, [r3, #4]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_REG_SetSequencerLength>:
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	bf0c      	ite	eq
 80019ca:	2301      	moveq	r3, #1
 80019cc:	2300      	movne	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <LL_ADC_CommonInit+0x38>)
 80019ec:	f7ff ffe3 	bl	80019b6 <LL_ADC_IsEnabled>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffb4 	bl	800196a <LL_ADC_SetCommonClock>
 8001a02:	e001      	b.n	8001a08 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40012000 	.word	0x40012000

08001a18 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffc5 	bl	80019b6 <LL_ADC_IsEnabled>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d117      	bne.n	8001a62 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6811      	ldr	r1, [r2, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	6892      	ldr	r2, [r2, #8]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	e001      	b.n	8001a66 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff99 	bl	80019b6 <LL_ADC_IsEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d12b      	bne.n	8001ae2 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e005      	b.n	8001ab2 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <LL_ADC_REG_Init+0x80>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	68d2      	ldr	r2, [r2, #12]
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	6912      	ldr	r2, [r2, #16]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff58 	bl	8001990 <LL_ADC_REG_SetSequencerLength>
 8001ae0:	e001      	b.n	8001ae6 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	c0fffcfd 	.word	0xc0fffcfd

08001af4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <LL_EXTI_EnableIT_0_31+0x20>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4904      	ldr	r1, [pc, #16]	; (8001b14 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40013c00 	.word	0x40013c00

08001b18 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <LL_EXTI_DisableIT_0_31+0x24>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4904      	ldr	r1, [pc, #16]	; (8001b3c <LL_EXTI_DisableIT_0_31+0x24>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4904      	ldr	r1, [pc, #16]	; (8001b60 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]

}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40013c00 	.word	0x40013c00

08001b64 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4904      	ldr	r1, [pc, #16]	; (8001b88 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40013c00 	.word	0x40013c00

08001b8c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4904      	ldr	r1, [pc, #16]	; (8001bac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]

}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4904      	ldr	r1, [pc, #16]	; (8001bf8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4904      	ldr	r1, [pc, #16]	; (8001c20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60cb      	str	r3, [r1, #12]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40013c00 	.word	0x40013c00

08001c24 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d065      	beq.n	8001d04 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d06c      	beq.n	8001d1a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	795b      	ldrb	r3, [r3, #5]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d01c      	beq.n	8001c82 <LL_EXTI_Init+0x5e>
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	dc25      	bgt.n	8001c98 <LL_EXTI_Init+0x74>
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <LL_EXTI_Init+0x32>
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d00b      	beq.n	8001c6c <LL_EXTI_Init+0x48>
 8001c54:	e020      	b.n	8001c98 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff82 	bl	8001b64 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff45 	bl	8001af4 <LL_EXTI_EnableIT_0_31>
          break;
 8001c6a:	e018      	b.n	8001c9e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff51 	bl	8001b18 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff60 	bl	8001b40 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c80:	e00d      	b.n	8001c9e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff34 	bl	8001af4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff55 	bl	8001b40 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c96:	e002      	b.n	8001c9e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
          break;
 8001c9c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	799b      	ldrb	r3, [r3, #6]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d039      	beq.n	8001d1a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	799b      	ldrb	r3, [r3, #6]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d01c      	beq.n	8001ce8 <LL_EXTI_Init+0xc4>
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	dc25      	bgt.n	8001cfe <LL_EXTI_Init+0xda>
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d002      	beq.n	8001cbc <LL_EXTI_Init+0x98>
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d00b      	beq.n	8001cd2 <LL_EXTI_Init+0xae>
 8001cba:	e020      	b.n	8001cfe <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff9b 	bl	8001bfc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff5e 	bl	8001b8c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001cd0:	e024      	b.n	8001d1c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff6a 	bl	8001bb0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff79 	bl	8001bd8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001ce6:	e019      	b.n	8001d1c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff4d 	bl	8001b8c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff6e 	bl	8001bd8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001cfc:	e00e      	b.n	8001d1c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
            break;
 8001d02:	e00b      	b.n	8001d1c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff05 	bl	8001b18 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff26 	bl	8001b64 <LL_EXTI_DisableEvent_0_31>
 8001d18:	e000      	b.n	8001d1c <LL_EXTI_Init+0xf8>
      }
 8001d1a:	bf00      	nop
  }
  return status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <LL_GPIO_SetPinMode>:
{
 8001d26:	b480      	push	{r7}
 8001d28:	b089      	sub	sp, #36	; 0x24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	613b      	str	r3, [r7, #16]
  return result;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	61bb      	str	r3, [r7, #24]
  return result;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	601a      	str	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	3724      	adds	r7, #36	; 0x24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_GPIO_SetPinOutputType>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	401a      	ands	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	431a      	orrs	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_GPIO_SetPinSpeed>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	613b      	str	r3, [r7, #16]
  return result;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2103      	movs	r1, #3
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	61bb      	str	r3, [r7, #24]
  return result;
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	609a      	str	r2, [r3, #8]
}
 8001e06:	bf00      	nop
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_GPIO_SetPinPull>:
{
 8001e12:	b480      	push	{r7}
 8001e14:	b089      	sub	sp, #36	; 0x24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	613b      	str	r3, [r7, #16]
  return result;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2103      	movs	r1, #3
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	61bb      	str	r3, [r7, #24]
  return result;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	60da      	str	r2, [r3, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3724      	adds	r7, #36	; 0x24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_GPIO_SetAFPin_0_7>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	613b      	str	r3, [r7, #16]
  return result;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	210f      	movs	r1, #15
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	61bb      	str	r3, [r7, #24]
  return result;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	621a      	str	r2, [r3, #32]
}
 8001ec2:	bf00      	nop
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_GPIO_SetAFPin_8_15>:
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b089      	sub	sp, #36	; 0x24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	613b      	str	r3, [r7, #16]
  return result;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	61bb      	str	r3, [r7, #24]
  return result;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f24:	bf00      	nop
 8001f26:	3724      	adds	r7, #36	; 0x24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	613b      	str	r3, [r7, #16]
  return result;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f5a:	e050      	b.n	8001ffe <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d042      	beq.n	8001ff8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d003      	beq.n	8001f82 <LL_GPIO_Init+0x52>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d10d      	bne.n	8001f9e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	461a      	mov	r2, r3
 8001f88:	69b9      	ldr	r1, [r7, #24]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff12 	bl	8001db4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	461a      	mov	r2, r3
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fef3 	bl	8001d84 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	69b9      	ldr	r1, [r7, #24]
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff33 	bl	8001e12 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d11a      	bne.n	8001fea <LL_GPIO_Init+0xba>
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	60bb      	str	r3, [r7, #8]
  return result;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d807      	bhi.n	8001fdc <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff4b 	bl	8001e70 <LL_GPIO_SetAFPin_0_7>
 8001fda:	e006      	b.n	8001fea <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff72 	bl	8001ece <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	69b9      	ldr	r1, [r7, #24]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fe97 	bl	8001d26 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1a7      	bne.n	8001f5c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <LL_RCC_GetSysClkSource>:
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <LL_RCC_GetSysClkSource+0x18>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030c 	and.w	r3, r3, #12
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <LL_RCC_GetAHBPrescaler>:
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <LL_RCC_GetAHBPrescaler+0x18>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <LL_RCC_GetAPB1Prescaler>:
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <LL_RCC_GetAPB2Prescaler>:
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800

08002088 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <LL_RCC_PLL_GetMainSource+0x18>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <LL_RCC_PLL_GetN+0x18>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40023800 	.word	0x40023800

080020c0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <LL_RCC_PLL_GetP+0x18>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <LL_RCC_PLL_GetDivider+0x18>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002100:	f000 f820 	bl	8002144 <RCC_GetSystemClockFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f840 	bl	8002194 <RCC_GetHCLKClockFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f84e 	bl	80021c0 <RCC_GetPCLK1ClockFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f85a 	bl	80021e8 <RCC_GetPCLK2ClockFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60da      	str	r2, [r3, #12]
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800214e:	f7ff ff63 	bl	8002018 <LL_RCC_GetSysClkSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b08      	cmp	r3, #8
 8002156:	d00c      	beq.n	8002172 <RCC_GetSystemClockFreq+0x2e>
 8002158:	2b08      	cmp	r3, #8
 800215a:	d80f      	bhi.n	800217c <RCC_GetSystemClockFreq+0x38>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <RCC_GetSystemClockFreq+0x22>
 8002160:	2b04      	cmp	r3, #4
 8002162:	d003      	beq.n	800216c <RCC_GetSystemClockFreq+0x28>
 8002164:	e00a      	b.n	800217c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <RCC_GetSystemClockFreq+0x48>)
 8002168:	607b      	str	r3, [r7, #4]
      break;
 800216a:	e00a      	b.n	8002182 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <RCC_GetSystemClockFreq+0x4c>)
 800216e:	607b      	str	r3, [r7, #4]
      break;
 8002170:	e007      	b.n	8002182 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002172:	2008      	movs	r0, #8
 8002174:	f000 f84c 	bl	8002210 <RCC_PLL_GetFreqDomain_SYS>
 8002178:	6078      	str	r0, [r7, #4]
      break;
 800217a:	e002      	b.n	8002182 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <RCC_GetSystemClockFreq+0x48>)
 800217e:	607b      	str	r3, [r7, #4]
      break;
 8002180:	bf00      	nop
  }

  return frequency;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200

08002194 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800219c:	f7ff ff4a 	bl	8002034 <LL_RCC_GetAHBPrescaler>
 80021a0:	4603      	mov	r3, r0
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <RCC_GetHCLKClockFreq+0x28>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	40d3      	lsrs	r3, r2
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	08002d4c 	.word	0x08002d4c

080021c0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80021c8:	f7ff ff42 	bl	8002050 <LL_RCC_GetAPB1Prescaler>
 80021cc:	4603      	mov	r3, r0
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <RCC_GetPCLK1ClockFreq+0x24>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	461a      	mov	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	40d3      	lsrs	r3, r2
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	08002d5c 	.word	0x08002d5c

080021e8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80021f0:	f7ff ff3c 	bl	800206c <LL_RCC_GetAPB2Prescaler>
 80021f4:	4603      	mov	r3, r0
 80021f6:	0b5b      	lsrs	r3, r3, #13
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <RCC_GetPCLK2ClockFreq+0x24>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	461a      	mov	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	40d3      	lsrs	r3, r2
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	08002d5c 	.word	0x08002d5c

08002210 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002224:	f7ff ff30 	bl	8002088 <LL_RCC_PLL_GetMainSource>
 8002228:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002236:	d003      	beq.n	8002240 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002238:	e005      	b.n	8002246 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800223c:	617b      	str	r3, [r7, #20]
      break;
 800223e:	e005      	b.n	800224c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002242:	617b      	str	r3, [r7, #20]
      break;
 8002244:	e002      	b.n	800224c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002248:	617b      	str	r3, [r7, #20]
      break;
 800224a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d113      	bne.n	800227a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002252:	f7ff ff43 	bl	80020dc <LL_RCC_PLL_GetDivider>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fbb3 f4f2 	udiv	r4, r3, r2
 800225e:	f7ff ff21 	bl	80020a4 <LL_RCC_PLL_GetN>
 8002262:	4603      	mov	r3, r0
 8002264:	fb03 f404 	mul.w	r4, r3, r4
 8002268:	f7ff ff2a 	bl	80020c0 <LL_RCC_PLL_GetP>
 800226c:	4603      	mov	r3, r0
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	3301      	adds	r3, #1
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fbb4 f3f3 	udiv	r3, r4, r3
 8002278:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800227a:	693b      	ldr	r3, [r7, #16]
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	00f42400 	.word	0x00f42400
 8002288:	007a1200 	.word	0x007a1200

0800228c <LL_TIM_SetPrescaler>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_TIM_SetAutoReload>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_TIM_SetRepetitionCounter>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_TIM_OC_SetCompareCH1>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_TIM_OC_SetCompareCH2>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_TIM_OC_SetCompareCH3>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_TIM_OC_SetCompareCH4>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	615a      	str	r2, [r3, #20]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a31      	ldr	r2, [pc, #196]	; (8002448 <LL_TIM_Init+0xd8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00f      	beq.n	80023a8 <LL_TIM_Init+0x38>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238e:	d00b      	beq.n	80023a8 <LL_TIM_Init+0x38>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a2e      	ldr	r2, [pc, #184]	; (800244c <LL_TIM_Init+0xdc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <LL_TIM_Init+0x38>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a2d      	ldr	r2, [pc, #180]	; (8002450 <LL_TIM_Init+0xe0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <LL_TIM_Init+0x38>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <LL_TIM_Init+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d106      	bne.n	80023b6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <LL_TIM_Init+0xd8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01b      	beq.n	80023f6 <LL_TIM_Init+0x86>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c4:	d017      	beq.n	80023f6 <LL_TIM_Init+0x86>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a20      	ldr	r2, [pc, #128]	; (800244c <LL_TIM_Init+0xdc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <LL_TIM_Init+0x86>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <LL_TIM_Init+0xe0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00f      	beq.n	80023f6 <LL_TIM_Init+0x86>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <LL_TIM_Init+0xe4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <LL_TIM_Init+0x86>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <LL_TIM_Init+0xe8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <LL_TIM_Init+0x86>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <LL_TIM_Init+0xec>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <LL_TIM_Init+0x86>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <LL_TIM_Init+0xf0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d106      	bne.n	8002404 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff49 	bl	80022a8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff35 	bl	800228c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <LL_TIM_Init+0xd8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d105      	bne.n	8002436 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	4619      	mov	r1, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff47 	bl	80022c4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff8a 	bl	8002350 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40010000 	.word	0x40010000
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800
 8002454:	40000c00 	.word	0x40000c00
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800

08002464 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247a:	d027      	beq.n	80024cc <LL_TIM_OC_Init+0x68>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d82a      	bhi.n	80024da <LL_TIM_OC_Init+0x76>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248a:	d018      	beq.n	80024be <LL_TIM_OC_Init+0x5a>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002492:	d822      	bhi.n	80024da <LL_TIM_OC_Init+0x76>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d003      	beq.n	80024a2 <LL_TIM_OC_Init+0x3e>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b10      	cmp	r3, #16
 800249e:	d007      	beq.n	80024b0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80024a0:	e01b      	b.n	80024da <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f81f 	bl	80024e8 <OC1Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	75fb      	strb	r3, [r7, #23]
      break;
 80024ae:	e015      	b.n	80024dc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f87e 	bl	80025b4 <OC2Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	75fb      	strb	r3, [r7, #23]
      break;
 80024bc:	e00e      	b.n	80024dc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f8e1 	bl	8002688 <OC3Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
      break;
 80024ca:	e007      	b.n	80024dc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f944 	bl	800275c <OC4Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	75fb      	strb	r3, [r7, #23]
      break;
 80024d8:	e000      	b.n	80024dc <LL_TIM_OC_Init+0x78>
      break;
 80024da:	bf00      	nop
  }

  return result;
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f023 0201 	bic.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f023 0202 	bic.w	r2, r3, #2
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0201 	bic.w	r2, r3, #1
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1a      	ldr	r2, [pc, #104]	; (80025b0 <OC1Config+0xc8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d11e      	bne.n	8002588 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f023 0208 	bic.w	r2, r3, #8
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f023 0204 	bic.w	r2, r3, #4
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff fea0 	bl	80022e0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40010000 	.word	0x40010000

080025b4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f023 0210 	bic.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0220 	bic.w	r2, r3, #32
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0210 	bic.w	r2, r3, #16
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <OC2Config+0xd0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d11f      	bne.n	800265c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	019b      	lsls	r3, r3, #6
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fe44 	bl	80022fc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010000 	.word	0x40010000

08002688 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0303 	bic.w	r3, r3, #3
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <OC3Config+0xd0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d11f      	bne.n	800272e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	029b      	lsls	r3, r3, #10
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	015b      	lsls	r3, r3, #5
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fde9 	bl	8002318 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000

0800275c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	031b      	lsls	r3, r3, #12
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <OC4Config+0xa0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d107      	bne.n	80027d4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	019b      	lsls	r3, r3, #6
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4619      	mov	r1, r3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fda4 	bl	8002334 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40010000 	.word	0x40010000

08002800 <LL_USART_IsEnabled>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_USART_SetStopBitsLength>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	611a      	str	r2, [r3, #16]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_USART_SetHWFlowCtrl>:
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	615a      	str	r2, [r3, #20]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_USART_SetBaudRate>:
{
 8002874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002878:	b09f      	sub	sp, #124	; 0x7c
 800287a:	af00      	add	r7, sp, #0
 800287c:	6778      	str	r0, [r7, #116]	; 0x74
 800287e:	6739      	str	r1, [r7, #112]	; 0x70
 8002880:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002882:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288a:	f040 80bc 	bne.w	8002a06 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800288e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002890:	461c      	mov	r4, r3
 8002892:	f04f 0500 	mov.w	r5, #0
 8002896:	4622      	mov	r2, r4
 8002898:	462b      	mov	r3, r5
 800289a:	eb12 0a02 	adds.w	sl, r2, r2
 800289e:	eb43 0b03 	adc.w	fp, r3, r3
 80028a2:	4652      	mov	r2, sl
 80028a4:	465b      	mov	r3, fp
 80028a6:	1912      	adds	r2, r2, r4
 80028a8:	eb45 0303 	adc.w	r3, r5, r3
 80028ac:	f04f 0000 	mov.w	r0, #0
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	00d9      	lsls	r1, r3, #3
 80028b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ba:	00d0      	lsls	r0, r2, #3
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	1911      	adds	r1, r2, r4
 80028c2:	6639      	str	r1, [r7, #96]	; 0x60
 80028c4:	416b      	adcs	r3, r5
 80028c6:	667b      	str	r3, [r7, #100]	; 0x64
 80028c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ca:	461a      	mov	r2, r3
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	6339      	str	r1, [r7, #48]	; 0x30
 80028d4:	415b      	adcs	r3, r3
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
 80028d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028e0:	f7fe f870 	bl	80009c4 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4ba9      	ldr	r3, [pc, #676]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	b29e      	uxth	r6, r3
 80028f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f8:	461c      	mov	r4, r3
 80028fa:	f04f 0500 	mov.w	r5, #0
 80028fe:	4622      	mov	r2, r4
 8002900:	462b      	mov	r3, r5
 8002902:	1891      	adds	r1, r2, r2
 8002904:	62b9      	str	r1, [r7, #40]	; 0x28
 8002906:	415b      	adcs	r3, r3
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800290e:	1912      	adds	r2, r2, r4
 8002910:	eb45 0303 	adc.w	r3, r5, r3
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	00d9      	lsls	r1, r3, #3
 800291e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002922:	00d0      	lsls	r0, r2, #3
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	1911      	adds	r1, r2, r4
 800292a:	65b9      	str	r1, [r7, #88]	; 0x58
 800292c:	416b      	adcs	r3, r5
 800292e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002932:	461a      	mov	r2, r3
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	1891      	adds	r1, r2, r2
 800293a:	6239      	str	r1, [r7, #32]
 800293c:	415b      	adcs	r3, r3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002944:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002948:	f7fe f83c 	bl	80009c4 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 8002952:	fba3 1302 	umull	r1, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2164      	movs	r1, #100	; 0x64
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a8a      	ldr	r2, [pc, #552]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	b29b      	uxth	r3, r3
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	b29b      	uxth	r3, r3
 8002972:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002976:	b29b      	uxth	r3, r3
 8002978:	4433      	add	r3, r6
 800297a:	b29e      	uxth	r6, r3
 800297c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297e:	4618      	mov	r0, r3
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	1894      	adds	r4, r2, r2
 800298a:	61bc      	str	r4, [r7, #24]
 800298c:	415b      	adcs	r3, r3
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002994:	1812      	adds	r2, r2, r0
 8002996:	eb41 0303 	adc.w	r3, r1, r3
 800299a:	f04f 0400 	mov.w	r4, #0
 800299e:	f04f 0500 	mov.w	r5, #0
 80029a2:	00dd      	lsls	r5, r3, #3
 80029a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029a8:	00d4      	lsls	r4, r2, #3
 80029aa:	4622      	mov	r2, r4
 80029ac:	462b      	mov	r3, r5
 80029ae:	1814      	adds	r4, r2, r0
 80029b0:	653c      	str	r4, [r7, #80]	; 0x50
 80029b2:	414b      	adcs	r3, r1
 80029b4:	657b      	str	r3, [r7, #84]	; 0x54
 80029b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b8:	461a      	mov	r2, r3
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	6139      	str	r1, [r7, #16]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029ce:	f7fd fff9 	bl	80009c4 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4b6e      	ldr	r3, [pc, #440]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 80029d8:	fba3 1302 	umull	r1, r3, r3, r2
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	2164      	movs	r1, #100	; 0x64
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	3332      	adds	r3, #50	; 0x32
 80029ea:	4a69      	ldr	r2, [pc, #420]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4433      	add	r3, r6
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	e0be      	b.n	8002b84 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a08:	461c      	mov	r4, r3
 8002a0a:	f04f 0500 	mov.w	r5, #0
 8002a0e:	4622      	mov	r2, r4
 8002a10:	462b      	mov	r3, r5
 8002a12:	eb12 0802 	adds.w	r8, r2, r2
 8002a16:	eb43 0903 	adc.w	r9, r3, r3
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	1912      	adds	r2, r2, r4
 8002a20:	eb45 0303 	adc.w	r3, r5, r3
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	00d9      	lsls	r1, r3, #3
 8002a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a32:	00d0      	lsls	r0, r2, #3
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	1911      	adds	r1, r2, r4
 8002a3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a3c:	416b      	adcs	r3, r5
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a42:	4618      	mov	r0, r3
 8002a44:	f04f 0100 	mov.w	r1, #0
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	008b      	lsls	r3, r1, #2
 8002a52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a56:	0082      	lsls	r2, r0, #2
 8002a58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a5c:	f7fd ffb2 	bl	80009c4 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 8002a66:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	b29e      	uxth	r6, r3
 8002a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a74:	4618      	mov	r0, r3
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	1894      	adds	r4, r2, r2
 8002a80:	60bc      	str	r4, [r7, #8]
 8002a82:	415b      	adcs	r3, r3
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8a:	1812      	adds	r2, r2, r0
 8002a8c:	eb41 0303 	adc.w	r3, r1, r3
 8002a90:	f04f 0400 	mov.w	r4, #0
 8002a94:	f04f 0500 	mov.w	r5, #0
 8002a98:	00dd      	lsls	r5, r3, #3
 8002a9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a9e:	00d4      	lsls	r4, r2, #3
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	462b      	mov	r3, r5
 8002aa4:	1814      	adds	r4, r2, r0
 8002aa6:	643c      	str	r4, [r7, #64]	; 0x40
 8002aa8:	414b      	adcs	r3, r1
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	008b      	lsls	r3, r1, #2
 8002abe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ac2:	0082      	lsls	r2, r0, #2
 8002ac4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002ac8:	f7fd ff7c 	bl	80009c4 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 8002ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2164      	movs	r1, #100	; 0x64
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4433      	add	r3, r6
 8002af6:	b29e      	uxth	r6, r3
 8002af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afa:	4618      	mov	r0, r3
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	1894      	adds	r4, r2, r2
 8002b06:	603c      	str	r4, [r7, #0]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b10:	1812      	adds	r2, r2, r0
 8002b12:	eb41 0303 	adc.w	r3, r1, r3
 8002b16:	f04f 0400 	mov.w	r4, #0
 8002b1a:	f04f 0500 	mov.w	r5, #0
 8002b1e:	00dd      	lsls	r5, r3, #3
 8002b20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b24:	00d4      	lsls	r4, r2, #3
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	1814      	adds	r4, r2, r0
 8002b2c:	63bc      	str	r4, [r7, #56]	; 0x38
 8002b2e:	414b      	adcs	r3, r1
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b34:	4618      	mov	r0, r3
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b48:	0082      	lsls	r2, r0, #2
 8002b4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b4e:	f7fd ff39 	bl	80009c4 <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 8002b58:	fba3 1302 	umull	r1, r3, r3, r2
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	2164      	movs	r1, #100	; 0x64
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	3332      	adds	r3, #50	; 0x32
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <LL_USART_SetBaudRate+0x31c>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4433      	add	r3, r6
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	377c      	adds	r7, #124	; 0x7c
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b8e:	bf00      	nop
 8002b90:	51eb851f 	.word	0x51eb851f

08002b94 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fe2a 	bl	8002800 <LL_USART_IsEnabled>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d149      	bne.n	8002c46 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bba:	f023 030c 	bic.w	r3, r3, #12
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6851      	ldr	r1, [r2, #4]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	6912      	ldr	r2, [r2, #16]
 8002bcc:	4311      	orrs	r1, r2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	6992      	ldr	r2, [r2, #24]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fe21 	bl	8002828 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fe2e 	bl	800284e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002bf2:	f107 0308 	add.w	r3, r7, #8
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fa7e 	bl	80020f8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <LL_USART_Init+0xbc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d102      	bne.n	8002c0a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e00c      	b.n	8002c24 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <LL_USART_Init+0xc0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d102      	bne.n	8002c18 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e005      	b.n	8002c24 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <LL_USART_Init+0xc4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d101      	bne.n	8002c24 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8002c32:	2300      	movs	r3, #0
 8002c34:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fe17 	bl	8002874 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40011000 	.word	0x40011000
 8002c54:	40004400 	.word	0x40004400
 8002c58:	40011400 	.word	0x40011400

08002c5c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <LL_InitTick+0x30>)
 8002c70:	3b01      	subs	r3, #1
 8002c72:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <LL_InitTick+0x30>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <LL_InitTick+0x30>)
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ffdd 	bl	8002c5c <LL_InitTick>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <LL_SetSystemCoreClock+0x1c>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <__libc_init_array>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4d0d      	ldr	r5, [pc, #52]	; (8002d04 <__libc_init_array+0x38>)
 8002cd0:	4c0d      	ldr	r4, [pc, #52]	; (8002d08 <__libc_init_array+0x3c>)
 8002cd2:	1b64      	subs	r4, r4, r5
 8002cd4:	10a4      	asrs	r4, r4, #2
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	42a6      	cmp	r6, r4
 8002cda:	d109      	bne.n	8002cf0 <__libc_init_array+0x24>
 8002cdc:	4d0b      	ldr	r5, [pc, #44]	; (8002d0c <__libc_init_array+0x40>)
 8002cde:	4c0c      	ldr	r4, [pc, #48]	; (8002d10 <__libc_init_array+0x44>)
 8002ce0:	f000 f820 	bl	8002d24 <_init>
 8002ce4:	1b64      	subs	r4, r4, r5
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	2600      	movs	r6, #0
 8002cea:	42a6      	cmp	r6, r4
 8002cec:	d105      	bne.n	8002cfa <__libc_init_array+0x2e>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf4:	4798      	blx	r3
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7ee      	b.n	8002cd8 <__libc_init_array+0xc>
 8002cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfe:	4798      	blx	r3
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7f2      	b.n	8002cea <__libc_init_array+0x1e>
 8002d04:	08002d6c 	.word	0x08002d6c
 8002d08:	08002d6c 	.word	0x08002d6c
 8002d0c:	08002d6c 	.word	0x08002d6c
 8002d10:	08002d70 	.word	0x08002d70

08002d14 <memset>:
 8002d14:	4402      	add	r2, r0
 8002d16:	4603      	mov	r3, r0
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d100      	bne.n	8002d1e <memset+0xa>
 8002d1c:	4770      	bx	lr
 8002d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d22:	e7f9      	b.n	8002d18 <memset+0x4>

08002d24 <_init>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr

08002d30 <_fini>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr
